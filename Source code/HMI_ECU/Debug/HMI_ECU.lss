
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000037b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000037b0  00003844  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000f6  008000f6  000038da  2**0
                  ALLOC
  3 .stab         00002f94  00000000  00000000  000038dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001192  00000000  00000000  00006870  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007a02  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007b42  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007cb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000098fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a7e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b594  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b981  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c14f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 39 19 	jmp	0x3272	; 0x3272 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3f       	cpi	r26, 0xF6	; 246
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 ef       	ldi	r26, 0xF6	; 246
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3f       	cpi	r26, 0xF9	; 249
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 df 14 	call	0x29be	; 0x29be <main>
      8a:	0c 94 d6 1b 	jmp	0x37ac	; 0x37ac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 ee       	ldi	r26, 0xE2	; 226
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5b 1b 	jmp	0x36b6	; 0x36b6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 ee       	ldi	r24, 0xE2	; 226
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 67 1b 	jmp	0x36ce	; 0x36ce <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 6b 1b 	jmp	0x36d6	; 0x36d6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 87 1b 	jmp	0x370e	; 0x370e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
/*
 * Description:
 * Set the required direction of pin input/output.
 * If the input port number on pin number is incorrect, The function will not handle the request.
 * */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if(port_num >= NUM_OF_PORTS  || pin_num >= NUM_OF_PINS_PER_PORTS){
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* DO NOTHING */

	}
	else{
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		/* Setup the pin direction as required */
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	a1 f4       	brne	.+40     	; 0xbdc <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	84 2b       	or	r24, r20
     bd8:	8c 93       	st	X, r24
     bda:	98 c0       	rjmp	.+304    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRA,pin_num);
     bdc:	aa e3       	ldi	r26, 0x3A	; 58
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	ea e3       	ldi	r30, 0x3A	; 58
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	48 2f       	mov	r20, r24
     be8:	8a 81       	ldd	r24, Y+2	; 0x02
     bea:	28 2f       	mov	r18, r24
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	02 2e       	mov	r0, r18
     bf4:	02 c0       	rjmp	.+4      	; 0xbfa <GPIO_setupPinDirection+0xb4>
     bf6:	88 0f       	add	r24, r24
     bf8:	99 1f       	adc	r25, r25
     bfa:	0a 94       	dec	r0
     bfc:	e2 f7       	brpl	.-8      	; 0xbf6 <GPIO_setupPinDirection+0xb0>
     bfe:	80 95       	com	r24
     c00:	84 23       	and	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	81 30       	cpi	r24, 0x01	; 1
     c0a:	a1 f4       	brne	.+40     	; 0xc34 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	84 2b       	or	r24, r20
     c30:	8c 93       	st	X, r24
     c32:	6c c0       	rjmp	.+216    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRB,pin_num);
     c34:	a7 e3       	ldi	r26, 0x37	; 55
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e7 e3       	ldi	r30, 0x37	; 55
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <GPIO_setupPinDirection+0x10c>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <GPIO_setupPinDirection+0x108>
     c56:	80 95       	com	r24
     c58:	84 23       	and	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	81 30       	cpi	r24, 0x01	; 1
     c62:	a1 f4       	brne	.+40     	; 0xc8c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	84 2b       	or	r24, r20
     c88:	8c 93       	st	X, r24
     c8a:	40 c0       	rjmp	.+128    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRC,pin_num);
     c8c:	a4 e3       	ldi	r26, 0x34	; 52
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	e4 e3       	ldi	r30, 0x34	; 52
     c92:	f0 e0       	ldi	r31, 0x00	; 0
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	8a 81       	ldd	r24, Y+2	; 0x02
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	02 2e       	mov	r0, r18
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <GPIO_setupPinDirection+0x164>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	0a 94       	dec	r0
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <GPIO_setupPinDirection+0x160>
     cae:	80 95       	com	r24
     cb0:	84 23       	and	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	81 30       	cpi	r24, 0x01	; 1
     cba:	a1 f4       	brne	.+40     	; 0xce4 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	84 2b       	or	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRD,pin_num);
     ce4:	a1 e3       	ldi	r26, 0x31	; 49
     ce6:	b0 e0       	ldi	r27, 0x00	; 0
     ce8:	e1 e3       	ldi	r30, 0x31	; 49
     cea:	f0 e0       	ldi	r31, 0x00	; 0
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	8a 81       	ldd	r24, Y+2	; 0x02
     cf2:	28 2f       	mov	r18, r24
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	02 2e       	mov	r0, r18
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <GPIO_setupPinDirection+0x1bc>
     cfe:	88 0f       	add	r24, r24
     d00:	99 1f       	adc	r25, r25
     d02:	0a 94       	dec	r0
     d04:	e2 f7       	brpl	.-8      	; 0xcfe <GPIO_setupPinDirection+0x1b8>
     d06:	80 95       	com	r24
     d08:	84 23       	and	r24, r20
     d0a:	8c 93       	st	X, r24
			break;
		}

	}

}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Description:
 * Write the value LOGIC HIGH or LOGIC LOW on the required pin
 * If the input port number of pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 * */
void GPIO_writePin(uint8 port_num, uint8 pin_num,uint8 value){
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03

	if(port_num >= NUM_OF_PORTS  || pin_num >= NUM_OF_PINS_PER_PORTS){
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
		/* DO NOTHING */

	}
	else
	{
		switch(port_num){
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	a1 f4       	brne	.+40     	; 0xdb2 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	84 2b       	or	r24, r20
     dae:	8c 93       	st	X, r24
     db0:	98 c0       	rjmp	.+304    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     db2:	ab e3       	ldi	r26, 0x3B	; 59
     db4:	b0 e0       	ldi	r27, 0x00	; 0
     db6:	eb e3       	ldi	r30, 0x3B	; 59
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	80 81       	ld	r24, Z
     dbc:	48 2f       	mov	r20, r24
     dbe:	8a 81       	ldd	r24, Y+2	; 0x02
     dc0:	28 2f       	mov	r18, r24
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	02 2e       	mov	r0, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <GPIO_writePin+0xb4>
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	0a 94       	dec	r0
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <GPIO_writePin+0xb0>
     dd4:	80 95       	com	r24
     dd6:	84 23       	and	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	81 30       	cpi	r24, 0x01	; 1
     de0:	a1 f4       	brne	.+40     	; 0xe0a <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	84 2b       	or	r24, r20
     e06:	8c 93       	st	X, r24
     e08:	6c c0       	rjmp	.+216    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     e0a:	a8 e3       	ldi	r26, 0x38	; 56
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	e8 e3       	ldi	r30, 0x38	; 56
     e10:	f0 e0       	ldi	r31, 0x00	; 0
     e12:	80 81       	ld	r24, Z
     e14:	48 2f       	mov	r20, r24
     e16:	8a 81       	ldd	r24, Y+2	; 0x02
     e18:	28 2f       	mov	r18, r24
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	02 2e       	mov	r0, r18
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <GPIO_writePin+0x10c>
     e24:	88 0f       	add	r24, r24
     e26:	99 1f       	adc	r25, r25
     e28:	0a 94       	dec	r0
     e2a:	e2 f7       	brpl	.-8      	; 0xe24 <GPIO_writePin+0x108>
     e2c:	80 95       	com	r24
     e2e:	84 23       	and	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	81 30       	cpi	r24, 0x01	; 1
     e38:	a1 f4       	brne	.+40     	; 0xe62 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	84 2b       	or	r24, r20
     e5e:	8c 93       	st	X, r24
     e60:	40 c0       	rjmp	.+128    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     e62:	a5 e3       	ldi	r26, 0x35	; 53
     e64:	b0 e0       	ldi	r27, 0x00	; 0
     e66:	e5 e3       	ldi	r30, 0x35	; 53
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	80 81       	ld	r24, Z
     e6c:	48 2f       	mov	r20, r24
     e6e:	8a 81       	ldd	r24, Y+2	; 0x02
     e70:	28 2f       	mov	r18, r24
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	02 2e       	mov	r0, r18
     e7a:	02 c0       	rjmp	.+4      	; 0xe80 <GPIO_writePin+0x164>
     e7c:	88 0f       	add	r24, r24
     e7e:	99 1f       	adc	r25, r25
     e80:	0a 94       	dec	r0
     e82:	e2 f7       	brpl	.-8      	; 0xe7c <GPIO_writePin+0x160>
     e84:	80 95       	com	r24
     e86:	84 23       	and	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	81 30       	cpi	r24, 0x01	; 1
     e90:	a1 f4       	brne	.+40     	; 0xeba <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	14 c0       	rjmp	.+40     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     eba:	a2 e3       	ldi	r26, 0x32	; 50
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e2 e3       	ldi	r30, 0x32	; 50
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	48 2f       	mov	r20, r24
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	28 2f       	mov	r18, r24
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	81 e0       	ldi	r24, 0x01	; 1
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	02 2e       	mov	r0, r18
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <GPIO_writePin+0x1bc>
     ed4:	88 0f       	add	r24, r24
     ed6:	99 1f       	adc	r25, r25
     ed8:	0a 94       	dec	r0
     eda:	e2 f7       	brpl	.-8      	; 0xed4 <GPIO_writePin+0x1b8>
     edc:	80 95       	com	r24
     ede:	84 23       	and	r24, r20
     ee0:	8c 93       	st	X, r24
	}




}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
/*
 * Description:
 * Read and return the value for the required pin,it should be LOGDIC HIGH or LOGIC LOW.
 * If the input port number or pin number are not correct, The function will return LOGIC LOW.
 * */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	00 d0       	rcall	.+0      	; 0xefc <GPIO_readPin+0xa>
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03

	uint8 state = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS  || pin_num >= NUM_OF_PINS_PER_PORTS){
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	18 f4       	brcc	.+6      	; 0xf12 <GPIO_readPin+0x20>
     f0c:	8b 81       	ldd	r24, Y+3	; 0x03
     f0e:	88 30       	cpi	r24, 0x08	; 8
     f10:	18 f0       	brcs	.+6      	; 0xf18 <GPIO_readPin+0x26>

		return state;
     f12:	29 81       	ldd	r18, Y+1	; 0x01
     f14:	2e 83       	std	Y+6, r18	; 0x06
     f16:	82 c0       	rjmp	.+260    	; 0x101c <GPIO_readPin+0x12a>

	}
	else
	{
		switch(port_num){
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	48 2f       	mov	r20, r24
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	5d 83       	std	Y+5, r21	; 0x05
     f20:	4c 83       	std	Y+4, r20	; 0x04
     f22:	8c 81       	ldd	r24, Y+4	; 0x04
     f24:	9d 81       	ldd	r25, Y+5	; 0x05
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	91 05       	cpc	r25, r1
     f2a:	79 f1       	breq	.+94     	; 0xf8a <GPIO_readPin+0x98>
     f2c:	2c 81       	ldd	r18, Y+4	; 0x04
     f2e:	3d 81       	ldd	r19, Y+5	; 0x05
     f30:	22 30       	cpi	r18, 0x02	; 2
     f32:	31 05       	cpc	r19, r1
     f34:	34 f4       	brge	.+12     	; 0xf42 <GPIO_readPin+0x50>
     f36:	4c 81       	ldd	r20, Y+4	; 0x04
     f38:	5d 81       	ldd	r21, Y+5	; 0x05
     f3a:	41 15       	cp	r20, r1
     f3c:	51 05       	cpc	r21, r1
     f3e:	69 f0       	breq	.+26     	; 0xf5a <GPIO_readPin+0x68>
     f40:	6b c0       	rjmp	.+214    	; 0x1018 <GPIO_readPin+0x126>
     f42:	8c 81       	ldd	r24, Y+4	; 0x04
     f44:	9d 81       	ldd	r25, Y+5	; 0x05
     f46:	82 30       	cpi	r24, 0x02	; 2
     f48:	91 05       	cpc	r25, r1
     f4a:	b9 f1       	breq	.+110    	; 0xfba <GPIO_readPin+0xc8>
     f4c:	2c 81       	ldd	r18, Y+4	; 0x04
     f4e:	3d 81       	ldd	r19, Y+5	; 0x05
     f50:	23 30       	cpi	r18, 0x03	; 3
     f52:	31 05       	cpc	r19, r1
     f54:	09 f4       	brne	.+2      	; 0xf58 <GPIO_readPin+0x66>
     f56:	49 c0       	rjmp	.+146    	; 0xfea <GPIO_readPin+0xf8>
     f58:	5f c0       	rjmp	.+190    	; 0x1018 <GPIO_readPin+0x126>
		case PORTA_ID:
			if( BIT_IS_SET(PINA,pin_num) )
     f5a:	e9 e3       	ldi	r30, 0x39	; 57
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	28 2f       	mov	r18, r24
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	a9 01       	movw	r20, r18
     f6c:	02 c0       	rjmp	.+4      	; 0xf72 <GPIO_readPin+0x80>
     f6e:	55 95       	asr	r21
     f70:	47 95       	ror	r20
     f72:	8a 95       	dec	r24
     f74:	e2 f7       	brpl	.-8      	; 0xf6e <GPIO_readPin+0x7c>
     f76:	ca 01       	movw	r24, r20
     f78:	81 70       	andi	r24, 0x01	; 1
     f7a:	90 70       	andi	r25, 0x00	; 0
     f7c:	88 23       	and	r24, r24
     f7e:	19 f0       	breq	.+6      	; 0xf86 <GPIO_readPin+0x94>
			{
				state = LOGIC_HIGH;
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	89 83       	std	Y+1, r24	; 0x01
     f84:	49 c0       	rjmp	.+146    	; 0x1018 <GPIO_readPin+0x126>

			}
			else
			{
				state = LOGIC_LOW;
     f86:	19 82       	std	Y+1, r1	; 0x01
     f88:	47 c0       	rjmp	.+142    	; 0x1018 <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if( BIT_IS_SET(PINB,pin_num) )
     f8a:	e6 e3       	ldi	r30, 0x36	; 54
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	28 2f       	mov	r18, r24
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	8b 81       	ldd	r24, Y+3	; 0x03
     f96:	88 2f       	mov	r24, r24
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	a9 01       	movw	r20, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <GPIO_readPin+0xb0>
     f9e:	55 95       	asr	r21
     fa0:	47 95       	ror	r20
     fa2:	8a 95       	dec	r24
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <GPIO_readPin+0xac>
     fa6:	ca 01       	movw	r24, r20
     fa8:	81 70       	andi	r24, 0x01	; 1
     faa:	90 70       	andi	r25, 0x00	; 0
     fac:	88 23       	and	r24, r24
     fae:	19 f0       	breq	.+6      	; 0xfb6 <GPIO_readPin+0xc4>
			{
				state = LOGIC_HIGH;
     fb0:	81 e0       	ldi	r24, 0x01	; 1
     fb2:	89 83       	std	Y+1, r24	; 0x01
     fb4:	31 c0       	rjmp	.+98     	; 0x1018 <GPIO_readPin+0x126>

			}
			else
			{
				state = LOGIC_LOW;
     fb6:	19 82       	std	Y+1, r1	; 0x01
     fb8:	2f c0       	rjmp	.+94     	; 0x1018 <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if( BIT_IS_SET(PINC,pin_num) )
     fba:	e3 e3       	ldi	r30, 0x33	; 51
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	88 2f       	mov	r24, r24
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	a9 01       	movw	r20, r18
     fcc:	02 c0       	rjmp	.+4      	; 0xfd2 <GPIO_readPin+0xe0>
     fce:	55 95       	asr	r21
     fd0:	47 95       	ror	r20
     fd2:	8a 95       	dec	r24
     fd4:	e2 f7       	brpl	.-8      	; 0xfce <GPIO_readPin+0xdc>
     fd6:	ca 01       	movw	r24, r20
     fd8:	81 70       	andi	r24, 0x01	; 1
     fda:	90 70       	andi	r25, 0x00	; 0
     fdc:	88 23       	and	r24, r24
     fde:	19 f0       	breq	.+6      	; 0xfe6 <GPIO_readPin+0xf4>
			{
				state = LOGIC_HIGH;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	89 83       	std	Y+1, r24	; 0x01
     fe4:	19 c0       	rjmp	.+50     	; 0x1018 <GPIO_readPin+0x126>

			}
			else
			{
				state = LOGIC_LOW;
     fe6:	19 82       	std	Y+1, r1	; 0x01
     fe8:	17 c0       	rjmp	.+46     	; 0x1018 <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if( BIT_IS_SET(PIND,pin_num) )
     fea:	e0 e3       	ldi	r30, 0x30	; 48
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	80 81       	ld	r24, Z
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	88 2f       	mov	r24, r24
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	a9 01       	movw	r20, r18
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <GPIO_readPin+0x110>
     ffe:	55 95       	asr	r21
    1000:	47 95       	ror	r20
    1002:	8a 95       	dec	r24
    1004:	e2 f7       	brpl	.-8      	; 0xffe <GPIO_readPin+0x10c>
    1006:	ca 01       	movw	r24, r20
    1008:	81 70       	andi	r24, 0x01	; 1
    100a:	90 70       	andi	r25, 0x00	; 0
    100c:	88 23       	and	r24, r24
    100e:	19 f0       	breq	.+6      	; 0x1016 <GPIO_readPin+0x124>
			{
				state = LOGIC_HIGH;
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	89 83       	std	Y+1, r24	; 0x01
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <GPIO_readPin+0x126>

			}
			else
			{
				state = LOGIC_LOW;
    1016:	19 82       	std	Y+1, r1	; 0x01
			break;

		}

	}
	return state;
    1018:	59 81       	ldd	r21, Y+1	; 0x01
    101a:	5e 83       	std	Y+6, r21	; 0x06
    101c:	8e 81       	ldd	r24, Y+6	; 0x06
}
    101e:	26 96       	adiw	r28, 0x06	; 6
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 * */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PortDirectionType direction){
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <GPIO_setupPortDirection+0x6>
    1036:	00 d0       	rcall	.+0      	; 0x1038 <GPIO_setupPortDirection+0x8>
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS){
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	84 30       	cpi	r24, 0x04	; 4
    1044:	90 f5       	brcc	.+100    	; 0x10aa <GPIO_setupPortDirection+0x7a>
		/* DO NOTHING */

	}
	else
	{
		switch(port_num)
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	28 2f       	mov	r18, r24
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	3c 83       	std	Y+4, r19	; 0x04
    104e:	2b 83       	std	Y+3, r18	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	81 30       	cpi	r24, 0x01	; 1
    1056:	91 05       	cpc	r25, r1
    1058:	d1 f0       	breq	.+52     	; 0x108e <GPIO_setupPortDirection+0x5e>
    105a:	2b 81       	ldd	r18, Y+3	; 0x03
    105c:	3c 81       	ldd	r19, Y+4	; 0x04
    105e:	22 30       	cpi	r18, 0x02	; 2
    1060:	31 05       	cpc	r19, r1
    1062:	2c f4       	brge	.+10     	; 0x106e <GPIO_setupPortDirection+0x3e>
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	00 97       	sbiw	r24, 0x00	; 0
    106a:	61 f0       	breq	.+24     	; 0x1084 <GPIO_setupPortDirection+0x54>
    106c:	1e c0       	rjmp	.+60     	; 0x10aa <GPIO_setupPortDirection+0x7a>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	22 30       	cpi	r18, 0x02	; 2
    1074:	31 05       	cpc	r19, r1
    1076:	81 f0       	breq	.+32     	; 0x1098 <GPIO_setupPortDirection+0x68>
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	83 30       	cpi	r24, 0x03	; 3
    107e:	91 05       	cpc	r25, r1
    1080:	81 f0       	breq	.+32     	; 0x10a2 <GPIO_setupPortDirection+0x72>
    1082:	13 c0       	rjmp	.+38     	; 0x10aa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1084:	ea e3       	ldi	r30, 0x3A	; 58
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	80 83       	st	Z, r24
    108c:	0e c0       	rjmp	.+28     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    108e:	e7 e3       	ldi	r30, 0x37	; 55
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
    1094:	80 83       	st	Z, r24
    1096:	09 c0       	rjmp	.+18     	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1098:	e4 e3       	ldi	r30, 0x34	; 52
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	8a 81       	ldd	r24, Y+2	; 0x02
    109e:	80 83       	st	Z, r24
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    10a2:	e1 e3       	ldi	r30, 0x31	; 49
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	80 83       	st	Z, r24
			break;
		}

	}
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	cf 91       	pop	r28
    10b4:	df 91       	pop	r29
    10b6:	08 95       	ret

000010b8 <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value){
    10b8:	df 93       	push	r29
    10ba:	cf 93       	push	r28
    10bc:	00 d0       	rcall	.+0      	; 0x10be <GPIO_writePort+0x6>
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <GPIO_writePort+0x8>
    10c0:	cd b7       	in	r28, 0x3d	; 61
    10c2:	de b7       	in	r29, 0x3e	; 62
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	84 30       	cpi	r24, 0x04	; 4
    10cc:	90 f5       	brcc	.+100    	; 0x1132 <GPIO_writePort+0x7a>
		/* DO NOTHING */

	}
	else
	{
		switch(port_num)
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	28 2f       	mov	r18, r24
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	3c 83       	std	Y+4, r19	; 0x04
    10d6:	2b 83       	std	Y+3, r18	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	81 30       	cpi	r24, 0x01	; 1
    10de:	91 05       	cpc	r25, r1
    10e0:	d1 f0       	breq	.+52     	; 0x1116 <GPIO_writePort+0x5e>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	2c f4       	brge	.+10     	; 0x10f6 <GPIO_writePort+0x3e>
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	00 97       	sbiw	r24, 0x00	; 0
    10f2:	61 f0       	breq	.+24     	; 0x110c <GPIO_writePort+0x54>
    10f4:	1e c0       	rjmp	.+60     	; 0x1132 <GPIO_writePort+0x7a>
    10f6:	2b 81       	ldd	r18, Y+3	; 0x03
    10f8:	3c 81       	ldd	r19, Y+4	; 0x04
    10fa:	22 30       	cpi	r18, 0x02	; 2
    10fc:	31 05       	cpc	r19, r1
    10fe:	81 f0       	breq	.+32     	; 0x1120 <GPIO_writePort+0x68>
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	83 30       	cpi	r24, 0x03	; 3
    1106:	91 05       	cpc	r25, r1
    1108:	81 f0       	breq	.+32     	; 0x112a <GPIO_writePort+0x72>
    110a:	13 c0       	rjmp	.+38     	; 0x1132 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    110c:	eb e3       	ldi	r30, 0x3B	; 59
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	8a 81       	ldd	r24, Y+2	; 0x02
    1112:	80 83       	st	Z, r24
    1114:	0e c0       	rjmp	.+28     	; 0x1132 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1116:	e8 e3       	ldi	r30, 0x38	; 56
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	8a 81       	ldd	r24, Y+2	; 0x02
    111c:	80 83       	st	Z, r24
    111e:	09 c0       	rjmp	.+18     	; 0x1132 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1120:	e5 e3       	ldi	r30, 0x35	; 53
    1122:	f0 e0       	ldi	r31, 0x00	; 0
    1124:	8a 81       	ldd	r24, Y+2	; 0x02
    1126:	80 83       	st	Z, r24
    1128:	04 c0       	rjmp	.+8      	; 0x1132 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    112a:	e2 e3       	ldi	r30, 0x32	; 50
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8a 81       	ldd	r24, Y+2	; 0x02
    1130:	80 83       	st	Z, r24
			break;
		}

	}

}
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	0f 90       	pop	r0
    1138:	0f 90       	pop	r0
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	00 d0       	rcall	.+0      	; 0x1146 <GPIO_readPort+0x6>
    1146:	00 d0       	rcall	.+0      	; 0x1148 <GPIO_readPort+0x8>
    1148:	0f 92       	push	r0
    114a:	cd b7       	in	r28, 0x3d	; 61
    114c:	de b7       	in	r29, 0x3e	; 62
    114e:	8a 83       	std	Y+2, r24	; 0x02

	uint8 state = LOGIC_LOW;
    1150:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	84 30       	cpi	r24, 0x04	; 4
    1156:	18 f0       	brcs	.+6      	; 0x115e <GPIO_readPort+0x1e>
	{
		return state;
    1158:	29 81       	ldd	r18, Y+1	; 0x01
    115a:	2d 83       	std	Y+5, r18	; 0x05
    115c:	34 c0       	rjmp	.+104    	; 0x11c6 <GPIO_readPort+0x86>

	}
	else
	{
		switch(port_num){
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	28 2f       	mov	r18, r24
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	3c 83       	std	Y+4, r19	; 0x04
    1166:	2b 83       	std	Y+3, r18	; 0x03
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	9c 81       	ldd	r25, Y+4	; 0x04
    116c:	81 30       	cpi	r24, 0x01	; 1
    116e:	91 05       	cpc	r25, r1
    1170:	d1 f0       	breq	.+52     	; 0x11a6 <GPIO_readPort+0x66>
    1172:	2b 81       	ldd	r18, Y+3	; 0x03
    1174:	3c 81       	ldd	r19, Y+4	; 0x04
    1176:	22 30       	cpi	r18, 0x02	; 2
    1178:	31 05       	cpc	r19, r1
    117a:	2c f4       	brge	.+10     	; 0x1186 <GPIO_readPort+0x46>
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	00 97       	sbiw	r24, 0x00	; 0
    1182:	61 f0       	breq	.+24     	; 0x119c <GPIO_readPort+0x5c>
    1184:	1e c0       	rjmp	.+60     	; 0x11c2 <GPIO_readPort+0x82>
    1186:	2b 81       	ldd	r18, Y+3	; 0x03
    1188:	3c 81       	ldd	r19, Y+4	; 0x04
    118a:	22 30       	cpi	r18, 0x02	; 2
    118c:	31 05       	cpc	r19, r1
    118e:	81 f0       	breq	.+32     	; 0x11b0 <GPIO_readPort+0x70>
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	83 30       	cpi	r24, 0x03	; 3
    1196:	91 05       	cpc	r25, r1
    1198:	81 f0       	breq	.+32     	; 0x11ba <GPIO_readPort+0x7a>
    119a:	13 c0       	rjmp	.+38     	; 0x11c2 <GPIO_readPort+0x82>
		case PORTA_ID:
			state = PINA;
    119c:	e9 e3       	ldi	r30, 0x39	; 57
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	0e c0       	rjmp	.+28     	; 0x11c2 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			state = PINB;
    11a6:	e6 e3       	ldi	r30, 0x36	; 54
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	89 83       	std	Y+1, r24	; 0x01
    11ae:	09 c0       	rjmp	.+18     	; 0x11c2 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			state = PINC;
    11b0:	e3 e3       	ldi	r30, 0x33	; 51
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	89 83       	std	Y+1, r24	; 0x01
    11b8:	04 c0       	rjmp	.+8      	; 0x11c2 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			state = PIND;
    11ba:	e0 e3       	ldi	r30, 0x30	; 48
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return state;
    11c2:	99 81       	ldd	r25, Y+1	; 0x01
    11c4:	9d 83       	std	Y+5, r25	; 0x05
    11c6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    11c8:	0f 90       	pop	r0
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    11d8:	df 93       	push	r29
    11da:	cf 93       	push	r28
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	60 97       	sbiw	r28, 0x10	; 16
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	64 e0       	ldi	r22, 0x04	; 4
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	65 e0       	ldi	r22, 0x05	; 5
    11fa:	40 e0       	ldi	r20, 0x00	; 0
    11fc:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1200:	81 e0       	ldi	r24, 0x01	; 1
    1202:	66 e0       	ldi	r22, 0x06	; 6
    1204:	40 e0       	ldi	r20, 0x00	; 0
    1206:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	67 e0       	ldi	r22, 0x07	; 7
    120e:	40 e0       	ldi	r20, 0x00	; 0
    1210:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1214:	83 e0       	ldi	r24, 0x03	; 3
    1216:	62 e0       	ldi	r22, 0x02	; 2
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    121e:	83 e0       	ldi	r24, 0x03	; 3
    1220:	63 e0       	ldi	r22, 0x03	; 3
    1222:	40 e0       	ldi	r20, 0x00	; 0
    1224:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1228:	83 e0       	ldi	r24, 0x03	; 3
    122a:	64 e0       	ldi	r22, 0x04	; 4
    122c:	40 e0       	ldi	r20, 0x00	; 0
    122e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1232:	83 e0       	ldi	r24, 0x03	; 3
    1234:	65 e0       	ldi	r22, 0x05	; 5
    1236:	40 e0       	ldi	r20, 0x00	; 0
    1238:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    123c:	1f 86       	std	Y+15, r1	; 0x0f
    123e:	b4 c0       	rjmp	.+360    	; 0x13a8 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1240:	8f 85       	ldd	r24, Y+15	; 0x0f
    1242:	98 2f       	mov	r25, r24
    1244:	9c 5f       	subi	r25, 0xFC	; 252
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	69 2f       	mov	r22, r25
    124a:	41 e0       	ldi	r20, 0x01	; 1
    124c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1250:	8f 85       	ldd	r24, Y+15	; 0x0f
    1252:	98 2f       	mov	r25, r24
    1254:	9c 5f       	subi	r25, 0xFC	; 252
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	69 2f       	mov	r22, r25
    125a:	40 e0       	ldi	r20, 0x00	; 0
    125c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1260:	18 8a       	std	Y+16, r1	; 0x10
    1262:	22 c0       	rjmp	.+68     	; 0x12a8 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1264:	88 89       	ldd	r24, Y+16	; 0x10
    1266:	98 2f       	mov	r25, r24
    1268:	9e 5f       	subi	r25, 0xFE	; 254
    126a:	83 e0       	ldi	r24, 0x03	; 3
    126c:	69 2f       	mov	r22, r25
    126e:	0e 94 79 07 	call	0xef2	; 0xef2 <GPIO_readPin>
    1272:	88 23       	and	r24, r24
    1274:	b1 f4       	brne	.+44     	; 0x12a2 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1276:	8f 85       	ldd	r24, Y+15	; 0x0f
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	88 0f       	add	r24, r24
    127e:	99 1f       	adc	r25, r25
    1280:	88 0f       	add	r24, r24
    1282:	99 1f       	adc	r25, r25
    1284:	98 2f       	mov	r25, r24
    1286:	88 89       	ldd	r24, Y+16	; 0x10
    1288:	89 0f       	add	r24, r25
    128a:	8f 5f       	subi	r24, 0xFF	; 255
    128c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(35); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1290:	60 96       	adiw	r28, 0x10	; 16
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	f8 94       	cli
    1296:	de bf       	out	0x3e, r29	; 62
    1298:	0f be       	out	0x3f, r0	; 63
    129a:	cd bf       	out	0x3d, r28	; 61
    129c:	cf 91       	pop	r28
    129e:	df 91       	pop	r29
    12a0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    12a2:	88 89       	ldd	r24, Y+16	; 0x10
    12a4:	8f 5f       	subi	r24, 0xFF	; 255
    12a6:	88 8b       	std	Y+16, r24	; 0x10
    12a8:	88 89       	ldd	r24, Y+16	; 0x10
    12aa:	84 30       	cpi	r24, 0x04	; 4
    12ac:	d8 f2       	brcs	.-74     	; 0x1264 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    12ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    12b0:	98 2f       	mov	r25, r24
    12b2:	9c 5f       	subi	r25, 0xFC	; 252
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	69 2f       	mov	r22, r25
    12b8:	40 e0       	ldi	r20, 0x00	; 0
    12ba:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	ac e0       	ldi	r26, 0x0C	; 12
    12c4:	b2 e4       	ldi	r27, 0x42	; 66
    12c6:	8b 87       	std	Y+11, r24	; 0x0b
    12c8:	9c 87       	std	Y+12, r25	; 0x0c
    12ca:	ad 87       	std	Y+13, r26	; 0x0d
    12cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	4a ef       	ldi	r20, 0xFA	; 250
    12dc:	54 e4       	ldi	r21, 0x44	; 68
    12de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e2:	dc 01       	movw	r26, r24
    12e4:	cb 01       	movw	r24, r22
    12e6:	8f 83       	std	Y+7, r24	; 0x07
    12e8:	98 87       	std	Y+8, r25	; 0x08
    12ea:	a9 87       	std	Y+9, r26	; 0x09
    12ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12ee:	6f 81       	ldd	r22, Y+7	; 0x07
    12f0:	78 85       	ldd	r23, Y+8	; 0x08
    12f2:	89 85       	ldd	r24, Y+9	; 0x09
    12f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f6:	20 e0       	ldi	r18, 0x00	; 0
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e8       	ldi	r20, 0x80	; 128
    12fc:	5f e3       	ldi	r21, 0x3F	; 63
    12fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1302:	88 23       	and	r24, r24
    1304:	2c f4       	brge	.+10     	; 0x1310 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 83       	std	Y+5, r24	; 0x05
    130e:	3f c0       	rjmp	.+126    	; 0x138e <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1310:	6f 81       	ldd	r22, Y+7	; 0x07
    1312:	78 85       	ldd	r23, Y+8	; 0x08
    1314:	89 85       	ldd	r24, Y+9	; 0x09
    1316:	9a 85       	ldd	r25, Y+10	; 0x0a
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	3f ef       	ldi	r19, 0xFF	; 255
    131c:	4f e7       	ldi	r20, 0x7F	; 127
    131e:	57 e4       	ldi	r21, 0x47	; 71
    1320:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1324:	18 16       	cp	r1, r24
    1326:	4c f5       	brge	.+82     	; 0x137a <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1328:	6b 85       	ldd	r22, Y+11	; 0x0b
    132a:	7c 85       	ldd	r23, Y+12	; 0x0c
    132c:	8d 85       	ldd	r24, Y+13	; 0x0d
    132e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e2       	ldi	r20, 0x20	; 32
    1336:	51 e4       	ldi	r21, 0x41	; 65
    1338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	bc 01       	movw	r22, r24
    1342:	cd 01       	movw	r24, r26
    1344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	9e 83       	std	Y+6, r25	; 0x06
    134e:	8d 83       	std	Y+5, r24	; 0x05
    1350:	0f c0       	rjmp	.+30     	; 0x1370 <KEYPAD_getPressedKey+0x198>
    1352:	88 ec       	ldi	r24, 0xC8	; 200
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	9c 83       	std	Y+4, r25	; 0x04
    1358:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	f1 f7       	brne	.-4      	; 0x135e <KEYPAD_getPressedKey+0x186>
    1362:	9c 83       	std	Y+4, r25	; 0x04
    1364:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	9e 83       	std	Y+6, r25	; 0x06
    136e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1370:	8d 81       	ldd	r24, Y+5	; 0x05
    1372:	9e 81       	ldd	r25, Y+6	; 0x06
    1374:	00 97       	sbiw	r24, 0x00	; 0
    1376:	69 f7       	brne	.-38     	; 0x1352 <KEYPAD_getPressedKey+0x17a>
    1378:	14 c0       	rjmp	.+40     	; 0x13a2 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    137a:	6f 81       	ldd	r22, Y+7	; 0x07
    137c:	78 85       	ldd	r23, Y+8	; 0x08
    137e:	89 85       	ldd	r24, Y+9	; 0x09
    1380:	9a 85       	ldd	r25, Y+10	; 0x0a
    1382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	9e 83       	std	Y+6, r25	; 0x06
    138c:	8d 83       	std	Y+5, r24	; 0x05
    138e:	8d 81       	ldd	r24, Y+5	; 0x05
    1390:	9e 81       	ldd	r25, Y+6	; 0x06
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	9a 81       	ldd	r25, Y+2	; 0x02
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	f1 f7       	brne	.-4      	; 0x139a <KEYPAD_getPressedKey+0x1c2>
    139e:	9a 83       	std	Y+2, r25	; 0x02
    13a0:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    13a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a4:	8f 5f       	subi	r24, 0xFF	; 255
    13a6:	8f 87       	std	Y+15, r24	; 0x0f
    13a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13aa:	84 30       	cpi	r24, 0x04	; 4
    13ac:	08 f4       	brcc	.+2      	; 0x13b0 <KEYPAD_getPressedKey+0x1d8>
    13ae:	48 cf       	rjmp	.-368    	; 0x1240 <KEYPAD_getPressedKey+0x68>
    13b0:	45 cf       	rjmp	.-374    	; 0x123c <KEYPAD_getPressedKey+0x64>

000013b2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <KEYPAD_4x4_adjustKeyNumber+0x8>
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    13c0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	28 2f       	mov	r18, r24
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	3c 83       	std	Y+4, r19	; 0x04
    13ca:	2b 83       	std	Y+3, r18	; 0x03
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	9c 81       	ldd	r25, Y+4	; 0x04
    13d0:	88 30       	cpi	r24, 0x08	; 8
    13d2:	91 05       	cpc	r25, r1
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    13d6:	70 c0       	rjmp	.+224    	; 0x14b8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    13d8:	2b 81       	ldd	r18, Y+3	; 0x03
    13da:	3c 81       	ldd	r19, Y+4	; 0x04
    13dc:	29 30       	cpi	r18, 0x09	; 9
    13de:	31 05       	cpc	r19, r1
    13e0:	5c f5       	brge	.+86     	; 0x1438 <KEYPAD_4x4_adjustKeyNumber+0x86>
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	84 30       	cpi	r24, 0x04	; 4
    13e8:	91 05       	cpc	r25, r1
    13ea:	09 f4       	brne	.+2      	; 0x13ee <KEYPAD_4x4_adjustKeyNumber+0x3c>
    13ec:	59 c0       	rjmp	.+178    	; 0x14a0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    13ee:	2b 81       	ldd	r18, Y+3	; 0x03
    13f0:	3c 81       	ldd	r19, Y+4	; 0x04
    13f2:	25 30       	cpi	r18, 0x05	; 5
    13f4:	31 05       	cpc	r19, r1
    13f6:	9c f4       	brge	.+38     	; 0x141e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	82 30       	cpi	r24, 0x02	; 2
    13fe:	91 05       	cpc	r25, r1
    1400:	09 f4       	brne	.+2      	; 0x1404 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1402:	48 c0       	rjmp	.+144    	; 0x1494 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1404:	2b 81       	ldd	r18, Y+3	; 0x03
    1406:	3c 81       	ldd	r19, Y+4	; 0x04
    1408:	23 30       	cpi	r18, 0x03	; 3
    140a:	31 05       	cpc	r19, r1
    140c:	0c f0       	brlt	.+2      	; 0x1410 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    140e:	45 c0       	rjmp	.+138    	; 0x149a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	91 05       	cpc	r25, r1
    1418:	09 f4       	brne	.+2      	; 0x141c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    141a:	39 c0       	rjmp	.+114    	; 0x148e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    141c:	67 c0       	rjmp	.+206    	; 0x14ec <KEYPAD_4x4_adjustKeyNumber+0x13a>
    141e:	2b 81       	ldd	r18, Y+3	; 0x03
    1420:	3c 81       	ldd	r19, Y+4	; 0x04
    1422:	26 30       	cpi	r18, 0x06	; 6
    1424:	31 05       	cpc	r19, r1
    1426:	09 f4       	brne	.+2      	; 0x142a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1428:	41 c0       	rjmp	.+130    	; 0x14ac <KEYPAD_4x4_adjustKeyNumber+0xfa>
    142a:	8b 81       	ldd	r24, Y+3	; 0x03
    142c:	9c 81       	ldd	r25, Y+4	; 0x04
    142e:	87 30       	cpi	r24, 0x07	; 7
    1430:	91 05       	cpc	r25, r1
    1432:	0c f0       	brlt	.+2      	; 0x1436 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1434:	3e c0       	rjmp	.+124    	; 0x14b2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1436:	37 c0       	rjmp	.+110    	; 0x14a6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1438:	2b 81       	ldd	r18, Y+3	; 0x03
    143a:	3c 81       	ldd	r19, Y+4	; 0x04
    143c:	2c 30       	cpi	r18, 0x0C	; 12
    143e:	31 05       	cpc	r19, r1
    1440:	09 f4       	brne	.+2      	; 0x1444 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1442:	46 c0       	rjmp	.+140    	; 0x14d0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	8d 30       	cpi	r24, 0x0D	; 13
    144a:	91 05       	cpc	r25, r1
    144c:	5c f4       	brge	.+22     	; 0x1464 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    144e:	2b 81       	ldd	r18, Y+3	; 0x03
    1450:	3c 81       	ldd	r19, Y+4	; 0x04
    1452:	2a 30       	cpi	r18, 0x0A	; 10
    1454:	31 05       	cpc	r19, r1
    1456:	b1 f1       	breq	.+108    	; 0x14c4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1458:	8b 81       	ldd	r24, Y+3	; 0x03
    145a:	9c 81       	ldd	r25, Y+4	; 0x04
    145c:	8b 30       	cpi	r24, 0x0B	; 11
    145e:	91 05       	cpc	r25, r1
    1460:	a4 f5       	brge	.+104    	; 0x14ca <KEYPAD_4x4_adjustKeyNumber+0x118>
    1462:	2d c0       	rjmp	.+90     	; 0x14be <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1464:	2b 81       	ldd	r18, Y+3	; 0x03
    1466:	3c 81       	ldd	r19, Y+4	; 0x04
    1468:	2e 30       	cpi	r18, 0x0E	; 14
    146a:	31 05       	cpc	r19, r1
    146c:	b9 f1       	breq	.+110    	; 0x14dc <KEYPAD_4x4_adjustKeyNumber+0x12a>
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	8e 30       	cpi	r24, 0x0E	; 14
    1474:	91 05       	cpc	r25, r1
    1476:	7c f1       	brlt	.+94     	; 0x14d6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1478:	2b 81       	ldd	r18, Y+3	; 0x03
    147a:	3c 81       	ldd	r19, Y+4	; 0x04
    147c:	2f 30       	cpi	r18, 0x0F	; 15
    147e:	31 05       	cpc	r19, r1
    1480:	79 f1       	breq	.+94     	; 0x14e0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	80 31       	cpi	r24, 0x10	; 16
    1488:	91 05       	cpc	r25, r1
    148a:	69 f1       	breq	.+90     	; 0x14e6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    148c:	2f c0       	rjmp	.+94     	; 0x14ec <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    148e:	87 e0       	ldi	r24, 0x07	; 7
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	2e c0       	rjmp	.+92     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1494:	88 e0       	ldi	r24, 0x08	; 8
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	2b c0       	rjmp	.+86     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    149a:	89 e0       	ldi	r24, 0x09	; 9
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	28 c0       	rjmp	.+80     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    14a0:	85 e2       	ldi	r24, 0x25	; 37
    14a2:	89 83       	std	Y+1, r24	; 0x01
    14a4:	25 c0       	rjmp	.+74     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    14a6:	84 e0       	ldi	r24, 0x04	; 4
    14a8:	89 83       	std	Y+1, r24	; 0x01
    14aa:	22 c0       	rjmp	.+68     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    14ac:	85 e0       	ldi	r24, 0x05	; 5
    14ae:	89 83       	std	Y+1, r24	; 0x01
    14b0:	1f c0       	rjmp	.+62     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    14b2:	86 e0       	ldi	r24, 0x06	; 6
    14b4:	89 83       	std	Y+1, r24	; 0x01
    14b6:	1c c0       	rjmp	.+56     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    14b8:	8a e2       	ldi	r24, 0x2A	; 42
    14ba:	89 83       	std	Y+1, r24	; 0x01
    14bc:	19 c0       	rjmp	.+50     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	89 83       	std	Y+1, r24	; 0x01
    14c2:	16 c0       	rjmp	.+44     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    14c4:	82 e0       	ldi	r24, 0x02	; 2
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	13 c0       	rjmp	.+38     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    14ca:	83 e0       	ldi	r24, 0x03	; 3
    14cc:	89 83       	std	Y+1, r24	; 0x01
    14ce:	10 c0       	rjmp	.+32     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    14d0:	8d e2       	ldi	r24, 0x2D	; 45
    14d2:	89 83       	std	Y+1, r24	; 0x01
    14d4:	0d c0       	rjmp	.+26     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    14d6:	8d e0       	ldi	r24, 0x0D	; 13
    14d8:	89 83       	std	Y+1, r24	; 0x01
    14da:	0a c0       	rjmp	.+20     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    14dc:	19 82       	std	Y+1, r1	; 0x01
    14de:	08 c0       	rjmp	.+16     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    14e0:	8d e3       	ldi	r24, 0x3D	; 61
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	05 c0       	rjmp	.+10     	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    14e6:	8b e2       	ldi	r24, 0x2B	; 43
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	02 c0       	rjmp	.+4      	; 0x14f0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    14f2:	0f 90       	pop	r0
    14f4:	0f 90       	pop	r0
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	cf 91       	pop	r28
    14fc:	df 91       	pop	r29
    14fe:	08 95       	ret

00001500 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1500:	df 93       	push	r29
    1502:	cf 93       	push	r28
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
    1508:	2e 97       	sbiw	r28, 0x0e	; 14
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	61 e0       	ldi	r22, 0x01	; 1
    1518:	41 e0       	ldi	r20, 0x01	; 1
    151a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	62 e0       	ldi	r22, 0x02	; 2
    1522:	41 e0       	ldi	r20, 0x01	; 1
    1524:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a0 ea       	ldi	r26, 0xA0	; 160
    152e:	b1 e4       	ldi	r27, 0x41	; 65
    1530:	8b 87       	std	Y+11, r24	; 0x0b
    1532:	9c 87       	std	Y+12, r25	; 0x0c
    1534:	ad 87       	std	Y+13, r26	; 0x0d
    1536:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1538:	6b 85       	ldd	r22, Y+11	; 0x0b
    153a:	7c 85       	ldd	r23, Y+12	; 0x0c
    153c:	8d 85       	ldd	r24, Y+13	; 0x0d
    153e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	4a ef       	ldi	r20, 0xFA	; 250
    1546:	54 e4       	ldi	r21, 0x44	; 68
    1548:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154c:	dc 01       	movw	r26, r24
    154e:	cb 01       	movw	r24, r22
    1550:	8f 83       	std	Y+7, r24	; 0x07
    1552:	98 87       	std	Y+8, r25	; 0x08
    1554:	a9 87       	std	Y+9, r26	; 0x09
    1556:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1558:	6f 81       	ldd	r22, Y+7	; 0x07
    155a:	78 85       	ldd	r23, Y+8	; 0x08
    155c:	89 85       	ldd	r24, Y+9	; 0x09
    155e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	40 e8       	ldi	r20, 0x80	; 128
    1566:	5f e3       	ldi	r21, 0x3F	; 63
    1568:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156c:	88 23       	and	r24, r24
    156e:	2c f4       	brge	.+10     	; 0x157a <LCD_init+0x7a>
		__ticks = 1;
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	3f c0       	rjmp	.+126    	; 0x15f8 <LCD_init+0xf8>
	else if (__tmp > 65535)
    157a:	6f 81       	ldd	r22, Y+7	; 0x07
    157c:	78 85       	ldd	r23, Y+8	; 0x08
    157e:	89 85       	ldd	r24, Y+9	; 0x09
    1580:	9a 85       	ldd	r25, Y+10	; 0x0a
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	3f ef       	ldi	r19, 0xFF	; 255
    1586:	4f e7       	ldi	r20, 0x7F	; 127
    1588:	57 e4       	ldi	r21, 0x47	; 71
    158a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    158e:	18 16       	cp	r1, r24
    1590:	4c f5       	brge	.+82     	; 0x15e4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1592:	6b 85       	ldd	r22, Y+11	; 0x0b
    1594:	7c 85       	ldd	r23, Y+12	; 0x0c
    1596:	8d 85       	ldd	r24, Y+13	; 0x0d
    1598:	9e 85       	ldd	r25, Y+14	; 0x0e
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e2       	ldi	r20, 0x20	; 32
    15a0:	51 e4       	ldi	r21, 0x41	; 65
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	bc 01       	movw	r22, r24
    15ac:	cd 01       	movw	r24, r26
    15ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b2:	dc 01       	movw	r26, r24
    15b4:	cb 01       	movw	r24, r22
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	0f c0       	rjmp	.+30     	; 0x15da <LCD_init+0xda>
    15bc:	88 ec       	ldi	r24, 0xC8	; 200
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	9c 83       	std	Y+4, r25	; 0x04
    15c2:	8b 83       	std	Y+3, r24	; 0x03
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	9c 81       	ldd	r25, Y+4	; 0x04
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	f1 f7       	brne	.-4      	; 0x15c8 <LCD_init+0xc8>
    15cc:	9c 83       	std	Y+4, r25	; 0x04
    15ce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d0:	8d 81       	ldd	r24, Y+5	; 0x05
    15d2:	9e 81       	ldd	r25, Y+6	; 0x06
    15d4:	01 97       	sbiw	r24, 0x01	; 1
    15d6:	9e 83       	std	Y+6, r25	; 0x06
    15d8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15da:	8d 81       	ldd	r24, Y+5	; 0x05
    15dc:	9e 81       	ldd	r25, Y+6	; 0x06
    15de:	00 97       	sbiw	r24, 0x00	; 0
    15e0:	69 f7       	brne	.-38     	; 0x15bc <LCD_init+0xbc>
    15e2:	14 c0       	rjmp	.+40     	; 0x160c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e4:	6f 81       	ldd	r22, Y+7	; 0x07
    15e6:	78 85       	ldd	r23, Y+8	; 0x08
    15e8:	89 85       	ldd	r24, Y+9	; 0x09
    15ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	9e 83       	std	Y+6, r25	; 0x06
    15f6:	8d 83       	std	Y+5, r24	; 0x05
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	9e 81       	ldd	r25, Y+6	; 0x06
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	9a 81       	ldd	r25, Y+2	; 0x02
    1604:	01 97       	sbiw	r24, 0x01	; 1
    1606:	f1 f7       	brne	.-4      	; 0x1604 <LCD_init+0x104>
    1608:	9a 83       	std	Y+2, r25	; 0x02
    160a:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    160c:	80 e0       	ldi	r24, 0x00	; 0
    160e:	63 e0       	ldi	r22, 0x03	; 3
    1610:	41 e0       	ldi	r20, 0x01	; 1
    1612:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	64 e0       	ldi	r22, 0x04	; 4
    161a:	41 e0       	ldi	r20, 0x01	; 1
    161c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	65 e0       	ldi	r22, 0x05	; 5
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	66 e0       	ldi	r22, 0x06	; 6
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1634:	83 e3       	ldi	r24, 0x33	; 51
    1636:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    163a:	82 e3       	ldi	r24, 0x32	; 50
    163c:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1640:	88 e2       	ldi	r24, 0x28	; 40
    1642:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1646:	8c e0       	ldi	r24, 0x0C	; 12
    1648:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>
}
    1652:	2e 96       	adiw	r28, 0x0e	; 14
    1654:	0f b6       	in	r0, 0x3f	; 63
    1656:	f8 94       	cli
    1658:	de bf       	out	0x3e, r29	; 62
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	cd bf       	out	0x3d, r28	; 61
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1664:	0f 93       	push	r16
    1666:	1f 93       	push	r17
    1668:	df 93       	push	r29
    166a:	cf 93       	push	r28
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	c3 56       	subi	r28, 0x63	; 99
    1672:	d0 40       	sbci	r29, 0x00	; 0
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	fe 01       	movw	r30, r28
    1680:	ed 59       	subi	r30, 0x9D	; 157
    1682:	ff 4f       	sbci	r31, 0xFF	; 255
    1684:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	61 e0       	ldi	r22, 0x01	; 1
    168a:	40 e0       	ldi	r20, 0x00	; 0
    168c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1690:	fe 01       	movw	r30, r28
    1692:	e1 5a       	subi	r30, 0xA1	; 161
    1694:	ff 4f       	sbci	r31, 0xFF	; 255
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	a0 e8       	ldi	r26, 0x80	; 128
    169c:	bf e3       	ldi	r27, 0x3F	; 63
    169e:	80 83       	st	Z, r24
    16a0:	91 83       	std	Z+1, r25	; 0x01
    16a2:	a2 83       	std	Z+2, r26	; 0x02
    16a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16a6:	8e 01       	movw	r16, r28
    16a8:	05 5a       	subi	r16, 0xA5	; 165
    16aa:	1f 4f       	sbci	r17, 0xFF	; 255
    16ac:	fe 01       	movw	r30, r28
    16ae:	e1 5a       	subi	r30, 0xA1	; 161
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	4a ef       	ldi	r20, 0xFA	; 250
    16c0:	54 e4       	ldi	r21, 0x44	; 68
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	f8 01       	movw	r30, r16
    16cc:	80 83       	st	Z, r24
    16ce:	91 83       	std	Z+1, r25	; 0x01
    16d0:	a2 83       	std	Z+2, r26	; 0x02
    16d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    16d4:	fe 01       	movw	r30, r28
    16d6:	e5 5a       	subi	r30, 0xA5	; 165
    16d8:	ff 4f       	sbci	r31, 0xFF	; 255
    16da:	60 81       	ld	r22, Z
    16dc:	71 81       	ldd	r23, Z+1	; 0x01
    16de:	82 81       	ldd	r24, Z+2	; 0x02
    16e0:	93 81       	ldd	r25, Z+3	; 0x03
    16e2:	20 e0       	ldi	r18, 0x00	; 0
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	40 e8       	ldi	r20, 0x80	; 128
    16e8:	5f e3       	ldi	r21, 0x3F	; 63
    16ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ee:	88 23       	and	r24, r24
    16f0:	44 f4       	brge	.+16     	; 0x1702 <LCD_sendCommand+0x9e>
		__ticks = 1;
    16f2:	fe 01       	movw	r30, r28
    16f4:	e7 5a       	subi	r30, 0xA7	; 167
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	80 83       	st	Z, r24
    1700:	64 c0       	rjmp	.+200    	; 0x17ca <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1702:	fe 01       	movw	r30, r28
    1704:	e5 5a       	subi	r30, 0xA5	; 165
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	3f ef       	ldi	r19, 0xFF	; 255
    1714:	4f e7       	ldi	r20, 0x7F	; 127
    1716:	57 e4       	ldi	r21, 0x47	; 71
    1718:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    171c:	18 16       	cp	r1, r24
    171e:	0c f0       	brlt	.+2      	; 0x1722 <LCD_sendCommand+0xbe>
    1720:	43 c0       	rjmp	.+134    	; 0x17a8 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1722:	fe 01       	movw	r30, r28
    1724:	e1 5a       	subi	r30, 0xA1	; 161
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	60 81       	ld	r22, Z
    172a:	71 81       	ldd	r23, Z+1	; 0x01
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e2       	ldi	r20, 0x20	; 32
    1736:	51 e4       	ldi	r21, 0x41	; 65
    1738:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    173c:	dc 01       	movw	r26, r24
    173e:	cb 01       	movw	r24, r22
    1740:	8e 01       	movw	r16, r28
    1742:	07 5a       	subi	r16, 0xA7	; 167
    1744:	1f 4f       	sbci	r17, 0xFF	; 255
    1746:	bc 01       	movw	r22, r24
    1748:	cd 01       	movw	r24, r26
    174a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    174e:	dc 01       	movw	r26, r24
    1750:	cb 01       	movw	r24, r22
    1752:	f8 01       	movw	r30, r16
    1754:	91 83       	std	Z+1, r25	; 0x01
    1756:	80 83       	st	Z, r24
    1758:	1f c0       	rjmp	.+62     	; 0x1798 <LCD_sendCommand+0x134>
    175a:	fe 01       	movw	r30, r28
    175c:	e9 5a       	subi	r30, 0xA9	; 169
    175e:	ff 4f       	sbci	r31, 0xFF	; 255
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	80 83       	st	Z, r24
    1768:	fe 01       	movw	r30, r28
    176a:	e9 5a       	subi	r30, 0xA9	; 169
    176c:	ff 4f       	sbci	r31, 0xFF	; 255
    176e:	80 81       	ld	r24, Z
    1770:	91 81       	ldd	r25, Z+1	; 0x01
    1772:	01 97       	sbiw	r24, 0x01	; 1
    1774:	f1 f7       	brne	.-4      	; 0x1772 <LCD_sendCommand+0x10e>
    1776:	fe 01       	movw	r30, r28
    1778:	e9 5a       	subi	r30, 0xA9	; 169
    177a:	ff 4f       	sbci	r31, 0xFF	; 255
    177c:	91 83       	std	Z+1, r25	; 0x01
    177e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1780:	de 01       	movw	r26, r28
    1782:	a7 5a       	subi	r26, 0xA7	; 167
    1784:	bf 4f       	sbci	r27, 0xFF	; 255
    1786:	fe 01       	movw	r30, r28
    1788:	e7 5a       	subi	r30, 0xA7	; 167
    178a:	ff 4f       	sbci	r31, 0xFF	; 255
    178c:	80 81       	ld	r24, Z
    178e:	91 81       	ldd	r25, Z+1	; 0x01
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	11 96       	adiw	r26, 0x01	; 1
    1794:	9c 93       	st	X, r25
    1796:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1798:	fe 01       	movw	r30, r28
    179a:	e7 5a       	subi	r30, 0xA7	; 167
    179c:	ff 4f       	sbci	r31, 0xFF	; 255
    179e:	80 81       	ld	r24, Z
    17a0:	91 81       	ldd	r25, Z+1	; 0x01
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	d1 f6       	brne	.-76     	; 0x175a <LCD_sendCommand+0xf6>
    17a6:	27 c0       	rjmp	.+78     	; 0x17f6 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a8:	8e 01       	movw	r16, r28
    17aa:	07 5a       	subi	r16, 0xA7	; 167
    17ac:	1f 4f       	sbci	r17, 0xFF	; 255
    17ae:	fe 01       	movw	r30, r28
    17b0:	e5 5a       	subi	r30, 0xA5	; 165
    17b2:	ff 4f       	sbci	r31, 0xFF	; 255
    17b4:	60 81       	ld	r22, Z
    17b6:	71 81       	ldd	r23, Z+1	; 0x01
    17b8:	82 81       	ldd	r24, Z+2	; 0x02
    17ba:	93 81       	ldd	r25, Z+3	; 0x03
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	f8 01       	movw	r30, r16
    17c6:	91 83       	std	Z+1, r25	; 0x01
    17c8:	80 83       	st	Z, r24
    17ca:	de 01       	movw	r26, r28
    17cc:	ab 5a       	subi	r26, 0xAB	; 171
    17ce:	bf 4f       	sbci	r27, 0xFF	; 255
    17d0:	fe 01       	movw	r30, r28
    17d2:	e7 5a       	subi	r30, 0xA7	; 167
    17d4:	ff 4f       	sbci	r31, 0xFF	; 255
    17d6:	80 81       	ld	r24, Z
    17d8:	91 81       	ldd	r25, Z+1	; 0x01
    17da:	8d 93       	st	X+, r24
    17dc:	9c 93       	st	X, r25
    17de:	fe 01       	movw	r30, r28
    17e0:	eb 5a       	subi	r30, 0xAB	; 171
    17e2:	ff 4f       	sbci	r31, 0xFF	; 255
    17e4:	80 81       	ld	r24, Z
    17e6:	91 81       	ldd	r25, Z+1	; 0x01
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <LCD_sendCommand+0x184>
    17ec:	fe 01       	movw	r30, r28
    17ee:	eb 5a       	subi	r30, 0xAB	; 171
    17f0:	ff 4f       	sbci	r31, 0xFF	; 255
    17f2:	91 83       	std	Z+1, r25	; 0x01
    17f4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    17f6:	80 e0       	ldi	r24, 0x00	; 0
    17f8:	62 e0       	ldi	r22, 0x02	; 2
    17fa:	41 e0       	ldi	r20, 0x01	; 1
    17fc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1800:	fe 01       	movw	r30, r28
    1802:	ef 5a       	subi	r30, 0xAF	; 175
    1804:	ff 4f       	sbci	r31, 0xFF	; 255
    1806:	80 e0       	ldi	r24, 0x00	; 0
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e8       	ldi	r26, 0x80	; 128
    180c:	bf e3       	ldi	r27, 0x3F	; 63
    180e:	80 83       	st	Z, r24
    1810:	91 83       	std	Z+1, r25	; 0x01
    1812:	a2 83       	std	Z+2, r26	; 0x02
    1814:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1816:	8e 01       	movw	r16, r28
    1818:	03 5b       	subi	r16, 0xB3	; 179
    181a:	1f 4f       	sbci	r17, 0xFF	; 255
    181c:	fe 01       	movw	r30, r28
    181e:	ef 5a       	subi	r30, 0xAF	; 175
    1820:	ff 4f       	sbci	r31, 0xFF	; 255
    1822:	60 81       	ld	r22, Z
    1824:	71 81       	ldd	r23, Z+1	; 0x01
    1826:	82 81       	ldd	r24, Z+2	; 0x02
    1828:	93 81       	ldd	r25, Z+3	; 0x03
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	4a ef       	ldi	r20, 0xFA	; 250
    1830:	54 e4       	ldi	r21, 0x44	; 68
    1832:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1836:	dc 01       	movw	r26, r24
    1838:	cb 01       	movw	r24, r22
    183a:	f8 01       	movw	r30, r16
    183c:	80 83       	st	Z, r24
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	a2 83       	std	Z+2, r26	; 0x02
    1842:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1844:	fe 01       	movw	r30, r28
    1846:	e3 5b       	subi	r30, 0xB3	; 179
    1848:	ff 4f       	sbci	r31, 0xFF	; 255
    184a:	60 81       	ld	r22, Z
    184c:	71 81       	ldd	r23, Z+1	; 0x01
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	93 81       	ldd	r25, Z+3	; 0x03
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e8       	ldi	r20, 0x80	; 128
    1858:	5f e3       	ldi	r21, 0x3F	; 63
    185a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    185e:	88 23       	and	r24, r24
    1860:	44 f4       	brge	.+16     	; 0x1872 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1862:	fe 01       	movw	r30, r28
    1864:	e5 5b       	subi	r30, 0xB5	; 181
    1866:	ff 4f       	sbci	r31, 0xFF	; 255
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
    1870:	64 c0       	rjmp	.+200    	; 0x193a <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1872:	fe 01       	movw	r30, r28
    1874:	e3 5b       	subi	r30, 0xB3	; 179
    1876:	ff 4f       	sbci	r31, 0xFF	; 255
    1878:	60 81       	ld	r22, Z
    187a:	71 81       	ldd	r23, Z+1	; 0x01
    187c:	82 81       	ldd	r24, Z+2	; 0x02
    187e:	93 81       	ldd	r25, Z+3	; 0x03
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	3f ef       	ldi	r19, 0xFF	; 255
    1884:	4f e7       	ldi	r20, 0x7F	; 127
    1886:	57 e4       	ldi	r21, 0x47	; 71
    1888:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    188c:	18 16       	cp	r1, r24
    188e:	0c f0       	brlt	.+2      	; 0x1892 <LCD_sendCommand+0x22e>
    1890:	43 c0       	rjmp	.+134    	; 0x1918 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1892:	fe 01       	movw	r30, r28
    1894:	ef 5a       	subi	r30, 0xAF	; 175
    1896:	ff 4f       	sbci	r31, 0xFF	; 255
    1898:	60 81       	ld	r22, Z
    189a:	71 81       	ldd	r23, Z+1	; 0x01
    189c:	82 81       	ldd	r24, Z+2	; 0x02
    189e:	93 81       	ldd	r25, Z+3	; 0x03
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e2       	ldi	r20, 0x20	; 32
    18a6:	51 e4       	ldi	r21, 0x41	; 65
    18a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ac:	dc 01       	movw	r26, r24
    18ae:	cb 01       	movw	r24, r22
    18b0:	8e 01       	movw	r16, r28
    18b2:	05 5b       	subi	r16, 0xB5	; 181
    18b4:	1f 4f       	sbci	r17, 0xFF	; 255
    18b6:	bc 01       	movw	r22, r24
    18b8:	cd 01       	movw	r24, r26
    18ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	f8 01       	movw	r30, r16
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
    18c8:	1f c0       	rjmp	.+62     	; 0x1908 <LCD_sendCommand+0x2a4>
    18ca:	fe 01       	movw	r30, r28
    18cc:	e7 5b       	subi	r30, 0xB7	; 183
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	88 ec       	ldi	r24, 0xC8	; 200
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	91 83       	std	Z+1, r25	; 0x01
    18d6:	80 83       	st	Z, r24
    18d8:	fe 01       	movw	r30, r28
    18da:	e7 5b       	subi	r30, 0xB7	; 183
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	80 81       	ld	r24, Z
    18e0:	91 81       	ldd	r25, Z+1	; 0x01
    18e2:	01 97       	sbiw	r24, 0x01	; 1
    18e4:	f1 f7       	brne	.-4      	; 0x18e2 <LCD_sendCommand+0x27e>
    18e6:	fe 01       	movw	r30, r28
    18e8:	e7 5b       	subi	r30, 0xB7	; 183
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	91 83       	std	Z+1, r25	; 0x01
    18ee:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f0:	de 01       	movw	r26, r28
    18f2:	a5 5b       	subi	r26, 0xB5	; 181
    18f4:	bf 4f       	sbci	r27, 0xFF	; 255
    18f6:	fe 01       	movw	r30, r28
    18f8:	e5 5b       	subi	r30, 0xB5	; 181
    18fa:	ff 4f       	sbci	r31, 0xFF	; 255
    18fc:	80 81       	ld	r24, Z
    18fe:	91 81       	ldd	r25, Z+1	; 0x01
    1900:	01 97       	sbiw	r24, 0x01	; 1
    1902:	11 96       	adiw	r26, 0x01	; 1
    1904:	9c 93       	st	X, r25
    1906:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1908:	fe 01       	movw	r30, r28
    190a:	e5 5b       	subi	r30, 0xB5	; 181
    190c:	ff 4f       	sbci	r31, 0xFF	; 255
    190e:	80 81       	ld	r24, Z
    1910:	91 81       	ldd	r25, Z+1	; 0x01
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	d1 f6       	brne	.-76     	; 0x18ca <LCD_sendCommand+0x266>
    1916:	27 c0       	rjmp	.+78     	; 0x1966 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1918:	8e 01       	movw	r16, r28
    191a:	05 5b       	subi	r16, 0xB5	; 181
    191c:	1f 4f       	sbci	r17, 0xFF	; 255
    191e:	fe 01       	movw	r30, r28
    1920:	e3 5b       	subi	r30, 0xB3	; 179
    1922:	ff 4f       	sbci	r31, 0xFF	; 255
    1924:	60 81       	ld	r22, Z
    1926:	71 81       	ldd	r23, Z+1	; 0x01
    1928:	82 81       	ldd	r24, Z+2	; 0x02
    192a:	93 81       	ldd	r25, Z+3	; 0x03
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	f8 01       	movw	r30, r16
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
    193a:	de 01       	movw	r26, r28
    193c:	a9 5b       	subi	r26, 0xB9	; 185
    193e:	bf 4f       	sbci	r27, 0xFF	; 255
    1940:	fe 01       	movw	r30, r28
    1942:	e5 5b       	subi	r30, 0xB5	; 181
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	91 81       	ldd	r25, Z+1	; 0x01
    194a:	8d 93       	st	X+, r24
    194c:	9c 93       	st	X, r25
    194e:	fe 01       	movw	r30, r28
    1950:	e9 5b       	subi	r30, 0xB9	; 185
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	01 97       	sbiw	r24, 0x01	; 1
    195a:	f1 f7       	brne	.-4      	; 0x1958 <LCD_sendCommand+0x2f4>
    195c:	fe 01       	movw	r30, r28
    195e:	e9 5b       	subi	r30, 0xB9	; 185
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	91 83       	std	Z+1, r25	; 0x01
    1964:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1966:	fe 01       	movw	r30, r28
    1968:	ed 59       	subi	r30, 0x9D	; 157
    196a:	ff 4f       	sbci	r31, 0xFF	; 255
    196c:	80 81       	ld	r24, Z
    196e:	88 2f       	mov	r24, r24
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	80 71       	andi	r24, 0x10	; 16
    1974:	90 70       	andi	r25, 0x00	; 0
    1976:	95 95       	asr	r25
    1978:	87 95       	ror	r24
    197a:	95 95       	asr	r25
    197c:	87 95       	ror	r24
    197e:	95 95       	asr	r25
    1980:	87 95       	ror	r24
    1982:	95 95       	asr	r25
    1984:	87 95       	ror	r24
    1986:	98 2f       	mov	r25, r24
    1988:	80 e0       	ldi	r24, 0x00	; 0
    198a:	63 e0       	ldi	r22, 0x03	; 3
    198c:	49 2f       	mov	r20, r25
    198e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1992:	fe 01       	movw	r30, r28
    1994:	ed 59       	subi	r30, 0x9D	; 157
    1996:	ff 4f       	sbci	r31, 0xFF	; 255
    1998:	80 81       	ld	r24, Z
    199a:	88 2f       	mov	r24, r24
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	80 72       	andi	r24, 0x20	; 32
    19a0:	90 70       	andi	r25, 0x00	; 0
    19a2:	95 95       	asr	r25
    19a4:	87 95       	ror	r24
    19a6:	95 95       	asr	r25
    19a8:	87 95       	ror	r24
    19aa:	95 95       	asr	r25
    19ac:	87 95       	ror	r24
    19ae:	95 95       	asr	r25
    19b0:	87 95       	ror	r24
    19b2:	95 95       	asr	r25
    19b4:	87 95       	ror	r24
    19b6:	98 2f       	mov	r25, r24
    19b8:	80 e0       	ldi	r24, 0x00	; 0
    19ba:	64 e0       	ldi	r22, 0x04	; 4
    19bc:	49 2f       	mov	r20, r25
    19be:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    19c2:	fe 01       	movw	r30, r28
    19c4:	ed 59       	subi	r30, 0x9D	; 157
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	80 81       	ld	r24, Z
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	80 74       	andi	r24, 0x40	; 64
    19d0:	90 70       	andi	r25, 0x00	; 0
    19d2:	08 2e       	mov	r0, r24
    19d4:	89 2f       	mov	r24, r25
    19d6:	00 0c       	add	r0, r0
    19d8:	88 1f       	adc	r24, r24
    19da:	99 0b       	sbc	r25, r25
    19dc:	00 0c       	add	r0, r0
    19de:	88 1f       	adc	r24, r24
    19e0:	99 1f       	adc	r25, r25
    19e2:	98 2f       	mov	r25, r24
    19e4:	80 e0       	ldi	r24, 0x00	; 0
    19e6:	65 e0       	ldi	r22, 0x05	; 5
    19e8:	49 2f       	mov	r20, r25
    19ea:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    19ee:	fe 01       	movw	r30, r28
    19f0:	ed 59       	subi	r30, 0x9D	; 157
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	80 81       	ld	r24, Z
    19f6:	98 2f       	mov	r25, r24
    19f8:	99 1f       	adc	r25, r25
    19fa:	99 27       	eor	r25, r25
    19fc:	99 1f       	adc	r25, r25
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	66 e0       	ldi	r22, 0x06	; 6
    1a02:	49 2f       	mov	r20, r25
    1a04:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1a08:	fe 01       	movw	r30, r28
    1a0a:	ed 5b       	subi	r30, 0xBD	; 189
    1a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e8       	ldi	r26, 0x80	; 128
    1a14:	bf e3       	ldi	r27, 0x3F	; 63
    1a16:	80 83       	st	Z, r24
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	a2 83       	std	Z+2, r26	; 0x02
    1a1c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a1e:	8e 01       	movw	r16, r28
    1a20:	01 5c       	subi	r16, 0xC1	; 193
    1a22:	1f 4f       	sbci	r17, 0xFF	; 255
    1a24:	fe 01       	movw	r30, r28
    1a26:	ed 5b       	subi	r30, 0xBD	; 189
    1a28:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2a:	60 81       	ld	r22, Z
    1a2c:	71 81       	ldd	r23, Z+1	; 0x01
    1a2e:	82 81       	ldd	r24, Z+2	; 0x02
    1a30:	93 81       	ldd	r25, Z+3	; 0x03
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	30 e0       	ldi	r19, 0x00	; 0
    1a36:	4a ef       	ldi	r20, 0xFA	; 250
    1a38:	54 e4       	ldi	r21, 0x44	; 68
    1a3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	f8 01       	movw	r30, r16
    1a44:	80 83       	st	Z, r24
    1a46:	91 83       	std	Z+1, r25	; 0x01
    1a48:	a2 83       	std	Z+2, r26	; 0x02
    1a4a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	ff 96       	adiw	r30, 0x3f	; 63
    1a50:	60 81       	ld	r22, Z
    1a52:	71 81       	ldd	r23, Z+1	; 0x01
    1a54:	82 81       	ldd	r24, Z+2	; 0x02
    1a56:	93 81       	ldd	r25, Z+3	; 0x03
    1a58:	20 e0       	ldi	r18, 0x00	; 0
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	40 e8       	ldi	r20, 0x80	; 128
    1a5e:	5f e3       	ldi	r21, 0x3F	; 63
    1a60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a64:	88 23       	and	r24, r24
    1a66:	2c f4       	brge	.+10     	; 0x1a72 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	9e af       	std	Y+62, r25	; 0x3e
    1a6e:	8d af       	std	Y+61, r24	; 0x3d
    1a70:	46 c0       	rjmp	.+140    	; 0x1afe <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1a72:	fe 01       	movw	r30, r28
    1a74:	ff 96       	adiw	r30, 0x3f	; 63
    1a76:	60 81       	ld	r22, Z
    1a78:	71 81       	ldd	r23, Z+1	; 0x01
    1a7a:	82 81       	ldd	r24, Z+2	; 0x02
    1a7c:	93 81       	ldd	r25, Z+3	; 0x03
    1a7e:	20 e0       	ldi	r18, 0x00	; 0
    1a80:	3f ef       	ldi	r19, 0xFF	; 255
    1a82:	4f e7       	ldi	r20, 0x7F	; 127
    1a84:	57 e4       	ldi	r21, 0x47	; 71
    1a86:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a8a:	18 16       	cp	r1, r24
    1a8c:	64 f5       	brge	.+88     	; 0x1ae6 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8e:	fe 01       	movw	r30, r28
    1a90:	ed 5b       	subi	r30, 0xBD	; 189
    1a92:	ff 4f       	sbci	r31, 0xFF	; 255
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e2       	ldi	r20, 0x20	; 32
    1aa2:	51 e4       	ldi	r21, 0x41	; 65
    1aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	cb 01       	movw	r24, r22
    1aac:	bc 01       	movw	r22, r24
    1aae:	cd 01       	movw	r24, r26
    1ab0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	9e af       	std	Y+62, r25	; 0x3e
    1aba:	8d af       	std	Y+61, r24	; 0x3d
    1abc:	0f c0       	rjmp	.+30     	; 0x1adc <LCD_sendCommand+0x478>
    1abe:	88 ec       	ldi	r24, 0xC8	; 200
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9c af       	std	Y+60, r25	; 0x3c
    1ac4:	8b af       	std	Y+59, r24	; 0x3b
    1ac6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ac8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1aca:	01 97       	sbiw	r24, 0x01	; 1
    1acc:	f1 f7       	brne	.-4      	; 0x1aca <LCD_sendCommand+0x466>
    1ace:	9c af       	std	Y+60, r25	; 0x3c
    1ad0:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ad2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ad4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	9e af       	std	Y+62, r25	; 0x3e
    1ada:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1adc:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ade:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	69 f7       	brne	.-38     	; 0x1abe <LCD_sendCommand+0x45a>
    1ae4:	16 c0       	rjmp	.+44     	; 0x1b12 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ae6:	fe 01       	movw	r30, r28
    1ae8:	ff 96       	adiw	r30, 0x3f	; 63
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af6:	dc 01       	movw	r26, r24
    1af8:	cb 01       	movw	r24, r22
    1afa:	9e af       	std	Y+62, r25	; 0x3e
    1afc:	8d af       	std	Y+61, r24	; 0x3d
    1afe:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b00:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b02:	9a af       	std	Y+58, r25	; 0x3a
    1b04:	89 af       	std	Y+57, r24	; 0x39
    1b06:	89 ad       	ldd	r24, Y+57	; 0x39
    1b08:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <LCD_sendCommand+0x4a6>
    1b0e:	9a af       	std	Y+58, r25	; 0x3a
    1b10:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	62 e0       	ldi	r22, 0x02	; 2
    1b16:	40 e0       	ldi	r20, 0x00	; 0
    1b18:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a0 e8       	ldi	r26, 0x80	; 128
    1b22:	bf e3       	ldi	r27, 0x3F	; 63
    1b24:	8d ab       	std	Y+53, r24	; 0x35
    1b26:	9e ab       	std	Y+54, r25	; 0x36
    1b28:	af ab       	std	Y+55, r26	; 0x37
    1b2a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2c:	6d a9       	ldd	r22, Y+53	; 0x35
    1b2e:	7e a9       	ldd	r23, Y+54	; 0x36
    1b30:	8f a9       	ldd	r24, Y+55	; 0x37
    1b32:	98 ad       	ldd	r25, Y+56	; 0x38
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a ef       	ldi	r20, 0xFA	; 250
    1b3a:	54 e4       	ldi	r21, 0x44	; 68
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	89 ab       	std	Y+49, r24	; 0x31
    1b46:	9a ab       	std	Y+50, r25	; 0x32
    1b48:	ab ab       	std	Y+51, r26	; 0x33
    1b4a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b4c:	69 a9       	ldd	r22, Y+49	; 0x31
    1b4e:	7a a9       	ldd	r23, Y+50	; 0x32
    1b50:	8b a9       	ldd	r24, Y+51	; 0x33
    1b52:	9c a9       	ldd	r25, Y+52	; 0x34
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <LCD_sendCommand+0x50a>
		__ticks = 1;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	98 ab       	std	Y+48, r25	; 0x30
    1b6a:	8f a7       	std	Y+47, r24	; 0x2f
    1b6c:	3f c0       	rjmp	.+126    	; 0x1bec <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1b6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1b70:	7a a9       	ldd	r23, Y+50	; 0x32
    1b72:	8b a9       	ldd	r24, Y+51	; 0x33
    1b74:	9c a9       	ldd	r25, Y+52	; 0x34
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	3f ef       	ldi	r19, 0xFF	; 255
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	57 e4       	ldi	r21, 0x47	; 71
    1b7e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	4c f5       	brge	.+82     	; 0x1bd8 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	6d a9       	ldd	r22, Y+53	; 0x35
    1b88:	7e a9       	ldd	r23, Y+54	; 0x36
    1b8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1b8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e2       	ldi	r20, 0x20	; 32
    1b94:	51 e4       	ldi	r21, 0x41	; 65
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	98 ab       	std	Y+48, r25	; 0x30
    1bac:	8f a7       	std	Y+47, r24	; 0x2f
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <LCD_sendCommand+0x56a>
    1bb0:	88 ec       	ldi	r24, 0xC8	; 200
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9e a7       	std	Y+46, r25	; 0x2e
    1bb6:	8d a7       	std	Y+45, r24	; 0x2d
    1bb8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1bba:	9e a5       	ldd	r25, Y+46	; 0x2e
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <LCD_sendCommand+0x558>
    1bc0:	9e a7       	std	Y+46, r25	; 0x2e
    1bc2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc6:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	98 ab       	std	Y+48, r25	; 0x30
    1bcc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bce:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bd0:	98 a9       	ldd	r25, Y+48	; 0x30
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	69 f7       	brne	.-38     	; 0x1bb0 <LCD_sendCommand+0x54c>
    1bd6:	14 c0       	rjmp	.+40     	; 0x1c00 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bda:	7a a9       	ldd	r23, Y+50	; 0x32
    1bdc:	8b a9       	ldd	r24, Y+51	; 0x33
    1bde:	9c a9       	ldd	r25, Y+52	; 0x34
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	98 ab       	std	Y+48, r25	; 0x30
    1bea:	8f a7       	std	Y+47, r24	; 0x2f
    1bec:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bee:	98 a9       	ldd	r25, Y+48	; 0x30
    1bf0:	9c a7       	std	Y+44, r25	; 0x2c
    1bf2:	8b a7       	std	Y+43, r24	; 0x2b
    1bf4:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bf6:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <LCD_sendCommand+0x594>
    1bfc:	9c a7       	std	Y+44, r25	; 0x2c
    1bfe:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	62 e0       	ldi	r22, 0x02	; 2
    1c04:	41 e0       	ldi	r20, 0x01	; 1
    1c06:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	a0 e8       	ldi	r26, 0x80	; 128
    1c10:	bf e3       	ldi	r27, 0x3F	; 63
    1c12:	8f a3       	std	Y+39, r24	; 0x27
    1c14:	98 a7       	std	Y+40, r25	; 0x28
    1c16:	a9 a7       	std	Y+41, r26	; 0x29
    1c18:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c1a:	6f a1       	ldd	r22, Y+39	; 0x27
    1c1c:	78 a5       	ldd	r23, Y+40	; 0x28
    1c1e:	89 a5       	ldd	r24, Y+41	; 0x29
    1c20:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	4a ef       	ldi	r20, 0xFA	; 250
    1c28:	54 e4       	ldi	r21, 0x44	; 68
    1c2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c2e:	dc 01       	movw	r26, r24
    1c30:	cb 01       	movw	r24, r22
    1c32:	8b a3       	std	Y+35, r24	; 0x23
    1c34:	9c a3       	std	Y+36, r25	; 0x24
    1c36:	ad a3       	std	Y+37, r26	; 0x25
    1c38:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c3a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c3c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c3e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c40:	9e a1       	ldd	r25, Y+38	; 0x26
    1c42:	20 e0       	ldi	r18, 0x00	; 0
    1c44:	30 e0       	ldi	r19, 0x00	; 0
    1c46:	40 e8       	ldi	r20, 0x80	; 128
    1c48:	5f e3       	ldi	r21, 0x3F	; 63
    1c4a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c4e:	88 23       	and	r24, r24
    1c50:	2c f4       	brge	.+10     	; 0x1c5c <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	9a a3       	std	Y+34, r25	; 0x22
    1c58:	89 a3       	std	Y+33, r24	; 0x21
    1c5a:	3f c0       	rjmp	.+126    	; 0x1cda <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1c5c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c5e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c60:	8d a1       	ldd	r24, Y+37	; 0x25
    1c62:	9e a1       	ldd	r25, Y+38	; 0x26
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	3f ef       	ldi	r19, 0xFF	; 255
    1c68:	4f e7       	ldi	r20, 0x7F	; 127
    1c6a:	57 e4       	ldi	r21, 0x47	; 71
    1c6c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c70:	18 16       	cp	r1, r24
    1c72:	4c f5       	brge	.+82     	; 0x1cc6 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c74:	6f a1       	ldd	r22, Y+39	; 0x27
    1c76:	78 a5       	ldd	r23, Y+40	; 0x28
    1c78:	89 a5       	ldd	r24, Y+41	; 0x29
    1c7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c7c:	20 e0       	ldi	r18, 0x00	; 0
    1c7e:	30 e0       	ldi	r19, 0x00	; 0
    1c80:	40 e2       	ldi	r20, 0x20	; 32
    1c82:	51 e4       	ldi	r21, 0x41	; 65
    1c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c88:	dc 01       	movw	r26, r24
    1c8a:	cb 01       	movw	r24, r22
    1c8c:	bc 01       	movw	r22, r24
    1c8e:	cd 01       	movw	r24, r26
    1c90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c94:	dc 01       	movw	r26, r24
    1c96:	cb 01       	movw	r24, r22
    1c98:	9a a3       	std	Y+34, r25	; 0x22
    1c9a:	89 a3       	std	Y+33, r24	; 0x21
    1c9c:	0f c0       	rjmp	.+30     	; 0x1cbc <LCD_sendCommand+0x658>
    1c9e:	88 ec       	ldi	r24, 0xC8	; 200
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	98 a3       	std	Y+32, r25	; 0x20
    1ca4:	8f 8f       	std	Y+31, r24	; 0x1f
    1ca6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ca8:	98 a1       	ldd	r25, Y+32	; 0x20
    1caa:	01 97       	sbiw	r24, 0x01	; 1
    1cac:	f1 f7       	brne	.-4      	; 0x1caa <LCD_sendCommand+0x646>
    1cae:	98 a3       	std	Y+32, r25	; 0x20
    1cb0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cb2:	89 a1       	ldd	r24, Y+33	; 0x21
    1cb4:	9a a1       	ldd	r25, Y+34	; 0x22
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	9a a3       	std	Y+34, r25	; 0x22
    1cba:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cbc:	89 a1       	ldd	r24, Y+33	; 0x21
    1cbe:	9a a1       	ldd	r25, Y+34	; 0x22
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	69 f7       	brne	.-38     	; 0x1c9e <LCD_sendCommand+0x63a>
    1cc4:	14 c0       	rjmp	.+40     	; 0x1cee <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cc6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cc8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cca:	8d a1       	ldd	r24, Y+37	; 0x25
    1ccc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd2:	dc 01       	movw	r26, r24
    1cd4:	cb 01       	movw	r24, r22
    1cd6:	9a a3       	std	Y+34, r25	; 0x22
    1cd8:	89 a3       	std	Y+33, r24	; 0x21
    1cda:	89 a1       	ldd	r24, Y+33	; 0x21
    1cdc:	9a a1       	ldd	r25, Y+34	; 0x22
    1cde:	9e 8f       	std	Y+30, r25	; 0x1e
    1ce0:	8d 8f       	std	Y+29, r24	; 0x1d
    1ce2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1ce4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	f1 f7       	brne	.-4      	; 0x1ce6 <LCD_sendCommand+0x682>
    1cea:	9e 8f       	std	Y+30, r25	; 0x1e
    1cec:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1cee:	fe 01       	movw	r30, r28
    1cf0:	ed 59       	subi	r30, 0x9D	; 157
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	80 81       	ld	r24, Z
    1cf6:	98 2f       	mov	r25, r24
    1cf8:	91 70       	andi	r25, 0x01	; 1
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	63 e0       	ldi	r22, 0x03	; 3
    1cfe:	49 2f       	mov	r20, r25
    1d00:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1d04:	fe 01       	movw	r30, r28
    1d06:	ed 59       	subi	r30, 0x9D	; 157
    1d08:	ff 4f       	sbci	r31, 0xFF	; 255
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 2f       	mov	r24, r24
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	82 70       	andi	r24, 0x02	; 2
    1d12:	90 70       	andi	r25, 0x00	; 0
    1d14:	95 95       	asr	r25
    1d16:	87 95       	ror	r24
    1d18:	98 2f       	mov	r25, r24
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	64 e0       	ldi	r22, 0x04	; 4
    1d1e:	49 2f       	mov	r20, r25
    1d20:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1d24:	fe 01       	movw	r30, r28
    1d26:	ed 59       	subi	r30, 0x9D	; 157
    1d28:	ff 4f       	sbci	r31, 0xFF	; 255
    1d2a:	80 81       	ld	r24, Z
    1d2c:	88 2f       	mov	r24, r24
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	84 70       	andi	r24, 0x04	; 4
    1d32:	90 70       	andi	r25, 0x00	; 0
    1d34:	95 95       	asr	r25
    1d36:	87 95       	ror	r24
    1d38:	95 95       	asr	r25
    1d3a:	87 95       	ror	r24
    1d3c:	98 2f       	mov	r25, r24
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	65 e0       	ldi	r22, 0x05	; 5
    1d42:	49 2f       	mov	r20, r25
    1d44:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ed 59       	subi	r30, 0x9D	; 157
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	88 70       	andi	r24, 0x08	; 8
    1d56:	90 70       	andi	r25, 0x00	; 0
    1d58:	95 95       	asr	r25
    1d5a:	87 95       	ror	r24
    1d5c:	95 95       	asr	r25
    1d5e:	87 95       	ror	r24
    1d60:	95 95       	asr	r25
    1d62:	87 95       	ror	r24
    1d64:	98 2f       	mov	r25, r24
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	66 e0       	ldi	r22, 0x06	; 6
    1d6a:	49 2f       	mov	r20, r25
    1d6c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a0 e8       	ldi	r26, 0x80	; 128
    1d76:	bf e3       	ldi	r27, 0x3F	; 63
    1d78:	89 8f       	std	Y+25, r24	; 0x19
    1d7a:	9a 8f       	std	Y+26, r25	; 0x1a
    1d7c:	ab 8f       	std	Y+27, r26	; 0x1b
    1d7e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d80:	69 8d       	ldd	r22, Y+25	; 0x19
    1d82:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d84:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d86:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d88:	20 e0       	ldi	r18, 0x00	; 0
    1d8a:	30 e0       	ldi	r19, 0x00	; 0
    1d8c:	4a ef       	ldi	r20, 0xFA	; 250
    1d8e:	54 e4       	ldi	r21, 0x44	; 68
    1d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	8d 8b       	std	Y+21, r24	; 0x15
    1d9a:	9e 8b       	std	Y+22, r25	; 0x16
    1d9c:	af 8b       	std	Y+23, r26	; 0x17
    1d9e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1da0:	6d 89       	ldd	r22, Y+21	; 0x15
    1da2:	7e 89       	ldd	r23, Y+22	; 0x16
    1da4:	8f 89       	ldd	r24, Y+23	; 0x17
    1da6:	98 8d       	ldd	r25, Y+24	; 0x18
    1da8:	20 e0       	ldi	r18, 0x00	; 0
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	40 e8       	ldi	r20, 0x80	; 128
    1dae:	5f e3       	ldi	r21, 0x3F	; 63
    1db0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1db4:	88 23       	and	r24, r24
    1db6:	2c f4       	brge	.+10     	; 0x1dc2 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9c 8b       	std	Y+20, r25	; 0x14
    1dbe:	8b 8b       	std	Y+19, r24	; 0x13
    1dc0:	3f c0       	rjmp	.+126    	; 0x1e40 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1dc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1dc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1dc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1dc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	3f ef       	ldi	r19, 0xFF	; 255
    1dce:	4f e7       	ldi	r20, 0x7F	; 127
    1dd0:	57 e4       	ldi	r21, 0x47	; 71
    1dd2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dd6:	18 16       	cp	r1, r24
    1dd8:	4c f5       	brge	.+82     	; 0x1e2c <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dda:	69 8d       	ldd	r22, Y+25	; 0x19
    1ddc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	40 e2       	ldi	r20, 0x20	; 32
    1de8:	51 e4       	ldi	r21, 0x41	; 65
    1dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dfa:	dc 01       	movw	r26, r24
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	9c 8b       	std	Y+20, r25	; 0x14
    1e00:	8b 8b       	std	Y+19, r24	; 0x13
    1e02:	0f c0       	rjmp	.+30     	; 0x1e22 <LCD_sendCommand+0x7be>
    1e04:	88 ec       	ldi	r24, 0xC8	; 200
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	9a 8b       	std	Y+18, r25	; 0x12
    1e0a:	89 8b       	std	Y+17, r24	; 0x11
    1e0c:	89 89       	ldd	r24, Y+17	; 0x11
    1e0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_sendCommand+0x7ac>
    1e14:	9a 8b       	std	Y+18, r25	; 0x12
    1e16:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e18:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	9c 8b       	std	Y+20, r25	; 0x14
    1e20:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e22:	8b 89       	ldd	r24, Y+19	; 0x13
    1e24:	9c 89       	ldd	r25, Y+20	; 0x14
    1e26:	00 97       	sbiw	r24, 0x00	; 0
    1e28:	69 f7       	brne	.-38     	; 0x1e04 <LCD_sendCommand+0x7a0>
    1e2a:	14 c0       	rjmp	.+40     	; 0x1e54 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e2e:	7e 89       	ldd	r23, Y+22	; 0x16
    1e30:	8f 89       	ldd	r24, Y+23	; 0x17
    1e32:	98 8d       	ldd	r25, Y+24	; 0x18
    1e34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9c 8b       	std	Y+20, r25	; 0x14
    1e3e:	8b 8b       	std	Y+19, r24	; 0x13
    1e40:	8b 89       	ldd	r24, Y+19	; 0x13
    1e42:	9c 89       	ldd	r25, Y+20	; 0x14
    1e44:	98 8b       	std	Y+16, r25	; 0x10
    1e46:	8f 87       	std	Y+15, r24	; 0x0f
    1e48:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e4a:	98 89       	ldd	r25, Y+16	; 0x10
    1e4c:	01 97       	sbiw	r24, 0x01	; 1
    1e4e:	f1 f7       	brne	.-4      	; 0x1e4c <LCD_sendCommand+0x7e8>
    1e50:	98 8b       	std	Y+16, r25	; 0x10
    1e52:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	62 e0       	ldi	r22, 0x02	; 2
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e5e:	80 e0       	ldi	r24, 0x00	; 0
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	a0 e8       	ldi	r26, 0x80	; 128
    1e64:	bf e3       	ldi	r27, 0x3F	; 63
    1e66:	8b 87       	std	Y+11, r24	; 0x0b
    1e68:	9c 87       	std	Y+12, r25	; 0x0c
    1e6a:	ad 87       	std	Y+13, r26	; 0x0d
    1e6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e70:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e72:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e74:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e76:	20 e0       	ldi	r18, 0x00	; 0
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	4a ef       	ldi	r20, 0xFA	; 250
    1e7c:	54 e4       	ldi	r21, 0x44	; 68
    1e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	8f 83       	std	Y+7, r24	; 0x07
    1e88:	98 87       	std	Y+8, r25	; 0x08
    1e8a:	a9 87       	std	Y+9, r26	; 0x09
    1e8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	40 e8       	ldi	r20, 0x80	; 128
    1e9c:	5f e3       	ldi	r21, 0x3F	; 63
    1e9e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ea2:	88 23       	and	r24, r24
    1ea4:	2c f4       	brge	.+10     	; 0x1eb0 <LCD_sendCommand+0x84c>
		__ticks = 1;
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	9e 83       	std	Y+6, r25	; 0x06
    1eac:	8d 83       	std	Y+5, r24	; 0x05
    1eae:	3f c0       	rjmp	.+126    	; 0x1f2e <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    1eb0:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb2:	78 85       	ldd	r23, Y+8	; 0x08
    1eb4:	89 85       	ldd	r24, Y+9	; 0x09
    1eb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	3f ef       	ldi	r19, 0xFF	; 255
    1ebc:	4f e7       	ldi	r20, 0x7F	; 127
    1ebe:	57 e4       	ldi	r21, 0x47	; 71
    1ec0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	4c f5       	brge	.+82     	; 0x1f1a <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eca:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ece:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed0:	20 e0       	ldi	r18, 0x00	; 0
    1ed2:	30 e0       	ldi	r19, 0x00	; 0
    1ed4:	40 e2       	ldi	r20, 0x20	; 32
    1ed6:	51 e4       	ldi	r21, 0x41	; 65
    1ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1edc:	dc 01       	movw	r26, r24
    1ede:	cb 01       	movw	r24, r22
    1ee0:	bc 01       	movw	r22, r24
    1ee2:	cd 01       	movw	r24, r26
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9e 83       	std	Y+6, r25	; 0x06
    1eee:	8d 83       	std	Y+5, r24	; 0x05
    1ef0:	0f c0       	rjmp	.+30     	; 0x1f10 <LCD_sendCommand+0x8ac>
    1ef2:	88 ec       	ldi	r24, 0xC8	; 200
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9c 83       	std	Y+4, r25	; 0x04
    1ef8:	8b 83       	std	Y+3, r24	; 0x03
    1efa:	8b 81       	ldd	r24, Y+3	; 0x03
    1efc:	9c 81       	ldd	r25, Y+4	; 0x04
    1efe:	01 97       	sbiw	r24, 0x01	; 1
    1f00:	f1 f7       	brne	.-4      	; 0x1efe <LCD_sendCommand+0x89a>
    1f02:	9c 83       	std	Y+4, r25	; 0x04
    1f04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	01 97       	sbiw	r24, 0x01	; 1
    1f0c:	9e 83       	std	Y+6, r25	; 0x06
    1f0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f10:	8d 81       	ldd	r24, Y+5	; 0x05
    1f12:	9e 81       	ldd	r25, Y+6	; 0x06
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	69 f7       	brne	.-38     	; 0x1ef2 <LCD_sendCommand+0x88e>
    1f18:	14 c0       	rjmp	.+40     	; 0x1f42 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f1a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f1c:	78 85       	ldd	r23, Y+8	; 0x08
    1f1e:	89 85       	ldd	r24, Y+9	; 0x09
    1f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	9e 83       	std	Y+6, r25	; 0x06
    1f2c:	8d 83       	std	Y+5, r24	; 0x05
    1f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f30:	9e 81       	ldd	r25, Y+6	; 0x06
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	89 81       	ldd	r24, Y+1	; 0x01
    1f38:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3a:	01 97       	sbiw	r24, 0x01	; 1
    1f3c:	f1 f7       	brne	.-4      	; 0x1f3a <LCD_sendCommand+0x8d6>
    1f3e:	9a 83       	std	Y+2, r25	; 0x02
    1f40:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif
}
    1f42:	cd 59       	subi	r28, 0x9D	; 157
    1f44:	df 4f       	sbci	r29, 0xFF	; 255
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	cf 91       	pop	r28
    1f52:	df 91       	pop	r29
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	08 95       	ret

00001f5a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    1f66:	c3 56       	subi	r28, 0x63	; 99
    1f68:	d0 40       	sbci	r29, 0x00	; 0
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	fe 01       	movw	r30, r28
    1f76:	ed 59       	subi	r30, 0x9D	; 157
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f7c:	80 e0       	ldi	r24, 0x00	; 0
    1f7e:	61 e0       	ldi	r22, 0x01	; 1
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1f86:	fe 01       	movw	r30, r28
    1f88:	e1 5a       	subi	r30, 0xA1	; 161
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	a0 e8       	ldi	r26, 0x80	; 128
    1f92:	bf e3       	ldi	r27, 0x3F	; 63
    1f94:	80 83       	st	Z, r24
    1f96:	91 83       	std	Z+1, r25	; 0x01
    1f98:	a2 83       	std	Z+2, r26	; 0x02
    1f9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f9c:	8e 01       	movw	r16, r28
    1f9e:	05 5a       	subi	r16, 0xA5	; 165
    1fa0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa2:	fe 01       	movw	r30, r28
    1fa4:	e1 5a       	subi	r30, 0xA1	; 161
    1fa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa8:	60 81       	ld	r22, Z
    1faa:	71 81       	ldd	r23, Z+1	; 0x01
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	93 81       	ldd	r25, Z+3	; 0x03
    1fb0:	20 e0       	ldi	r18, 0x00	; 0
    1fb2:	30 e0       	ldi	r19, 0x00	; 0
    1fb4:	4a ef       	ldi	r20, 0xFA	; 250
    1fb6:	54 e4       	ldi	r21, 0x44	; 68
    1fb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbc:	dc 01       	movw	r26, r24
    1fbe:	cb 01       	movw	r24, r22
    1fc0:	f8 01       	movw	r30, r16
    1fc2:	80 83       	st	Z, r24
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	a2 83       	std	Z+2, r26	; 0x02
    1fc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e5 5a       	subi	r30, 0xA5	; 165
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	82 81       	ldd	r24, Z+2	; 0x02
    1fd6:	93 81       	ldd	r25, Z+3	; 0x03
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	44 f4       	brge	.+16     	; 0x1ff8 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e7 5a       	subi	r30, 0xA7	; 167
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	91 83       	std	Z+1, r25	; 0x01
    1ff4:	80 83       	st	Z, r24
    1ff6:	64 c0       	rjmp	.+200    	; 0x20c0 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	e5 5a       	subi	r30, 0xA5	; 165
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	60 81       	ld	r22, Z
    2000:	71 81       	ldd	r23, Z+1	; 0x01
    2002:	82 81       	ldd	r24, Z+2	; 0x02
    2004:	93 81       	ldd	r25, Z+3	; 0x03
    2006:	20 e0       	ldi	r18, 0x00	; 0
    2008:	3f ef       	ldi	r19, 0xFF	; 255
    200a:	4f e7       	ldi	r20, 0x7F	; 127
    200c:	57 e4       	ldi	r21, 0x47	; 71
    200e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2012:	18 16       	cp	r1, r24
    2014:	0c f0       	brlt	.+2      	; 0x2018 <LCD_displayCharacter+0xbe>
    2016:	43 c0       	rjmp	.+134    	; 0x209e <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2018:	fe 01       	movw	r30, r28
    201a:	e1 5a       	subi	r30, 0xA1	; 161
    201c:	ff 4f       	sbci	r31, 0xFF	; 255
    201e:	60 81       	ld	r22, Z
    2020:	71 81       	ldd	r23, Z+1	; 0x01
    2022:	82 81       	ldd	r24, Z+2	; 0x02
    2024:	93 81       	ldd	r25, Z+3	; 0x03
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e2       	ldi	r20, 0x20	; 32
    202c:	51 e4       	ldi	r21, 0x41	; 65
    202e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	8e 01       	movw	r16, r28
    2038:	07 5a       	subi	r16, 0xA7	; 167
    203a:	1f 4f       	sbci	r17, 0xFF	; 255
    203c:	bc 01       	movw	r22, r24
    203e:	cd 01       	movw	r24, r26
    2040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2044:	dc 01       	movw	r26, r24
    2046:	cb 01       	movw	r24, r22
    2048:	f8 01       	movw	r30, r16
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	80 83       	st	Z, r24
    204e:	1f c0       	rjmp	.+62     	; 0x208e <LCD_displayCharacter+0x134>
    2050:	fe 01       	movw	r30, r28
    2052:	e9 5a       	subi	r30, 0xA9	; 169
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	88 ec       	ldi	r24, 0xC8	; 200
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	91 83       	std	Z+1, r25	; 0x01
    205c:	80 83       	st	Z, r24
    205e:	fe 01       	movw	r30, r28
    2060:	e9 5a       	subi	r30, 0xA9	; 169
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	80 81       	ld	r24, Z
    2066:	91 81       	ldd	r25, Z+1	; 0x01
    2068:	01 97       	sbiw	r24, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <LCD_displayCharacter+0x10e>
    206c:	fe 01       	movw	r30, r28
    206e:	e9 5a       	subi	r30, 0xA9	; 169
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2076:	de 01       	movw	r26, r28
    2078:	a7 5a       	subi	r26, 0xA7	; 167
    207a:	bf 4f       	sbci	r27, 0xFF	; 255
    207c:	fe 01       	movw	r30, r28
    207e:	e7 5a       	subi	r30, 0xA7	; 167
    2080:	ff 4f       	sbci	r31, 0xFF	; 255
    2082:	80 81       	ld	r24, Z
    2084:	91 81       	ldd	r25, Z+1	; 0x01
    2086:	01 97       	sbiw	r24, 0x01	; 1
    2088:	11 96       	adiw	r26, 0x01	; 1
    208a:	9c 93       	st	X, r25
    208c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208e:	fe 01       	movw	r30, r28
    2090:	e7 5a       	subi	r30, 0xA7	; 167
    2092:	ff 4f       	sbci	r31, 0xFF	; 255
    2094:	80 81       	ld	r24, Z
    2096:	91 81       	ldd	r25, Z+1	; 0x01
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	d1 f6       	brne	.-76     	; 0x2050 <LCD_displayCharacter+0xf6>
    209c:	27 c0       	rjmp	.+78     	; 0x20ec <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209e:	8e 01       	movw	r16, r28
    20a0:	07 5a       	subi	r16, 0xA7	; 167
    20a2:	1f 4f       	sbci	r17, 0xFF	; 255
    20a4:	fe 01       	movw	r30, r28
    20a6:	e5 5a       	subi	r30, 0xA5	; 165
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	60 81       	ld	r22, Z
    20ac:	71 81       	ldd	r23, Z+1	; 0x01
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	93 81       	ldd	r25, Z+3	; 0x03
    20b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b6:	dc 01       	movw	r26, r24
    20b8:	cb 01       	movw	r24, r22
    20ba:	f8 01       	movw	r30, r16
    20bc:	91 83       	std	Z+1, r25	; 0x01
    20be:	80 83       	st	Z, r24
    20c0:	de 01       	movw	r26, r28
    20c2:	ab 5a       	subi	r26, 0xAB	; 171
    20c4:	bf 4f       	sbci	r27, 0xFF	; 255
    20c6:	fe 01       	movw	r30, r28
    20c8:	e7 5a       	subi	r30, 0xA7	; 167
    20ca:	ff 4f       	sbci	r31, 0xFF	; 255
    20cc:	80 81       	ld	r24, Z
    20ce:	91 81       	ldd	r25, Z+1	; 0x01
    20d0:	8d 93       	st	X+, r24
    20d2:	9c 93       	st	X, r25
    20d4:	fe 01       	movw	r30, r28
    20d6:	eb 5a       	subi	r30, 0xAB	; 171
    20d8:	ff 4f       	sbci	r31, 0xFF	; 255
    20da:	80 81       	ld	r24, Z
    20dc:	91 81       	ldd	r25, Z+1	; 0x01
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	f1 f7       	brne	.-4      	; 0x20de <LCD_displayCharacter+0x184>
    20e2:	fe 01       	movw	r30, r28
    20e4:	eb 5a       	subi	r30, 0xAB	; 171
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	91 83       	std	Z+1, r25	; 0x01
    20ea:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	62 e0       	ldi	r22, 0x02	; 2
    20f0:	41 e0       	ldi	r20, 0x01	; 1
    20f2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    20f6:	fe 01       	movw	r30, r28
    20f8:	ef 5a       	subi	r30, 0xAF	; 175
    20fa:	ff 4f       	sbci	r31, 0xFF	; 255
    20fc:	80 e0       	ldi	r24, 0x00	; 0
    20fe:	90 e0       	ldi	r25, 0x00	; 0
    2100:	a0 e8       	ldi	r26, 0x80	; 128
    2102:	bf e3       	ldi	r27, 0x3F	; 63
    2104:	80 83       	st	Z, r24
    2106:	91 83       	std	Z+1, r25	; 0x01
    2108:	a2 83       	std	Z+2, r26	; 0x02
    210a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    210c:	8e 01       	movw	r16, r28
    210e:	03 5b       	subi	r16, 0xB3	; 179
    2110:	1f 4f       	sbci	r17, 0xFF	; 255
    2112:	fe 01       	movw	r30, r28
    2114:	ef 5a       	subi	r30, 0xAF	; 175
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	60 81       	ld	r22, Z
    211a:	71 81       	ldd	r23, Z+1	; 0x01
    211c:	82 81       	ldd	r24, Z+2	; 0x02
    211e:	93 81       	ldd	r25, Z+3	; 0x03
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	4a ef       	ldi	r20, 0xFA	; 250
    2126:	54 e4       	ldi	r21, 0x44	; 68
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	f8 01       	movw	r30, r16
    2132:	80 83       	st	Z, r24
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	a2 83       	std	Z+2, r26	; 0x02
    2138:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    213a:	fe 01       	movw	r30, r28
    213c:	e3 5b       	subi	r30, 0xB3	; 179
    213e:	ff 4f       	sbci	r31, 0xFF	; 255
    2140:	60 81       	ld	r22, Z
    2142:	71 81       	ldd	r23, Z+1	; 0x01
    2144:	82 81       	ldd	r24, Z+2	; 0x02
    2146:	93 81       	ldd	r25, Z+3	; 0x03
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e8       	ldi	r20, 0x80	; 128
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2154:	88 23       	and	r24, r24
    2156:	44 f4       	brge	.+16     	; 0x2168 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2158:	fe 01       	movw	r30, r28
    215a:	e5 5b       	subi	r30, 0xB5	; 181
    215c:	ff 4f       	sbci	r31, 0xFF	; 255
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	91 83       	std	Z+1, r25	; 0x01
    2164:	80 83       	st	Z, r24
    2166:	64 c0       	rjmp	.+200    	; 0x2230 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2168:	fe 01       	movw	r30, r28
    216a:	e3 5b       	subi	r30, 0xB3	; 179
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	60 81       	ld	r22, Z
    2170:	71 81       	ldd	r23, Z+1	; 0x01
    2172:	82 81       	ldd	r24, Z+2	; 0x02
    2174:	93 81       	ldd	r25, Z+3	; 0x03
    2176:	20 e0       	ldi	r18, 0x00	; 0
    2178:	3f ef       	ldi	r19, 0xFF	; 255
    217a:	4f e7       	ldi	r20, 0x7F	; 127
    217c:	57 e4       	ldi	r21, 0x47	; 71
    217e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2182:	18 16       	cp	r1, r24
    2184:	0c f0       	brlt	.+2      	; 0x2188 <LCD_displayCharacter+0x22e>
    2186:	43 c0       	rjmp	.+134    	; 0x220e <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2188:	fe 01       	movw	r30, r28
    218a:	ef 5a       	subi	r30, 0xAF	; 175
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	60 81       	ld	r22, Z
    2190:	71 81       	ldd	r23, Z+1	; 0x01
    2192:	82 81       	ldd	r24, Z+2	; 0x02
    2194:	93 81       	ldd	r25, Z+3	; 0x03
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	40 e2       	ldi	r20, 0x20	; 32
    219c:	51 e4       	ldi	r21, 0x41	; 65
    219e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	8e 01       	movw	r16, r28
    21a8:	05 5b       	subi	r16, 0xB5	; 181
    21aa:	1f 4f       	sbci	r17, 0xFF	; 255
    21ac:	bc 01       	movw	r22, r24
    21ae:	cd 01       	movw	r24, r26
    21b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21b4:	dc 01       	movw	r26, r24
    21b6:	cb 01       	movw	r24, r22
    21b8:	f8 01       	movw	r30, r16
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	80 83       	st	Z, r24
    21be:	1f c0       	rjmp	.+62     	; 0x21fe <LCD_displayCharacter+0x2a4>
    21c0:	fe 01       	movw	r30, r28
    21c2:	e7 5b       	subi	r30, 0xB7	; 183
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	88 ec       	ldi	r24, 0xC8	; 200
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	91 83       	std	Z+1, r25	; 0x01
    21cc:	80 83       	st	Z, r24
    21ce:	fe 01       	movw	r30, r28
    21d0:	e7 5b       	subi	r30, 0xB7	; 183
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	80 81       	ld	r24, Z
    21d6:	91 81       	ldd	r25, Z+1	; 0x01
    21d8:	01 97       	sbiw	r24, 0x01	; 1
    21da:	f1 f7       	brne	.-4      	; 0x21d8 <LCD_displayCharacter+0x27e>
    21dc:	fe 01       	movw	r30, r28
    21de:	e7 5b       	subi	r30, 0xB7	; 183
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	91 83       	std	Z+1, r25	; 0x01
    21e4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e6:	de 01       	movw	r26, r28
    21e8:	a5 5b       	subi	r26, 0xB5	; 181
    21ea:	bf 4f       	sbci	r27, 0xFF	; 255
    21ec:	fe 01       	movw	r30, r28
    21ee:	e5 5b       	subi	r30, 0xB5	; 181
    21f0:	ff 4f       	sbci	r31, 0xFF	; 255
    21f2:	80 81       	ld	r24, Z
    21f4:	91 81       	ldd	r25, Z+1	; 0x01
    21f6:	01 97       	sbiw	r24, 0x01	; 1
    21f8:	11 96       	adiw	r26, 0x01	; 1
    21fa:	9c 93       	st	X, r25
    21fc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21fe:	fe 01       	movw	r30, r28
    2200:	e5 5b       	subi	r30, 0xB5	; 181
    2202:	ff 4f       	sbci	r31, 0xFF	; 255
    2204:	80 81       	ld	r24, Z
    2206:	91 81       	ldd	r25, Z+1	; 0x01
    2208:	00 97       	sbiw	r24, 0x00	; 0
    220a:	d1 f6       	brne	.-76     	; 0x21c0 <LCD_displayCharacter+0x266>
    220c:	27 c0       	rjmp	.+78     	; 0x225c <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    220e:	8e 01       	movw	r16, r28
    2210:	05 5b       	subi	r16, 0xB5	; 181
    2212:	1f 4f       	sbci	r17, 0xFF	; 255
    2214:	fe 01       	movw	r30, r28
    2216:	e3 5b       	subi	r30, 0xB3	; 179
    2218:	ff 4f       	sbci	r31, 0xFF	; 255
    221a:	60 81       	ld	r22, Z
    221c:	71 81       	ldd	r23, Z+1	; 0x01
    221e:	82 81       	ldd	r24, Z+2	; 0x02
    2220:	93 81       	ldd	r25, Z+3	; 0x03
    2222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	f8 01       	movw	r30, r16
    222c:	91 83       	std	Z+1, r25	; 0x01
    222e:	80 83       	st	Z, r24
    2230:	de 01       	movw	r26, r28
    2232:	a9 5b       	subi	r26, 0xB9	; 185
    2234:	bf 4f       	sbci	r27, 0xFF	; 255
    2236:	fe 01       	movw	r30, r28
    2238:	e5 5b       	subi	r30, 0xB5	; 181
    223a:	ff 4f       	sbci	r31, 0xFF	; 255
    223c:	80 81       	ld	r24, Z
    223e:	91 81       	ldd	r25, Z+1	; 0x01
    2240:	8d 93       	st	X+, r24
    2242:	9c 93       	st	X, r25
    2244:	fe 01       	movw	r30, r28
    2246:	e9 5b       	subi	r30, 0xB9	; 185
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	01 97       	sbiw	r24, 0x01	; 1
    2250:	f1 f7       	brne	.-4      	; 0x224e <LCD_displayCharacter+0x2f4>
    2252:	fe 01       	movw	r30, r28
    2254:	e9 5b       	subi	r30, 0xB9	; 185
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	91 83       	std	Z+1, r25	; 0x01
    225a:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    225c:	fe 01       	movw	r30, r28
    225e:	ed 59       	subi	r30, 0x9D	; 157
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	80 81       	ld	r24, Z
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	80 71       	andi	r24, 0x10	; 16
    226a:	90 70       	andi	r25, 0x00	; 0
    226c:	95 95       	asr	r25
    226e:	87 95       	ror	r24
    2270:	95 95       	asr	r25
    2272:	87 95       	ror	r24
    2274:	95 95       	asr	r25
    2276:	87 95       	ror	r24
    2278:	95 95       	asr	r25
    227a:	87 95       	ror	r24
    227c:	98 2f       	mov	r25, r24
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	63 e0       	ldi	r22, 0x03	; 3
    2282:	49 2f       	mov	r20, r25
    2284:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2288:	fe 01       	movw	r30, r28
    228a:	ed 59       	subi	r30, 0x9D	; 157
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 81       	ld	r24, Z
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	80 72       	andi	r24, 0x20	; 32
    2296:	90 70       	andi	r25, 0x00	; 0
    2298:	95 95       	asr	r25
    229a:	87 95       	ror	r24
    229c:	95 95       	asr	r25
    229e:	87 95       	ror	r24
    22a0:	95 95       	asr	r25
    22a2:	87 95       	ror	r24
    22a4:	95 95       	asr	r25
    22a6:	87 95       	ror	r24
    22a8:	95 95       	asr	r25
    22aa:	87 95       	ror	r24
    22ac:	98 2f       	mov	r25, r24
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	64 e0       	ldi	r22, 0x04	; 4
    22b2:	49 2f       	mov	r20, r25
    22b4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    22b8:	fe 01       	movw	r30, r28
    22ba:	ed 59       	subi	r30, 0x9D	; 157
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 81       	ld	r24, Z
    22c0:	88 2f       	mov	r24, r24
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	80 74       	andi	r24, 0x40	; 64
    22c6:	90 70       	andi	r25, 0x00	; 0
    22c8:	08 2e       	mov	r0, r24
    22ca:	89 2f       	mov	r24, r25
    22cc:	00 0c       	add	r0, r0
    22ce:	88 1f       	adc	r24, r24
    22d0:	99 0b       	sbc	r25, r25
    22d2:	00 0c       	add	r0, r0
    22d4:	88 1f       	adc	r24, r24
    22d6:	99 1f       	adc	r25, r25
    22d8:	98 2f       	mov	r25, r24
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	65 e0       	ldi	r22, 0x05	; 5
    22de:	49 2f       	mov	r20, r25
    22e0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    22e4:	fe 01       	movw	r30, r28
    22e6:	ed 59       	subi	r30, 0x9D	; 157
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	80 81       	ld	r24, Z
    22ec:	98 2f       	mov	r25, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	99 27       	eor	r25, r25
    22f2:	99 1f       	adc	r25, r25
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	66 e0       	ldi	r22, 0x06	; 6
    22f8:	49 2f       	mov	r20, r25
    22fa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    22fe:	fe 01       	movw	r30, r28
    2300:	ed 5b       	subi	r30, 0xBD	; 189
    2302:	ff 4f       	sbci	r31, 0xFF	; 255
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	90 e0       	ldi	r25, 0x00	; 0
    2308:	a0 e8       	ldi	r26, 0x80	; 128
    230a:	bf e3       	ldi	r27, 0x3F	; 63
    230c:	80 83       	st	Z, r24
    230e:	91 83       	std	Z+1, r25	; 0x01
    2310:	a2 83       	std	Z+2, r26	; 0x02
    2312:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2314:	8e 01       	movw	r16, r28
    2316:	01 5c       	subi	r16, 0xC1	; 193
    2318:	1f 4f       	sbci	r17, 0xFF	; 255
    231a:	fe 01       	movw	r30, r28
    231c:	ed 5b       	subi	r30, 0xBD	; 189
    231e:	ff 4f       	sbci	r31, 0xFF	; 255
    2320:	60 81       	ld	r22, Z
    2322:	71 81       	ldd	r23, Z+1	; 0x01
    2324:	82 81       	ldd	r24, Z+2	; 0x02
    2326:	93 81       	ldd	r25, Z+3	; 0x03
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	4a ef       	ldi	r20, 0xFA	; 250
    232e:	54 e4       	ldi	r21, 0x44	; 68
    2330:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	f8 01       	movw	r30, r16
    233a:	80 83       	st	Z, r24
    233c:	91 83       	std	Z+1, r25	; 0x01
    233e:	a2 83       	std	Z+2, r26	; 0x02
    2340:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2342:	fe 01       	movw	r30, r28
    2344:	ff 96       	adiw	r30, 0x3f	; 63
    2346:	60 81       	ld	r22, Z
    2348:	71 81       	ldd	r23, Z+1	; 0x01
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	93 81       	ldd	r25, Z+3	; 0x03
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	40 e8       	ldi	r20, 0x80	; 128
    2354:	5f e3       	ldi	r21, 0x3F	; 63
    2356:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    235a:	88 23       	and	r24, r24
    235c:	2c f4       	brge	.+10     	; 0x2368 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    235e:	81 e0       	ldi	r24, 0x01	; 1
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	9e af       	std	Y+62, r25	; 0x3e
    2364:	8d af       	std	Y+61, r24	; 0x3d
    2366:	46 c0       	rjmp	.+140    	; 0x23f4 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2368:	fe 01       	movw	r30, r28
    236a:	ff 96       	adiw	r30, 0x3f	; 63
    236c:	60 81       	ld	r22, Z
    236e:	71 81       	ldd	r23, Z+1	; 0x01
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	93 81       	ldd	r25, Z+3	; 0x03
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	3f ef       	ldi	r19, 0xFF	; 255
    2378:	4f e7       	ldi	r20, 0x7F	; 127
    237a:	57 e4       	ldi	r21, 0x47	; 71
    237c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2380:	18 16       	cp	r1, r24
    2382:	64 f5       	brge	.+88     	; 0x23dc <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2384:	fe 01       	movw	r30, r28
    2386:	ed 5b       	subi	r30, 0xBD	; 189
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	60 81       	ld	r22, Z
    238c:	71 81       	ldd	r23, Z+1	; 0x01
    238e:	82 81       	ldd	r24, Z+2	; 0x02
    2390:	93 81       	ldd	r25, Z+3	; 0x03
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	40 e2       	ldi	r20, 0x20	; 32
    2398:	51 e4       	ldi	r21, 0x41	; 65
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	9e af       	std	Y+62, r25	; 0x3e
    23b0:	8d af       	std	Y+61, r24	; 0x3d
    23b2:	0f c0       	rjmp	.+30     	; 0x23d2 <LCD_displayCharacter+0x478>
    23b4:	88 ec       	ldi	r24, 0xC8	; 200
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	9c af       	std	Y+60, r25	; 0x3c
    23ba:	8b af       	std	Y+59, r24	; 0x3b
    23bc:	8b ad       	ldd	r24, Y+59	; 0x3b
    23be:	9c ad       	ldd	r25, Y+60	; 0x3c
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	f1 f7       	brne	.-4      	; 0x23c0 <LCD_displayCharacter+0x466>
    23c4:	9c af       	std	Y+60, r25	; 0x3c
    23c6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    23ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	9e af       	std	Y+62, r25	; 0x3e
    23d0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    23d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    23d6:	00 97       	sbiw	r24, 0x00	; 0
    23d8:	69 f7       	brne	.-38     	; 0x23b4 <LCD_displayCharacter+0x45a>
    23da:	16 c0       	rjmp	.+44     	; 0x2408 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23dc:	fe 01       	movw	r30, r28
    23de:	ff 96       	adiw	r30, 0x3f	; 63
    23e0:	60 81       	ld	r22, Z
    23e2:	71 81       	ldd	r23, Z+1	; 0x01
    23e4:	82 81       	ldd	r24, Z+2	; 0x02
    23e6:	93 81       	ldd	r25, Z+3	; 0x03
    23e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	9e af       	std	Y+62, r25	; 0x3e
    23f2:	8d af       	std	Y+61, r24	; 0x3d
    23f4:	8d ad       	ldd	r24, Y+61	; 0x3d
    23f6:	9e ad       	ldd	r25, Y+62	; 0x3e
    23f8:	9a af       	std	Y+58, r25	; 0x3a
    23fa:	89 af       	std	Y+57, r24	; 0x39
    23fc:	89 ad       	ldd	r24, Y+57	; 0x39
    23fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    2400:	01 97       	sbiw	r24, 0x01	; 1
    2402:	f1 f7       	brne	.-4      	; 0x2400 <LCD_displayCharacter+0x4a6>
    2404:	9a af       	std	Y+58, r25	; 0x3a
    2406:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	62 e0       	ldi	r22, 0x02	; 2
    240c:	40 e0       	ldi	r20, 0x00	; 0
    240e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	a0 e8       	ldi	r26, 0x80	; 128
    2418:	bf e3       	ldi	r27, 0x3F	; 63
    241a:	8d ab       	std	Y+53, r24	; 0x35
    241c:	9e ab       	std	Y+54, r25	; 0x36
    241e:	af ab       	std	Y+55, r26	; 0x37
    2420:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2422:	6d a9       	ldd	r22, Y+53	; 0x35
    2424:	7e a9       	ldd	r23, Y+54	; 0x36
    2426:	8f a9       	ldd	r24, Y+55	; 0x37
    2428:	98 ad       	ldd	r25, Y+56	; 0x38
    242a:	20 e0       	ldi	r18, 0x00	; 0
    242c:	30 e0       	ldi	r19, 0x00	; 0
    242e:	4a ef       	ldi	r20, 0xFA	; 250
    2430:	54 e4       	ldi	r21, 0x44	; 68
    2432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	89 ab       	std	Y+49, r24	; 0x31
    243c:	9a ab       	std	Y+50, r25	; 0x32
    243e:	ab ab       	std	Y+51, r26	; 0x33
    2440:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2442:	69 a9       	ldd	r22, Y+49	; 0x31
    2444:	7a a9       	ldd	r23, Y+50	; 0x32
    2446:	8b a9       	ldd	r24, Y+51	; 0x33
    2448:	9c a9       	ldd	r25, Y+52	; 0x34
    244a:	20 e0       	ldi	r18, 0x00	; 0
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	40 e8       	ldi	r20, 0x80	; 128
    2450:	5f e3       	ldi	r21, 0x3F	; 63
    2452:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2456:	88 23       	and	r24, r24
    2458:	2c f4       	brge	.+10     	; 0x2464 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	98 ab       	std	Y+48, r25	; 0x30
    2460:	8f a7       	std	Y+47, r24	; 0x2f
    2462:	3f c0       	rjmp	.+126    	; 0x24e2 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2464:	69 a9       	ldd	r22, Y+49	; 0x31
    2466:	7a a9       	ldd	r23, Y+50	; 0x32
    2468:	8b a9       	ldd	r24, Y+51	; 0x33
    246a:	9c a9       	ldd	r25, Y+52	; 0x34
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	3f ef       	ldi	r19, 0xFF	; 255
    2470:	4f e7       	ldi	r20, 0x7F	; 127
    2472:	57 e4       	ldi	r21, 0x47	; 71
    2474:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2478:	18 16       	cp	r1, r24
    247a:	4c f5       	brge	.+82     	; 0x24ce <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    247c:	6d a9       	ldd	r22, Y+53	; 0x35
    247e:	7e a9       	ldd	r23, Y+54	; 0x36
    2480:	8f a9       	ldd	r24, Y+55	; 0x37
    2482:	98 ad       	ldd	r25, Y+56	; 0x38
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e2       	ldi	r20, 0x20	; 32
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	bc 01       	movw	r22, r24
    2496:	cd 01       	movw	r24, r26
    2498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	98 ab       	std	Y+48, r25	; 0x30
    24a2:	8f a7       	std	Y+47, r24	; 0x2f
    24a4:	0f c0       	rjmp	.+30     	; 0x24c4 <LCD_displayCharacter+0x56a>
    24a6:	88 ec       	ldi	r24, 0xC8	; 200
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9e a7       	std	Y+46, r25	; 0x2e
    24ac:	8d a7       	std	Y+45, r24	; 0x2d
    24ae:	8d a5       	ldd	r24, Y+45	; 0x2d
    24b0:	9e a5       	ldd	r25, Y+46	; 0x2e
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	f1 f7       	brne	.-4      	; 0x24b2 <LCD_displayCharacter+0x558>
    24b6:	9e a7       	std	Y+46, r25	; 0x2e
    24b8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    24bc:	98 a9       	ldd	r25, Y+48	; 0x30
    24be:	01 97       	sbiw	r24, 0x01	; 1
    24c0:	98 ab       	std	Y+48, r25	; 0x30
    24c2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24c6:	98 a9       	ldd	r25, Y+48	; 0x30
    24c8:	00 97       	sbiw	r24, 0x00	; 0
    24ca:	69 f7       	brne	.-38     	; 0x24a6 <LCD_displayCharacter+0x54c>
    24cc:	14 c0       	rjmp	.+40     	; 0x24f6 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24ce:	69 a9       	ldd	r22, Y+49	; 0x31
    24d0:	7a a9       	ldd	r23, Y+50	; 0x32
    24d2:	8b a9       	ldd	r24, Y+51	; 0x33
    24d4:	9c a9       	ldd	r25, Y+52	; 0x34
    24d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	98 ab       	std	Y+48, r25	; 0x30
    24e0:	8f a7       	std	Y+47, r24	; 0x2f
    24e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e4:	98 a9       	ldd	r25, Y+48	; 0x30
    24e6:	9c a7       	std	Y+44, r25	; 0x2c
    24e8:	8b a7       	std	Y+43, r24	; 0x2b
    24ea:	8b a5       	ldd	r24, Y+43	; 0x2b
    24ec:	9c a5       	ldd	r25, Y+44	; 0x2c
    24ee:	01 97       	sbiw	r24, 0x01	; 1
    24f0:	f1 f7       	brne	.-4      	; 0x24ee <LCD_displayCharacter+0x594>
    24f2:	9c a7       	std	Y+44, r25	; 0x2c
    24f4:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	62 e0       	ldi	r22, 0x02	; 2
    24fa:	41 e0       	ldi	r20, 0x01	; 1
    24fc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2500:	80 e0       	ldi	r24, 0x00	; 0
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	a0 e8       	ldi	r26, 0x80	; 128
    2506:	bf e3       	ldi	r27, 0x3F	; 63
    2508:	8f a3       	std	Y+39, r24	; 0x27
    250a:	98 a7       	std	Y+40, r25	; 0x28
    250c:	a9 a7       	std	Y+41, r26	; 0x29
    250e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2510:	6f a1       	ldd	r22, Y+39	; 0x27
    2512:	78 a5       	ldd	r23, Y+40	; 0x28
    2514:	89 a5       	ldd	r24, Y+41	; 0x29
    2516:	9a a5       	ldd	r25, Y+42	; 0x2a
    2518:	20 e0       	ldi	r18, 0x00	; 0
    251a:	30 e0       	ldi	r19, 0x00	; 0
    251c:	4a ef       	ldi	r20, 0xFA	; 250
    251e:	54 e4       	ldi	r21, 0x44	; 68
    2520:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2524:	dc 01       	movw	r26, r24
    2526:	cb 01       	movw	r24, r22
    2528:	8b a3       	std	Y+35, r24	; 0x23
    252a:	9c a3       	std	Y+36, r25	; 0x24
    252c:	ad a3       	std	Y+37, r26	; 0x25
    252e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2530:	6b a1       	ldd	r22, Y+35	; 0x23
    2532:	7c a1       	ldd	r23, Y+36	; 0x24
    2534:	8d a1       	ldd	r24, Y+37	; 0x25
    2536:	9e a1       	ldd	r25, Y+38	; 0x26
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 e8       	ldi	r20, 0x80	; 128
    253e:	5f e3       	ldi	r21, 0x3F	; 63
    2540:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2544:	88 23       	and	r24, r24
    2546:	2c f4       	brge	.+10     	; 0x2552 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	9a a3       	std	Y+34, r25	; 0x22
    254e:	89 a3       	std	Y+33, r24	; 0x21
    2550:	3f c0       	rjmp	.+126    	; 0x25d0 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2552:	6b a1       	ldd	r22, Y+35	; 0x23
    2554:	7c a1       	ldd	r23, Y+36	; 0x24
    2556:	8d a1       	ldd	r24, Y+37	; 0x25
    2558:	9e a1       	ldd	r25, Y+38	; 0x26
    255a:	20 e0       	ldi	r18, 0x00	; 0
    255c:	3f ef       	ldi	r19, 0xFF	; 255
    255e:	4f e7       	ldi	r20, 0x7F	; 127
    2560:	57 e4       	ldi	r21, 0x47	; 71
    2562:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2566:	18 16       	cp	r1, r24
    2568:	4c f5       	brge	.+82     	; 0x25bc <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    256a:	6f a1       	ldd	r22, Y+39	; 0x27
    256c:	78 a5       	ldd	r23, Y+40	; 0x28
    256e:	89 a5       	ldd	r24, Y+41	; 0x29
    2570:	9a a5       	ldd	r25, Y+42	; 0x2a
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e2       	ldi	r20, 0x20	; 32
    2578:	51 e4       	ldi	r21, 0x41	; 65
    257a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257e:	dc 01       	movw	r26, r24
    2580:	cb 01       	movw	r24, r22
    2582:	bc 01       	movw	r22, r24
    2584:	cd 01       	movw	r24, r26
    2586:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    258a:	dc 01       	movw	r26, r24
    258c:	cb 01       	movw	r24, r22
    258e:	9a a3       	std	Y+34, r25	; 0x22
    2590:	89 a3       	std	Y+33, r24	; 0x21
    2592:	0f c0       	rjmp	.+30     	; 0x25b2 <LCD_displayCharacter+0x658>
    2594:	88 ec       	ldi	r24, 0xC8	; 200
    2596:	90 e0       	ldi	r25, 0x00	; 0
    2598:	98 a3       	std	Y+32, r25	; 0x20
    259a:	8f 8f       	std	Y+31, r24	; 0x1f
    259c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    259e:	98 a1       	ldd	r25, Y+32	; 0x20
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	f1 f7       	brne	.-4      	; 0x25a0 <LCD_displayCharacter+0x646>
    25a4:	98 a3       	std	Y+32, r25	; 0x20
    25a6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25a8:	89 a1       	ldd	r24, Y+33	; 0x21
    25aa:	9a a1       	ldd	r25, Y+34	; 0x22
    25ac:	01 97       	sbiw	r24, 0x01	; 1
    25ae:	9a a3       	std	Y+34, r25	; 0x22
    25b0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25b2:	89 a1       	ldd	r24, Y+33	; 0x21
    25b4:	9a a1       	ldd	r25, Y+34	; 0x22
    25b6:	00 97       	sbiw	r24, 0x00	; 0
    25b8:	69 f7       	brne	.-38     	; 0x2594 <LCD_displayCharacter+0x63a>
    25ba:	14 c0       	rjmp	.+40     	; 0x25e4 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25bc:	6b a1       	ldd	r22, Y+35	; 0x23
    25be:	7c a1       	ldd	r23, Y+36	; 0x24
    25c0:	8d a1       	ldd	r24, Y+37	; 0x25
    25c2:	9e a1       	ldd	r25, Y+38	; 0x26
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	9a a3       	std	Y+34, r25	; 0x22
    25ce:	89 a3       	std	Y+33, r24	; 0x21
    25d0:	89 a1       	ldd	r24, Y+33	; 0x21
    25d2:	9a a1       	ldd	r25, Y+34	; 0x22
    25d4:	9e 8f       	std	Y+30, r25	; 0x1e
    25d6:	8d 8f       	std	Y+29, r24	; 0x1d
    25d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25dc:	01 97       	sbiw	r24, 0x01	; 1
    25de:	f1 f7       	brne	.-4      	; 0x25dc <LCD_displayCharacter+0x682>
    25e0:	9e 8f       	std	Y+30, r25	; 0x1e
    25e2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    25e4:	fe 01       	movw	r30, r28
    25e6:	ed 59       	subi	r30, 0x9D	; 157
    25e8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ea:	80 81       	ld	r24, Z
    25ec:	98 2f       	mov	r25, r24
    25ee:	91 70       	andi	r25, 0x01	; 1
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	63 e0       	ldi	r22, 0x03	; 3
    25f4:	49 2f       	mov	r20, r25
    25f6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    25fa:	fe 01       	movw	r30, r28
    25fc:	ed 59       	subi	r30, 0x9D	; 157
    25fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2600:	80 81       	ld	r24, Z
    2602:	88 2f       	mov	r24, r24
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	82 70       	andi	r24, 0x02	; 2
    2608:	90 70       	andi	r25, 0x00	; 0
    260a:	95 95       	asr	r25
    260c:	87 95       	ror	r24
    260e:	98 2f       	mov	r25, r24
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	64 e0       	ldi	r22, 0x04	; 4
    2614:	49 2f       	mov	r20, r25
    2616:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    261a:	fe 01       	movw	r30, r28
    261c:	ed 59       	subi	r30, 0x9D	; 157
    261e:	ff 4f       	sbci	r31, 0xFF	; 255
    2620:	80 81       	ld	r24, Z
    2622:	88 2f       	mov	r24, r24
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	84 70       	andi	r24, 0x04	; 4
    2628:	90 70       	andi	r25, 0x00	; 0
    262a:	95 95       	asr	r25
    262c:	87 95       	ror	r24
    262e:	95 95       	asr	r25
    2630:	87 95       	ror	r24
    2632:	98 2f       	mov	r25, r24
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	65 e0       	ldi	r22, 0x05	; 5
    2638:	49 2f       	mov	r20, r25
    263a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    263e:	fe 01       	movw	r30, r28
    2640:	ed 59       	subi	r30, 0x9D	; 157
    2642:	ff 4f       	sbci	r31, 0xFF	; 255
    2644:	80 81       	ld	r24, Z
    2646:	88 2f       	mov	r24, r24
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	88 70       	andi	r24, 0x08	; 8
    264c:	90 70       	andi	r25, 0x00	; 0
    264e:	95 95       	asr	r25
    2650:	87 95       	ror	r24
    2652:	95 95       	asr	r25
    2654:	87 95       	ror	r24
    2656:	95 95       	asr	r25
    2658:	87 95       	ror	r24
    265a:	98 2f       	mov	r25, r24
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	66 e0       	ldi	r22, 0x06	; 6
    2660:	49 2f       	mov	r20, r25
    2662:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	a0 e8       	ldi	r26, 0x80	; 128
    266c:	bf e3       	ldi	r27, 0x3F	; 63
    266e:	89 8f       	std	Y+25, r24	; 0x19
    2670:	9a 8f       	std	Y+26, r25	; 0x1a
    2672:	ab 8f       	std	Y+27, r26	; 0x1b
    2674:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2676:	69 8d       	ldd	r22, Y+25	; 0x19
    2678:	7a 8d       	ldd	r23, Y+26	; 0x1a
    267a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    267c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	4a ef       	ldi	r20, 0xFA	; 250
    2684:	54 e4       	ldi	r21, 0x44	; 68
    2686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	8d 8b       	std	Y+21, r24	; 0x15
    2690:	9e 8b       	std	Y+22, r25	; 0x16
    2692:	af 8b       	std	Y+23, r26	; 0x17
    2694:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2696:	6d 89       	ldd	r22, Y+21	; 0x15
    2698:	7e 89       	ldd	r23, Y+22	; 0x16
    269a:	8f 89       	ldd	r24, Y+23	; 0x17
    269c:	98 8d       	ldd	r25, Y+24	; 0x18
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e8       	ldi	r20, 0x80	; 128
    26a4:	5f e3       	ldi	r21, 0x3F	; 63
    26a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26aa:	88 23       	and	r24, r24
    26ac:	2c f4       	brge	.+10     	; 0x26b8 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
    26b6:	3f c0       	rjmp	.+126    	; 0x2736 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    26b8:	6d 89       	ldd	r22, Y+21	; 0x15
    26ba:	7e 89       	ldd	r23, Y+22	; 0x16
    26bc:	8f 89       	ldd	r24, Y+23	; 0x17
    26be:	98 8d       	ldd	r25, Y+24	; 0x18
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	3f ef       	ldi	r19, 0xFF	; 255
    26c4:	4f e7       	ldi	r20, 0x7F	; 127
    26c6:	57 e4       	ldi	r21, 0x47	; 71
    26c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26cc:	18 16       	cp	r1, r24
    26ce:	4c f5       	brge	.+82     	; 0x2722 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d0:	69 8d       	ldd	r22, Y+25	; 0x19
    26d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e2       	ldi	r20, 0x20	; 32
    26de:	51 e4       	ldi	r21, 0x41	; 65
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	9c 8b       	std	Y+20, r25	; 0x14
    26f6:	8b 8b       	std	Y+19, r24	; 0x13
    26f8:	0f c0       	rjmp	.+30     	; 0x2718 <LCD_displayCharacter+0x7be>
    26fa:	88 ec       	ldi	r24, 0xC8	; 200
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	9a 8b       	std	Y+18, r25	; 0x12
    2700:	89 8b       	std	Y+17, r24	; 0x11
    2702:	89 89       	ldd	r24, Y+17	; 0x11
    2704:	9a 89       	ldd	r25, Y+18	; 0x12
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <LCD_displayCharacter+0x7ac>
    270a:	9a 8b       	std	Y+18, r25	; 0x12
    270c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270e:	8b 89       	ldd	r24, Y+19	; 0x13
    2710:	9c 89       	ldd	r25, Y+20	; 0x14
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	9c 8b       	std	Y+20, r25	; 0x14
    2716:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2718:	8b 89       	ldd	r24, Y+19	; 0x13
    271a:	9c 89       	ldd	r25, Y+20	; 0x14
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	69 f7       	brne	.-38     	; 0x26fa <LCD_displayCharacter+0x7a0>
    2720:	14 c0       	rjmp	.+40     	; 0x274a <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2722:	6d 89       	ldd	r22, Y+21	; 0x15
    2724:	7e 89       	ldd	r23, Y+22	; 0x16
    2726:	8f 89       	ldd	r24, Y+23	; 0x17
    2728:	98 8d       	ldd	r25, Y+24	; 0x18
    272a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	9c 8b       	std	Y+20, r25	; 0x14
    2734:	8b 8b       	std	Y+19, r24	; 0x13
    2736:	8b 89       	ldd	r24, Y+19	; 0x13
    2738:	9c 89       	ldd	r25, Y+20	; 0x14
    273a:	98 8b       	std	Y+16, r25	; 0x10
    273c:	8f 87       	std	Y+15, r24	; 0x0f
    273e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2740:	98 89       	ldd	r25, Y+16	; 0x10
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <LCD_displayCharacter+0x7e8>
    2746:	98 8b       	std	Y+16, r25	; 0x10
    2748:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	62 e0       	ldi	r22, 0x02	; 2
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2754:	80 e0       	ldi	r24, 0x00	; 0
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	a0 e8       	ldi	r26, 0x80	; 128
    275a:	bf e3       	ldi	r27, 0x3F	; 63
    275c:	8b 87       	std	Y+11, r24	; 0x0b
    275e:	9c 87       	std	Y+12, r25	; 0x0c
    2760:	ad 87       	std	Y+13, r26	; 0x0d
    2762:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2764:	6b 85       	ldd	r22, Y+11	; 0x0b
    2766:	7c 85       	ldd	r23, Y+12	; 0x0c
    2768:	8d 85       	ldd	r24, Y+13	; 0x0d
    276a:	9e 85       	ldd	r25, Y+14	; 0x0e
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	4a ef       	ldi	r20, 0xFA	; 250
    2772:	54 e4       	ldi	r21, 0x44	; 68
    2774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	8f 83       	std	Y+7, r24	; 0x07
    277e:	98 87       	std	Y+8, r25	; 0x08
    2780:	a9 87       	std	Y+9, r26	; 0x09
    2782:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2784:	6f 81       	ldd	r22, Y+7	; 0x07
    2786:	78 85       	ldd	r23, Y+8	; 0x08
    2788:	89 85       	ldd	r24, Y+9	; 0x09
    278a:	9a 85       	ldd	r25, Y+10	; 0x0a
    278c:	20 e0       	ldi	r18, 0x00	; 0
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	40 e8       	ldi	r20, 0x80	; 128
    2792:	5f e3       	ldi	r21, 0x3F	; 63
    2794:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2798:	88 23       	and	r24, r24
    279a:	2c f4       	brge	.+10     	; 0x27a6 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	9e 83       	std	Y+6, r25	; 0x06
    27a2:	8d 83       	std	Y+5, r24	; 0x05
    27a4:	3f c0       	rjmp	.+126    	; 0x2824 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    27a6:	6f 81       	ldd	r22, Y+7	; 0x07
    27a8:	78 85       	ldd	r23, Y+8	; 0x08
    27aa:	89 85       	ldd	r24, Y+9	; 0x09
    27ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	3f ef       	ldi	r19, 0xFF	; 255
    27b2:	4f e7       	ldi	r20, 0x7F	; 127
    27b4:	57 e4       	ldi	r21, 0x47	; 71
    27b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ba:	18 16       	cp	r1, r24
    27bc:	4c f5       	brge	.+82     	; 0x2810 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27be:	6b 85       	ldd	r22, Y+11	; 0x0b
    27c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27c6:	20 e0       	ldi	r18, 0x00	; 0
    27c8:	30 e0       	ldi	r19, 0x00	; 0
    27ca:	40 e2       	ldi	r20, 0x20	; 32
    27cc:	51 e4       	ldi	r21, 0x41	; 65
    27ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d2:	dc 01       	movw	r26, r24
    27d4:	cb 01       	movw	r24, r22
    27d6:	bc 01       	movw	r22, r24
    27d8:	cd 01       	movw	r24, r26
    27da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	9e 83       	std	Y+6, r25	; 0x06
    27e4:	8d 83       	std	Y+5, r24	; 0x05
    27e6:	0f c0       	rjmp	.+30     	; 0x2806 <LCD_displayCharacter+0x8ac>
    27e8:	88 ec       	ldi	r24, 0xC8	; 200
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	9c 81       	ldd	r25, Y+4	; 0x04
    27f4:	01 97       	sbiw	r24, 0x01	; 1
    27f6:	f1 f7       	brne	.-4      	; 0x27f4 <LCD_displayCharacter+0x89a>
    27f8:	9c 83       	std	Y+4, r25	; 0x04
    27fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27fc:	8d 81       	ldd	r24, Y+5	; 0x05
    27fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2800:	01 97       	sbiw	r24, 0x01	; 1
    2802:	9e 83       	std	Y+6, r25	; 0x06
    2804:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	00 97       	sbiw	r24, 0x00	; 0
    280c:	69 f7       	brne	.-38     	; 0x27e8 <LCD_displayCharacter+0x88e>
    280e:	14 c0       	rjmp	.+40     	; 0x2838 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281c:	dc 01       	movw	r26, r24
    281e:	cb 01       	movw	r24, r22
    2820:	9e 83       	std	Y+6, r25	; 0x06
    2822:	8d 83       	std	Y+5, r24	; 0x05
    2824:	8d 81       	ldd	r24, Y+5	; 0x05
    2826:	9e 81       	ldd	r25, Y+6	; 0x06
    2828:	9a 83       	std	Y+2, r25	; 0x02
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	f1 f7       	brne	.-4      	; 0x2830 <LCD_displayCharacter+0x8d6>
    2834:	9a 83       	std	Y+2, r25	; 0x02
    2836:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif
}
    2838:	cd 59       	subi	r28, 0x9D	; 157
    283a:	df 4f       	sbci	r29, 0xFF	; 255
    283c:	0f b6       	in	r0, 0x3f	; 63
    283e:	f8 94       	cli
    2840:	de bf       	out	0x3e, r29	; 62
    2842:	0f be       	out	0x3f, r0	; 63
    2844:	cd bf       	out	0x3d, r28	; 61
    2846:	cf 91       	pop	r28
    2848:	df 91       	pop	r29
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	08 95       	ret

00002850 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	00 d0       	rcall	.+0      	; 0x2856 <LCD_displayString+0x6>
    2856:	0f 92       	push	r0
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	9b 83       	std	Y+3, r25	; 0x03
    285e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2860:	19 82       	std	Y+1, r1	; 0x01
    2862:	0e c0       	rjmp	.+28     	; 0x2880 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	28 2f       	mov	r18, r24
    2868:	30 e0       	ldi	r19, 0x00	; 0
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	9b 81       	ldd	r25, Y+3	; 0x03
    286e:	fc 01       	movw	r30, r24
    2870:	e2 0f       	add	r30, r18
    2872:	f3 1f       	adc	r31, r19
    2874:	80 81       	ld	r24, Z
    2876:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_displayCharacter>
		i++;
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	8f 5f       	subi	r24, 0xFF	; 255
    287e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2880:	89 81       	ldd	r24, Y+1	; 0x01
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	8a 81       	ldd	r24, Y+2	; 0x02
    2888:	9b 81       	ldd	r25, Y+3	; 0x03
    288a:	fc 01       	movw	r30, r24
    288c:	e2 0f       	add	r30, r18
    288e:	f3 1f       	adc	r31, r19
    2890:	80 81       	ld	r24, Z
    2892:	88 23       	and	r24, r24
    2894:	39 f7       	brne	.-50     	; 0x2864 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	cf 91       	pop	r28
    289e:	df 91       	pop	r29
    28a0:	08 95       	ret

000028a2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    28a2:	df 93       	push	r29
    28a4:	cf 93       	push	r28
    28a6:	00 d0       	rcall	.+0      	; 0x28a8 <LCD_moveCursor+0x6>
    28a8:	00 d0       	rcall	.+0      	; 0x28aa <LCD_moveCursor+0x8>
    28aa:	0f 92       	push	r0
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
    28b0:	8a 83       	std	Y+2, r24	; 0x02
    28b2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    28b4:	8a 81       	ldd	r24, Y+2	; 0x02
    28b6:	28 2f       	mov	r18, r24
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	3d 83       	std	Y+5, r19	; 0x05
    28bc:	2c 83       	std	Y+4, r18	; 0x04
    28be:	8c 81       	ldd	r24, Y+4	; 0x04
    28c0:	9d 81       	ldd	r25, Y+5	; 0x05
    28c2:	81 30       	cpi	r24, 0x01	; 1
    28c4:	91 05       	cpc	r25, r1
    28c6:	c1 f0       	breq	.+48     	; 0x28f8 <LCD_moveCursor+0x56>
    28c8:	2c 81       	ldd	r18, Y+4	; 0x04
    28ca:	3d 81       	ldd	r19, Y+5	; 0x05
    28cc:	22 30       	cpi	r18, 0x02	; 2
    28ce:	31 05       	cpc	r19, r1
    28d0:	2c f4       	brge	.+10     	; 0x28dc <LCD_moveCursor+0x3a>
    28d2:	8c 81       	ldd	r24, Y+4	; 0x04
    28d4:	9d 81       	ldd	r25, Y+5	; 0x05
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	61 f0       	breq	.+24     	; 0x28f2 <LCD_moveCursor+0x50>
    28da:	19 c0       	rjmp	.+50     	; 0x290e <LCD_moveCursor+0x6c>
    28dc:	2c 81       	ldd	r18, Y+4	; 0x04
    28de:	3d 81       	ldd	r19, Y+5	; 0x05
    28e0:	22 30       	cpi	r18, 0x02	; 2
    28e2:	31 05       	cpc	r19, r1
    28e4:	69 f0       	breq	.+26     	; 0x2900 <LCD_moveCursor+0x5e>
    28e6:	8c 81       	ldd	r24, Y+4	; 0x04
    28e8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ea:	83 30       	cpi	r24, 0x03	; 3
    28ec:	91 05       	cpc	r25, r1
    28ee:	61 f0       	breq	.+24     	; 0x2908 <LCD_moveCursor+0x66>
    28f0:	0e c0       	rjmp	.+28     	; 0x290e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    28f2:	8b 81       	ldd	r24, Y+3	; 0x03
    28f4:	89 83       	std	Y+1, r24	; 0x01
    28f6:	0b c0       	rjmp	.+22     	; 0x290e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	80 5c       	subi	r24, 0xC0	; 192
    28fc:	89 83       	std	Y+1, r24	; 0x01
    28fe:	07 c0       	rjmp	.+14     	; 0x290e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2900:	8b 81       	ldd	r24, Y+3	; 0x03
    2902:	80 5f       	subi	r24, 0xF0	; 240
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	03 c0       	rjmp	.+6      	; 0x290e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	80 5b       	subi	r24, 0xB0	; 176
    290c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	80 68       	ori	r24, 0x80	; 128
    2912:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>
}
    2916:	0f 90       	pop	r0
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	0f 90       	pop	r0
    2920:	cf 91       	pop	r28
    2922:	df 91       	pop	r29
    2924:	08 95       	ret

00002926 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2926:	df 93       	push	r29
    2928:	cf 93       	push	r28
    292a:	00 d0       	rcall	.+0      	; 0x292c <LCD_displayStringRowColumn+0x6>
    292c:	00 d0       	rcall	.+0      	; 0x292e <LCD_displayStringRowColumn+0x8>
    292e:	cd b7       	in	r28, 0x3d	; 61
    2930:	de b7       	in	r29, 0x3e	; 62
    2932:	89 83       	std	Y+1, r24	; 0x01
    2934:	6a 83       	std	Y+2, r22	; 0x02
    2936:	5c 83       	std	Y+4, r21	; 0x04
    2938:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	6a 81       	ldd	r22, Y+2	; 0x02
    293e:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2942:	8b 81       	ldd	r24, Y+3	; 0x03
    2944:	9c 81       	ldd	r25, Y+4	; 0x04
    2946:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_displayString>
}
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	0f 90       	pop	r0
    2952:	cf 91       	pop	r28
    2954:	df 91       	pop	r29
    2956:	08 95       	ret

00002958 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(uint32 data)
{
    2958:	df 93       	push	r29
    295a:	cf 93       	push	r28
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	64 97       	sbiw	r28, 0x14	; 20
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	69 8b       	std	Y+17, r22	; 0x11
    296e:	7a 8b       	std	Y+18, r23	; 0x12
    2970:	8b 8b       	std	Y+19, r24	; 0x13
    2972:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ascii result */
   ltoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2974:	89 89       	ldd	r24, Y+17	; 0x11
    2976:	9a 89       	ldd	r25, Y+18	; 0x12
    2978:	ab 89       	ldd	r26, Y+19	; 0x13
    297a:	bc 89       	ldd	r27, Y+20	; 0x14
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	9e 01       	movw	r18, r28
    2982:	2f 5f       	subi	r18, 0xFF	; 255
    2984:	3f 4f       	sbci	r19, 0xFF	; 255
    2986:	a9 01       	movw	r20, r18
    2988:	2a e0       	ldi	r18, 0x0A	; 10
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	0e 94 92 1b 	call	0x3724	; 0x3724 <ltoa>
   LCD_displayString(buff); /* Display the string */
    2990:	ce 01       	movw	r24, r28
    2992:	01 96       	adiw	r24, 0x01	; 1
    2994:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_displayString>
}
    2998:	64 96       	adiw	r28, 0x14	; 20
    299a:	0f b6       	in	r0, 0x3f	; 63
    299c:	f8 94       	cli
    299e:	de bf       	out	0x3e, r29	; 62
    29a0:	0f be       	out	0x3f, r0	; 63
    29a2:	cd bf       	out	0x3d, r28	; 61
    29a4:	cf 91       	pop	r28
    29a6:	df 91       	pop	r29
    29a8:	08 95       	ret

000029aa <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    29aa:	df 93       	push	r29
    29ac:	cf 93       	push	r28
    29ae:	cd b7       	in	r28, 0x3d	; 61
    29b0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>
}
    29b8:	cf 91       	pop	r28
    29ba:	df 91       	pop	r29
    29bc:	08 95       	ret

000029be <main>:

/*******************************************************************************
 *                            Application Layer                                *
 *******************************************************************************/
int main(void)
{
    29be:	df 93       	push	r29
    29c0:	cf 93       	push	r28
    29c2:	cd b7       	in	r28, 0x3d	; 61
    29c4:	de b7       	in	r29, 0x3e	; 62
    29c6:	68 97       	sbiw	r28, 0x18	; 24
    29c8:	0f b6       	in	r0, 0x3f	; 63
    29ca:	f8 94       	cli
    29cc:	de bf       	out	0x3e, r29	; 62
    29ce:	0f be       	out	0x3f, r0	; 63
    29d0:	cd bf       	out	0x3d, r28	; 61
	/* Get the key pressed from the keypad*/
	volatile uint8 key;

	/* Enable Global interrupt */
	SREG |= (1<<7);
    29d2:	af e5       	ldi	r26, 0x5F	; 95
    29d4:	b0 e0       	ldi	r27, 0x00	; 0
    29d6:	ef e5       	ldi	r30, 0x5F	; 95
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	80 81       	ld	r24, Z
    29dc:	80 68       	ori	r24, 0x80	; 128
    29de:	8c 93       	st	X, r24

	/* Initialize the TIMER1 Driver */
	Timer1_ConfigType timerconfig = {0,31250,F_CPU_256,COMPARE};
    29e0:	9e 01       	movw	r18, r28
    29e2:	2e 5f       	subi	r18, 0xFE	; 254
    29e4:	3f 4f       	sbci	r19, 0xFF	; 255
    29e6:	38 8b       	std	Y+16, r19	; 0x10
    29e8:	2f 87       	std	Y+15, r18	; 0x0f
    29ea:	8f ee       	ldi	r24, 0xEF	; 239
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	9a 8b       	std	Y+18, r25	; 0x12
    29f0:	89 8b       	std	Y+17, r24	; 0x11
    29f2:	96 e0       	ldi	r25, 0x06	; 6
    29f4:	9b 8b       	std	Y+19, r25	; 0x13
    29f6:	e9 89       	ldd	r30, Y+17	; 0x11
    29f8:	fa 89       	ldd	r31, Y+18	; 0x12
    29fa:	00 80       	ld	r0, Z
    29fc:	29 89       	ldd	r18, Y+17	; 0x11
    29fe:	3a 89       	ldd	r19, Y+18	; 0x12
    2a00:	2f 5f       	subi	r18, 0xFF	; 255
    2a02:	3f 4f       	sbci	r19, 0xFF	; 255
    2a04:	3a 8b       	std	Y+18, r19	; 0x12
    2a06:	29 8b       	std	Y+17, r18	; 0x11
    2a08:	ef 85       	ldd	r30, Y+15	; 0x0f
    2a0a:	f8 89       	ldd	r31, Y+16	; 0x10
    2a0c:	00 82       	st	Z, r0
    2a0e:	2f 85       	ldd	r18, Y+15	; 0x0f
    2a10:	38 89       	ldd	r19, Y+16	; 0x10
    2a12:	2f 5f       	subi	r18, 0xFF	; 255
    2a14:	3f 4f       	sbci	r19, 0xFF	; 255
    2a16:	38 8b       	std	Y+16, r19	; 0x10
    2a18:	2f 87       	std	Y+15, r18	; 0x0f
    2a1a:	3b 89       	ldd	r19, Y+19	; 0x13
    2a1c:	31 50       	subi	r19, 0x01	; 1
    2a1e:	3b 8b       	std	Y+19, r19	; 0x13
    2a20:	8b 89       	ldd	r24, Y+19	; 0x13
    2a22:	88 23       	and	r24, r24
    2a24:	41 f7       	brne	.-48     	; 0x29f6 <main+0x38>
	Timer1_init(&timerconfig);
    2a26:	ce 01       	movw	r24, r28
    2a28:	02 96       	adiw	r24, 0x02	; 2
    2a2a:	0e 94 9f 19 	call	0x333e	; 0x333e <Timer1_init>
	Timer1_setCallBack(Timer);
    2a2e:	82 e7       	ldi	r24, 0x72	; 114
    2a30:	95 e1       	ldi	r25, 0x15	; 21
    2a32:	0e 94 04 1a 	call	0x3408	; 0x3408 <Timer1_setCallBack>

	/* Initialize the UART Driver */
	UART_ConfigType myconfig ={Eight,Disabled,One,9600};
    2a36:	fe 01       	movw	r30, r28
    2a38:	38 96       	adiw	r30, 0x08	; 8
    2a3a:	fd 8b       	std	Y+21, r31	; 0x15
    2a3c:	ec 8b       	std	Y+20, r30	; 0x14
    2a3e:	2a ee       	ldi	r18, 0xEA	; 234
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	3f 8b       	std	Y+23, r19	; 0x17
    2a44:	2e 8b       	std	Y+22, r18	; 0x16
    2a46:	35 e0       	ldi	r19, 0x05	; 5
    2a48:	38 8f       	std	Y+24, r19	; 0x18
    2a4a:	ee 89       	ldd	r30, Y+22	; 0x16
    2a4c:	ff 89       	ldd	r31, Y+23	; 0x17
    2a4e:	00 80       	ld	r0, Z
    2a50:	2e 89       	ldd	r18, Y+22	; 0x16
    2a52:	3f 89       	ldd	r19, Y+23	; 0x17
    2a54:	2f 5f       	subi	r18, 0xFF	; 255
    2a56:	3f 4f       	sbci	r19, 0xFF	; 255
    2a58:	3f 8b       	std	Y+23, r19	; 0x17
    2a5a:	2e 8b       	std	Y+22, r18	; 0x16
    2a5c:	ec 89       	ldd	r30, Y+20	; 0x14
    2a5e:	fd 89       	ldd	r31, Y+21	; 0x15
    2a60:	00 82       	st	Z, r0
    2a62:	2c 89       	ldd	r18, Y+20	; 0x14
    2a64:	3d 89       	ldd	r19, Y+21	; 0x15
    2a66:	2f 5f       	subi	r18, 0xFF	; 255
    2a68:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6a:	3d 8b       	std	Y+21, r19	; 0x15
    2a6c:	2c 8b       	std	Y+20, r18	; 0x14
    2a6e:	38 8d       	ldd	r19, Y+24	; 0x18
    2a70:	31 50       	subi	r19, 0x01	; 1
    2a72:	38 8f       	std	Y+24, r19	; 0x18
    2a74:	88 8d       	ldd	r24, Y+24	; 0x18
    2a76:	88 23       	and	r24, r24
    2a78:	41 f7       	brne	.-48     	; 0x2a4a <main+0x8c>
	UART_init(&myconfig);
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	08 96       	adiw	r24, 0x08	; 8
    2a7e:	0e 94 16 1a 	call	0x342c	; 0x342c <UART_init>

	/* Initialize the LCD driver */
	LCD_init();
    2a82:	0e 94 80 0a 	call	0x1500	; 0x1500 <LCD_init>

	/* Get the matching password from the user*/
	do {
		Create_pass();
    2a86:	0e 94 7e 15 	call	0x2afc	; 0x2afc <Create_pass>
		Check_pass();
    2a8a:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <Check_pass>
	} while (UART_recieveByte()!= PASS_MATCH);	/* Don't exit until the user enter a matching password*/
    2a8e:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    2a92:	83 30       	cpi	r24, 0x03	; 3
    2a94:	c1 f7       	brne	.-16     	; 0x2a86 <main+0xc8>


	while(1){

		/* Main Options */
		LCD_displayStringRowColumn(0,0,"+ : Open Door");
    2a96:	20 e6       	ldi	r18, 0x60	; 96
    2a98:	30 e0       	ldi	r19, 0x00	; 0
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	a9 01       	movw	r20, r18
    2aa0:	0e 94 93 14 	call	0x2926	; 0x2926 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1,0,"- : Change Pass");
    2aa4:	2e e6       	ldi	r18, 0x6E	; 110
    2aa6:	30 e0       	ldi	r19, 0x00	; 0
    2aa8:	81 e0       	ldi	r24, 0x01	; 1
    2aaa:	60 e0       	ldi	r22, 0x00	; 0
    2aac:	a9 01       	movw	r20, r18
    2aae:	0e 94 93 14 	call	0x2926	; 0x2926 <LCD_displayStringRowColumn>

		/* Get the key pressed from the keypad*/
		key = KEYPAD_getPressedKey();
    2ab2:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <KEYPAD_getPressedKey>
    2ab6:	89 83       	std	Y+1, r24	; 0x01

		switch (key) {
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	e8 2f       	mov	r30, r24
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	fe 87       	std	Y+14, r31	; 0x0e
    2ac0:	ed 87       	std	Y+13, r30	; 0x0d
    2ac2:	2d 85       	ldd	r18, Y+13	; 0x0d
    2ac4:	3e 85       	ldd	r19, Y+14	; 0x0e
    2ac6:	2b 32       	cpi	r18, 0x2B	; 43
    2ac8:	31 05       	cpc	r19, r1
    2aca:	31 f0       	breq	.+12     	; 0x2ad8 <main+0x11a>
    2acc:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ace:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ad0:	8d 32       	cpi	r24, 0x2D	; 45
    2ad2:	91 05       	cpc	r25, r1
    2ad4:	21 f0       	breq	.+8      	; 0x2ade <main+0x120>
    2ad6:	df cf       	rjmp	.-66     	; 0x2a96 <main+0xd8>

		case '+':	/* If User input from keypad: '+', Activate Open Door option */
			Open_Door();
    2ad8:	0e 94 dd 16 	call	0x2dba	; 0x2dba <Open_Door>
    2adc:	dc cf       	rjmp	.-72     	; 0x2a96 <main+0xd8>
			break;
		case '-':/* If User input from keypad: '-', Activate Change pass option */
			Change_Pass();
    2ade:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <Change_Pass>
    2ae2:	d9 cf       	rjmp	.-78     	; 0x2a96 <main+0xd8>

00002ae4 <Timer>:
/*******************************************************************************
 *                             Functions Definitions                           *
 *******************************************************************************/

void Timer(void)
{
    2ae4:	df 93       	push	r29
    2ae6:	cf 93       	push	r28
    2ae8:	cd b7       	in	r28, 0x3d	; 61
    2aea:	de b7       	in	r29, 0x3e	; 62
	g_count++;	/* Increment the counter each second */
    2aec:	80 91 f6 00 	lds	r24, 0x00F6
    2af0:	8f 5f       	subi	r24, 0xFF	; 255
    2af2:	80 93 f6 00 	sts	0x00F6, r24

}
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <Create_pass>:

void Create_pass(void)
{
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	cd b7       	in	r28, 0x3d	; 61
    2b02:	de b7       	in	r29, 0x3e	; 62
    2b04:	61 97       	sbiw	r28, 0x11	; 17
    2b06:	0f b6       	in	r0, 0x3f	; 63
    2b08:	f8 94       	cli
    2b0a:	de bf       	out	0x3e, r29	; 62
    2b0c:	0f be       	out	0x3f, r0	; 63
    2b0e:	cd bf       	out	0x3d, r28	; 61
	/* Get the key pressed from the keypad*/
	volatile uint8 key;
	uint8 i = 0;	/* Counter for each pressed key */
    2b10:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
    2b12:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
    2b16:	8e e7       	ldi	r24, 0x7E	; 126
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_displayString>
	LCD_moveCursor(1,0);
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_moveCursor>
	UART_sendByte(PASS_READY);	/* Call get_pass function in Control_ECU */
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
	while(1)
	{
		key = KEYPAD_getPressedKey();
    2b2c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <KEYPAD_getPressedKey>
    2b30:	88 8b       	std	Y+16, r24	; 0x10
		if(key>=0 && key<=9 && i< MAX_DIGITS )
    2b32:	88 89       	ldd	r24, Y+16	; 0x10
    2b34:	88 89       	ldd	r24, Y+16	; 0x10
    2b36:	8a 30       	cpi	r24, 0x0A	; 10
    2b38:	60 f4       	brcc	.+24     	; 0x2b52 <Create_pass+0x56>
    2b3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b3c:	85 30       	cpi	r24, 0x05	; 5
    2b3e:	48 f4       	brcc	.+18     	; 0x2b52 <Create_pass+0x56>
		{
			UART_sendByte(key);	/* Send each pressed Key to get_pass function */
    2b40:	88 89       	ldd	r24, Y+16	; 0x10
    2b42:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
			LCD_displayCharacter('*');	/* Display '*' for each pressed key */
    2b46:	8a e2       	ldi	r24, 0x2A	; 42
    2b48:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_displayCharacter>
			i++;
    2b4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b4e:	8f 5f       	subi	r24, 0xFF	; 255
    2b50:	8f 87       	std	Y+15, r24	; 0x0f

		}

		if(key == ENTER)	/* User entered specified Enter key  */
    2b52:	88 89       	ldd	r24, Y+16	; 0x10
    2b54:	8d 30       	cpi	r24, 0x0D	; 13
    2b56:	71 f4       	brne	.+28     	; 0x2b74 <Create_pass+0x78>
		{
			LCD_clearScreen(); /* Clear LCD screen each successful operation */
    2b58:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_clearScreen>
			UART_sendByte('#');	/* Tell Control_ECU to terminate get_pass function */
    2b5c:	83 e2       	ldi	r24, 0x23	; 35
    2b5e:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
			break;
		}
		_delay_ms(550); /* Get pressed key each 550ms */

	}
}
    2b62:	61 96       	adiw	r28, 0x11	; 17
    2b64:	0f b6       	in	r0, 0x3f	; 63
    2b66:	f8 94       	cli
    2b68:	de bf       	out	0x3e, r29	; 62
    2b6a:	0f be       	out	0x3f, r0	; 63
    2b6c:	cd bf       	out	0x3d, r28	; 61
    2b6e:	cf 91       	pop	r28
    2b70:	df 91       	pop	r29
    2b72:	08 95       	ret
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e8       	ldi	r25, 0x80	; 128
    2b78:	a9 e0       	ldi	r26, 0x09	; 9
    2b7a:	b4 e4       	ldi	r27, 0x44	; 68
    2b7c:	8b 87       	std	Y+11, r24	; 0x0b
    2b7e:	9c 87       	std	Y+12, r25	; 0x0c
    2b80:	ad 87       	std	Y+13, r26	; 0x0d
    2b82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	4a ef       	ldi	r20, 0xFA	; 250
    2b92:	54 e4       	ldi	r21, 0x44	; 68
    2b94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b98:	dc 01       	movw	r26, r24
    2b9a:	cb 01       	movw	r24, r22
    2b9c:	8f 83       	std	Y+7, r24	; 0x07
    2b9e:	98 87       	std	Y+8, r25	; 0x08
    2ba0:	a9 87       	std	Y+9, r26	; 0x09
    2ba2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ba4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ba6:	78 85       	ldd	r23, Y+8	; 0x08
    2ba8:	89 85       	ldd	r24, Y+9	; 0x09
    2baa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bac:	20 e0       	ldi	r18, 0x00	; 0
    2bae:	30 e0       	ldi	r19, 0x00	; 0
    2bb0:	40 e8       	ldi	r20, 0x80	; 128
    2bb2:	5f e3       	ldi	r21, 0x3F	; 63
    2bb4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bb8:	88 23       	and	r24, r24
    2bba:	2c f4       	brge	.+10     	; 0x2bc6 <Create_pass+0xca>
		__ticks = 1;
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9e 83       	std	Y+6, r25	; 0x06
    2bc2:	8d 83       	std	Y+5, r24	; 0x05
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <Create_pass+0x148>
	else if (__tmp > 65535)
    2bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2bc8:	78 85       	ldd	r23, Y+8	; 0x08
    2bca:	89 85       	ldd	r24, Y+9	; 0x09
    2bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	3f ef       	ldi	r19, 0xFF	; 255
    2bd2:	4f e7       	ldi	r20, 0x7F	; 127
    2bd4:	57 e4       	ldi	r21, 0x47	; 71
    2bd6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bda:	18 16       	cp	r1, r24
    2bdc:	4c f5       	brge	.+82     	; 0x2c30 <Create_pass+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2be0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2be2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2be4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	30 e0       	ldi	r19, 0x00	; 0
    2bea:	40 e2       	ldi	r20, 0x20	; 32
    2bec:	51 e4       	ldi	r21, 0x41	; 65
    2bee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	bc 01       	movw	r22, r24
    2bf8:	cd 01       	movw	r24, r26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9e 83       	std	Y+6, r25	; 0x06
    2c04:	8d 83       	std	Y+5, r24	; 0x05
    2c06:	0f c0       	rjmp	.+30     	; 0x2c26 <Create_pass+0x12a>
    2c08:	88 ec       	ldi	r24, 0xC8	; 200
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	9c 83       	std	Y+4, r25	; 0x04
    2c0e:	8b 83       	std	Y+3, r24	; 0x03
    2c10:	8b 81       	ldd	r24, Y+3	; 0x03
    2c12:	9c 81       	ldd	r25, Y+4	; 0x04
    2c14:	01 97       	sbiw	r24, 0x01	; 1
    2c16:	f1 f7       	brne	.-4      	; 0x2c14 <Create_pass+0x118>
    2c18:	9c 83       	std	Y+4, r25	; 0x04
    2c1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2c1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2c20:	01 97       	sbiw	r24, 0x01	; 1
    2c22:	9e 83       	std	Y+6, r25	; 0x06
    2c24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c26:	8d 81       	ldd	r24, Y+5	; 0x05
    2c28:	9e 81       	ldd	r25, Y+6	; 0x06
    2c2a:	00 97       	sbiw	r24, 0x00	; 0
    2c2c:	69 f7       	brne	.-38     	; 0x2c08 <Create_pass+0x10c>
    2c2e:	7e cf       	rjmp	.-260    	; 0x2b2c <Create_pass+0x30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c30:	6f 81       	ldd	r22, Y+7	; 0x07
    2c32:	78 85       	ldd	r23, Y+8	; 0x08
    2c34:	89 85       	ldd	r24, Y+9	; 0x09
    2c36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9e 83       	std	Y+6, r25	; 0x06
    2c42:	8d 83       	std	Y+5, r24	; 0x05
    2c44:	8d 81       	ldd	r24, Y+5	; 0x05
    2c46:	9e 81       	ldd	r25, Y+6	; 0x06
    2c48:	9a 83       	std	Y+2, r25	; 0x02
    2c4a:	89 83       	std	Y+1, r24	; 0x01
    2c4c:	89 81       	ldd	r24, Y+1	; 0x01
    2c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c50:	01 97       	sbiw	r24, 0x01	; 1
    2c52:	f1 f7       	brne	.-4      	; 0x2c50 <Create_pass+0x154>
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	69 cf       	rjmp	.-302    	; 0x2b2c <Create_pass+0x30>

00002c5a <Check_pass>:

void Check_pass(void)
{
    2c5a:	df 93       	push	r29
    2c5c:	cf 93       	push	r28
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	61 97       	sbiw	r28, 0x11	; 17
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
	/* Get the key pressed from the keypad*/
	volatile uint8 key;
	uint8 i = 0;	/* Counter for each pressed key */
    2c6e:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_displayString("plz re-enter the");
    2c70:	8e e8       	ldi	r24, 0x8E	; 142
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"same pass: ");
    2c78:	2f e9       	ldi	r18, 0x9F	; 159
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	81 e0       	ldi	r24, 0x01	; 1
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	a9 01       	movw	r20, r18
    2c82:	0e 94 93 14 	call	0x2926	; 0x2926 <LCD_displayStringRowColumn>
	UART_sendByte(PASS_CHECK);	/* Call Check_pass function in Control_ECU */
    2c86:	82 e0       	ldi	r24, 0x02	; 2
    2c88:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>

	while(1)
	{
		key = KEYPAD_getPressedKey();
    2c8c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <KEYPAD_getPressedKey>
    2c90:	88 8b       	std	Y+16, r24	; 0x10

		if(key>=0 && key<=9 && i < MAX_DIGITS )
    2c92:	88 89       	ldd	r24, Y+16	; 0x10
    2c94:	88 89       	ldd	r24, Y+16	; 0x10
    2c96:	8a 30       	cpi	r24, 0x0A	; 10
    2c98:	60 f4       	brcc	.+24     	; 0x2cb2 <Check_pass+0x58>
    2c9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c9c:	85 30       	cpi	r24, 0x05	; 5
    2c9e:	48 f4       	brcc	.+18     	; 0x2cb2 <Check_pass+0x58>
		{
			UART_sendByte(key);	/* Send each pressed Key to get_pass function */
    2ca0:	88 89       	ldd	r24, Y+16	; 0x10
    2ca2:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
			LCD_displayCharacter('*');	/* Display '*' for each pressed key */
    2ca6:	8a e2       	ldi	r24, 0x2A	; 42
    2ca8:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_displayCharacter>
			i++;
    2cac:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cae:	8f 5f       	subi	r24, 0xFF	; 255
    2cb0:	8f 87       	std	Y+15, r24	; 0x0f
		}

		if(key == ENTER)	/* User entered specified Enter key  */
    2cb2:	88 89       	ldd	r24, Y+16	; 0x10
    2cb4:	8d 30       	cpi	r24, 0x0D	; 13
    2cb6:	71 f4       	brne	.+28     	; 0x2cd4 <Check_pass+0x7a>
		{
			LCD_clearScreen();	/* Clear LCD screen each successful operation */
    2cb8:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_clearScreen>
			UART_sendByte('#');	/* Tell Control_ECU to terminate Check_pass function */
    2cbc:	83 e2       	ldi	r24, 0x23	; 35
    2cbe:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
		}

		_delay_ms(550); /* Get pressed key each 550ms */
	}

}
    2cc2:	61 96       	adiw	r28, 0x11	; 17
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	de bf       	out	0x3e, r29	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	cd bf       	out	0x3d, r28	; 61
    2cce:	cf 91       	pop	r28
    2cd0:	df 91       	pop	r29
    2cd2:	08 95       	ret
		}

		if(key == ENTER)	/* User entered specified Enter key  */
		{
			LCD_clearScreen();	/* Clear LCD screen each successful operation */
			UART_sendByte('#');	/* Tell Control_ECU to terminate Check_pass function */
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e8       	ldi	r25, 0x80	; 128
    2cd8:	a9 e0       	ldi	r26, 0x09	; 9
    2cda:	b4 e4       	ldi	r27, 0x44	; 68
    2cdc:	8b 87       	std	Y+11, r24	; 0x0b
    2cde:	9c 87       	std	Y+12, r25	; 0x0c
    2ce0:	ad 87       	std	Y+13, r26	; 0x0d
    2ce2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ce4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cea:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	4a ef       	ldi	r20, 0xFA	; 250
    2cf2:	54 e4       	ldi	r21, 0x44	; 68
    2cf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	cb 01       	movw	r24, r22
    2cfc:	8f 83       	std	Y+7, r24	; 0x07
    2cfe:	98 87       	std	Y+8, r25	; 0x08
    2d00:	a9 87       	std	Y+9, r26	; 0x09
    2d02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d04:	6f 81       	ldd	r22, Y+7	; 0x07
    2d06:	78 85       	ldd	r23, Y+8	; 0x08
    2d08:	89 85       	ldd	r24, Y+9	; 0x09
    2d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	40 e8       	ldi	r20, 0x80	; 128
    2d12:	5f e3       	ldi	r21, 0x3F	; 63
    2d14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d18:	88 23       	and	r24, r24
    2d1a:	2c f4       	brge	.+10     	; 0x2d26 <Check_pass+0xcc>
		__ticks = 1;
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	90 e0       	ldi	r25, 0x00	; 0
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	3f c0       	rjmp	.+126    	; 0x2da4 <Check_pass+0x14a>
	else if (__tmp > 65535)
    2d26:	6f 81       	ldd	r22, Y+7	; 0x07
    2d28:	78 85       	ldd	r23, Y+8	; 0x08
    2d2a:	89 85       	ldd	r24, Y+9	; 0x09
    2d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d2e:	20 e0       	ldi	r18, 0x00	; 0
    2d30:	3f ef       	ldi	r19, 0xFF	; 255
    2d32:	4f e7       	ldi	r20, 0x7F	; 127
    2d34:	57 e4       	ldi	r21, 0x47	; 71
    2d36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d3a:	18 16       	cp	r1, r24
    2d3c:	4c f5       	brge	.+82     	; 0x2d90 <Check_pass+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d40:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	40 e2       	ldi	r20, 0x20	; 32
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d52:	dc 01       	movw	r26, r24
    2d54:	cb 01       	movw	r24, r22
    2d56:	bc 01       	movw	r22, r24
    2d58:	cd 01       	movw	r24, r26
    2d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	9e 83       	std	Y+6, r25	; 0x06
    2d64:	8d 83       	std	Y+5, r24	; 0x05
    2d66:	0f c0       	rjmp	.+30     	; 0x2d86 <Check_pass+0x12c>
    2d68:	88 ec       	ldi	r24, 0xC8	; 200
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	9c 83       	std	Y+4, r25	; 0x04
    2d6e:	8b 83       	std	Y+3, r24	; 0x03
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	9c 81       	ldd	r25, Y+4	; 0x04
    2d74:	01 97       	sbiw	r24, 0x01	; 1
    2d76:	f1 f7       	brne	.-4      	; 0x2d74 <Check_pass+0x11a>
    2d78:	9c 83       	std	Y+4, r25	; 0x04
    2d7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d7c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d7e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d80:	01 97       	sbiw	r24, 0x01	; 1
    2d82:	9e 83       	std	Y+6, r25	; 0x06
    2d84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d86:	8d 81       	ldd	r24, Y+5	; 0x05
    2d88:	9e 81       	ldd	r25, Y+6	; 0x06
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	69 f7       	brne	.-38     	; 0x2d68 <Check_pass+0x10e>
    2d8e:	7e cf       	rjmp	.-260    	; 0x2c8c <Check_pass+0x32>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d90:	6f 81       	ldd	r22, Y+7	; 0x07
    2d92:	78 85       	ldd	r23, Y+8	; 0x08
    2d94:	89 85       	ldd	r24, Y+9	; 0x09
    2d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	9e 83       	std	Y+6, r25	; 0x06
    2da2:	8d 83       	std	Y+5, r24	; 0x05
    2da4:	8d 81       	ldd	r24, Y+5	; 0x05
    2da6:	9e 81       	ldd	r25, Y+6	; 0x06
    2da8:	9a 83       	std	Y+2, r25	; 0x02
    2daa:	89 83       	std	Y+1, r24	; 0x01
    2dac:	89 81       	ldd	r24, Y+1	; 0x01
    2dae:	9a 81       	ldd	r25, Y+2	; 0x02
    2db0:	01 97       	sbiw	r24, 0x01	; 1
    2db2:	f1 f7       	brne	.-4      	; 0x2db0 <Check_pass+0x156>
    2db4:	9a 83       	std	Y+2, r25	; 0x02
    2db6:	89 83       	std	Y+1, r24	; 0x01
    2db8:	69 cf       	rjmp	.-302    	; 0x2c8c <Check_pass+0x32>

00002dba <Open_Door>:
	}

}

void Open_Door(void)
{
    2dba:	df 93       	push	r29
    2dbc:	cf 93       	push	r28
    2dbe:	cd b7       	in	r28, 0x3d	; 61
    2dc0:	de b7       	in	r29, 0x3e	; 62
    2dc2:	63 97       	sbiw	r28, 0x13	; 19
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
	/* Get the key pressed from the keypad*/
	volatile uint8 key;
	uint8 i = 0;	/* Counter for each pressed key */
    2dce:	1f 86       	std	Y+15, r1	; 0x0f

	LCD_clearScreen();
    2dd0:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
    2dd4:	8e e7       	ldi	r24, 0x7E	; 126
    2dd6:	90 e0       	ldi	r25, 0x00	; 0
    2dd8:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_displayString>
	LCD_moveCursor(1,0);
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	60 e0       	ldi	r22, 0x00	; 0
    2de0:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_moveCursor>
	UART_sendByte(OPEN_DOOR);	/* Call Open_Door function in Control_ECU */
    2de4:	84 e0       	ldi	r24, 0x04	; 4
    2de6:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>

	while(1)
	{
		key = KEYPAD_getPressedKey();
    2dea:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <KEYPAD_getPressedKey>
    2dee:	88 8b       	std	Y+16, r24	; 0x10

		if(key>=0 && key<=9 && i<MAX_DIGITS )
    2df0:	28 89       	ldd	r18, Y+16	; 0x10
    2df2:	88 89       	ldd	r24, Y+16	; 0x10
    2df4:	8a 30       	cpi	r24, 0x0A	; 10
    2df6:	60 f4       	brcc	.+24     	; 0x2e10 <Open_Door+0x56>
    2df8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dfa:	85 30       	cpi	r24, 0x05	; 5
    2dfc:	48 f4       	brcc	.+18     	; 0x2e10 <Open_Door+0x56>
		{
			UART_sendByte(key);	/* Send each pressed Key to Check_pass function */
    2dfe:	88 89       	ldd	r24, Y+16	; 0x10
    2e00:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
			LCD_displayCharacter('*');	/* Display '*' for each pressed key */
    2e04:	8a e2       	ldi	r24, 0x2A	; 42
    2e06:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_displayCharacter>
			i++;
    2e0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e0c:	8f 5f       	subi	r24, 0xFF	; 255
    2e0e:	8f 87       	std	Y+15, r24	; 0x0f

		}

		if(key == ENTER)	/* User entered specified Enter key  */
    2e10:	88 89       	ldd	r24, Y+16	; 0x10
    2e12:	8d 30       	cpi	r24, 0x0D	; 13
    2e14:	09 f0       	breq	.+2      	; 0x2e18 <Open_Door+0x5e>
    2e16:	42 c0       	rjmp	.+132    	; 0x2e9c <Open_Door+0xe2>
		{
			LCD_clearScreen();	/* Clear LCD screen each successful operation */
    2e18:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_clearScreen>
			UART_sendByte('#');	/* Tell Control_ECU to terminate Open_Door function */
    2e1c:	83 e2       	ldi	r24, 0x23	; 35
    2e1e:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>

			switch( UART_recieveByte() ){ 	/* Receive byte from Control_ECU */
    2e22:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    2e26:	28 2f       	mov	r18, r24
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	3a 8b       	std	Y+18, r19	; 0x12
    2e2c:	29 8b       	std	Y+17, r18	; 0x11
    2e2e:	89 89       	ldd	r24, Y+17	; 0x11
    2e30:	9a 89       	ldd	r25, Y+18	; 0x12
    2e32:	8c 30       	cpi	r24, 0x0C	; 12
    2e34:	91 05       	cpc	r25, r1
    2e36:	59 f0       	breq	.+22     	; 0x2e4e <Open_Door+0x94>
    2e38:	29 89       	ldd	r18, Y+17	; 0x11
    2e3a:	3a 89       	ldd	r19, Y+18	; 0x12
    2e3c:	2e 30       	cpi	r18, 0x0E	; 14
    2e3e:	31 05       	cpc	r19, r1
    2e40:	51 f1       	breq	.+84     	; 0x2e96 <Open_Door+0xdc>
    2e42:	89 89       	ldd	r24, Y+17	; 0x11
    2e44:	9a 89       	ldd	r25, Y+18	; 0x12
    2e46:	83 30       	cpi	r24, 0x03	; 3
    2e48:	91 05       	cpc	r25, r1
    2e4a:	71 f0       	breq	.+28     	; 0x2e68 <Open_Door+0xae>
    2e4c:	27 c0       	rjmp	.+78     	; 0x2e9c <Open_Door+0xe2>

			case NO_MATCH :	/* If input password != Stored password in eeporm */
				i = 0;
    2e4e:	1f 86       	std	Y+15, r1	; 0x0f
				LCD_displayString("plz enter pass:");
    2e50:	8e e7       	ldi	r24, 0x7E	; 126
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_displayString>
				LCD_moveCursor(1,0);
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	60 e0       	ldi	r22, 0x00	; 0
    2e5c:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_moveCursor>
				UART_sendByte(OPEN_DOOR);	/* Recall Open_Door function n Control_ECU */
    2e60:	84 e0       	ldi	r24, 0x04	; 4
    2e62:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
    2e66:	1a c0       	rjmp	.+52     	; 0x2e9c <Open_Door+0xe2>
				break; /* Break from the loop, To re-enter the password */

			case PASS_MATCH : /* If input password == Stored password in eeporm */

				g_count=0;	/*	Reset the timer, To count the Displayed message*/
    2e68:	10 92 f6 00 	sts	0x00F6, r1
				LCD_clearScreen();
    2e6c:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_clearScreen>
				LCD_displayString("Door: Unlocking");
    2e70:	8b ea       	ldi	r24, 0xAB	; 171
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_displayString>
				while(g_count <= UNLOCKING_TIME);	/* Wait until the g_count reaches the end of Unlocking_time */
    2e78:	80 91 f6 00 	lds	r24, 0x00F6
    2e7c:	83 31       	cpi	r24, 0x13	; 19
    2e7e:	e0 f3       	brcs	.-8      	; 0x2e78 <Open_Door+0xbe>
				LCD_clearScreen();
    2e80:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_clearScreen>
				LCD_displayString("Door: locking");	/* Wait until the g_count reaches the end of locking_time */
    2e84:	8b eb       	ldi	r24, 0xBB	; 187
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_displayString>
				while(g_count <= LOCKING_TIME);
    2e8c:	80 91 f6 00 	lds	r24, 0x00F6
    2e90:	82 32       	cpi	r24, 0x22	; 34
    2e92:	e0 f3       	brcs	.-8      	; 0x2e8c <Open_Door+0xd2>
    2e94:	76 c0       	rjmp	.+236    	; 0x2f82 <Open_Door+0x1c8>
				return; /* Exist from the function and return to the Main options */

			case SYSTEM_LOCKED:	/* If the User input the wrong password 3-times in a row */
				Theft_alert(); /* Activate the Security system */
    2e96:	0e 94 1d 19 	call	0x323a	; 0x323a <Theft_alert>
    2e9a:	73 c0       	rjmp	.+230    	; 0x2f82 <Open_Door+0x1c8>
				return;	/* Exist from the function and return to the Main options */
    2e9c:	80 e0       	ldi	r24, 0x00	; 0
    2e9e:	90 e8       	ldi	r25, 0x80	; 128
    2ea0:	a9 e0       	ldi	r26, 0x09	; 9
    2ea2:	b4 e4       	ldi	r27, 0x44	; 68
    2ea4:	8b 87       	std	Y+11, r24	; 0x0b
    2ea6:	9c 87       	std	Y+12, r25	; 0x0c
    2ea8:	ad 87       	std	Y+13, r26	; 0x0d
    2eaa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eac:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eae:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb0:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb2:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	4a ef       	ldi	r20, 0xFA	; 250
    2eba:	54 e4       	ldi	r21, 0x44	; 68
    2ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	8f 83       	std	Y+7, r24	; 0x07
    2ec6:	98 87       	std	Y+8, r25	; 0x08
    2ec8:	a9 87       	std	Y+9, r26	; 0x09
    2eca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ecc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ece:	78 85       	ldd	r23, Y+8	; 0x08
    2ed0:	89 85       	ldd	r24, Y+9	; 0x09
    2ed2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	40 e8       	ldi	r20, 0x80	; 128
    2eda:	5f e3       	ldi	r21, 0x3F	; 63
    2edc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ee0:	88 23       	and	r24, r24
    2ee2:	2c f4       	brge	.+10     	; 0x2eee <Open_Door+0x134>
		__ticks = 1;
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	90 e0       	ldi	r25, 0x00	; 0
    2ee8:	9e 83       	std	Y+6, r25	; 0x06
    2eea:	8d 83       	std	Y+5, r24	; 0x05
    2eec:	3f c0       	rjmp	.+126    	; 0x2f6c <Open_Door+0x1b2>
	else if (__tmp > 65535)
    2eee:	6f 81       	ldd	r22, Y+7	; 0x07
    2ef0:	78 85       	ldd	r23, Y+8	; 0x08
    2ef2:	89 85       	ldd	r24, Y+9	; 0x09
    2ef4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef6:	20 e0       	ldi	r18, 0x00	; 0
    2ef8:	3f ef       	ldi	r19, 0xFF	; 255
    2efa:	4f e7       	ldi	r20, 0x7F	; 127
    2efc:	57 e4       	ldi	r21, 0x47	; 71
    2efe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f02:	18 16       	cp	r1, r24
    2f04:	4c f5       	brge	.+82     	; 0x2f58 <Open_Door+0x19e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 e0       	ldi	r19, 0x00	; 0
    2f12:	40 e2       	ldi	r20, 0x20	; 32
    2f14:	51 e4       	ldi	r21, 0x41	; 65
    2f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	9e 83       	std	Y+6, r25	; 0x06
    2f2c:	8d 83       	std	Y+5, r24	; 0x05
    2f2e:	0f c0       	rjmp	.+30     	; 0x2f4e <Open_Door+0x194>
    2f30:	88 ec       	ldi	r24, 0xC8	; 200
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	9c 83       	std	Y+4, r25	; 0x04
    2f36:	8b 83       	std	Y+3, r24	; 0x03
    2f38:	8b 81       	ldd	r24, Y+3	; 0x03
    2f3a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f3c:	01 97       	sbiw	r24, 0x01	; 1
    2f3e:	f1 f7       	brne	.-4      	; 0x2f3c <Open_Door+0x182>
    2f40:	9c 83       	std	Y+4, r25	; 0x04
    2f42:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f44:	8d 81       	ldd	r24, Y+5	; 0x05
    2f46:	9e 81       	ldd	r25, Y+6	; 0x06
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	9e 83       	std	Y+6, r25	; 0x06
    2f4c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f50:	9e 81       	ldd	r25, Y+6	; 0x06
    2f52:	00 97       	sbiw	r24, 0x00	; 0
    2f54:	69 f7       	brne	.-38     	; 0x2f30 <Open_Door+0x176>
    2f56:	49 cf       	rjmp	.-366    	; 0x2dea <Open_Door+0x30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f58:	6f 81       	ldd	r22, Y+7	; 0x07
    2f5a:	78 85       	ldd	r23, Y+8	; 0x08
    2f5c:	89 85       	ldd	r24, Y+9	; 0x09
    2f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	9a 83       	std	Y+2, r25	; 0x02
    2f72:	89 83       	std	Y+1, r24	; 0x01
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	9a 81       	ldd	r25, Y+2	; 0x02
    2f78:	01 97       	sbiw	r24, 0x01	; 1
    2f7a:	f1 f7       	brne	.-4      	; 0x2f78 <Open_Door+0x1be>
    2f7c:	9a 83       	std	Y+2, r25	; 0x02
    2f7e:	89 83       	std	Y+1, r24	; 0x01
    2f80:	34 cf       	rjmp	.-408    	; 0x2dea <Open_Door+0x30>

		_delay_ms(550);	/* Get pressed key each 550ms */
	}


}
    2f82:	63 96       	adiw	r28, 0x13	; 19
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <Change_Pass>:

void Change_Pass(void)
{
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	a1 97       	sbiw	r28, 0x21	; 33
    2f9e:	0f b6       	in	r0, 0x3f	; 63
    2fa0:	f8 94       	cli
    2fa2:	de bf       	out	0x3e, r29	; 62
    2fa4:	0f be       	out	0x3f, r0	; 63
    2fa6:	cd bf       	out	0x3d, r28	; 61
	/* Get the key pressed from the keypad*/
	volatile uint8 key;
	uint8 i = 0;	/* Counter for each pressed key */
    2fa8:	1d 8e       	std	Y+29, r1	; 0x1d

	LCD_clearScreen();
    2faa:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_clearScreen>
	LCD_displayString("plz enter pass:");
    2fae:	8e e7       	ldi	r24, 0x7E	; 126
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_displayString>
	LCD_moveCursor(1,0);
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_moveCursor>
	UART_sendByte(PASS_CHECK);	/* Call Check_pass function in Control_ECU */
    2fbe:	82 e0       	ldi	r24, 0x02	; 2
    2fc0:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>

	while(1)
	{
		key = KEYPAD_getPressedKey();
    2fc4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <KEYPAD_getPressedKey>
    2fc8:	8e 8f       	std	Y+30, r24	; 0x1e

		if(key>=0 && key<=9 && i<MAX_DIGITS )
    2fca:	2e 8d       	ldd	r18, Y+30	; 0x1e
    2fcc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fce:	8a 30       	cpi	r24, 0x0A	; 10
    2fd0:	60 f4       	brcc	.+24     	; 0x2fea <Change_Pass+0x56>
    2fd2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fd4:	85 30       	cpi	r24, 0x05	; 5
    2fd6:	48 f4       	brcc	.+18     	; 0x2fea <Change_Pass+0x56>
		{
			UART_sendByte(key);	/* Send each pressed Key to Check_pass function */
    2fd8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fda:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
			LCD_displayCharacter('*');	/* Display '*' for each pressed key */
    2fde:	8a e2       	ldi	r24, 0x2A	; 42
    2fe0:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <LCD_displayCharacter>
			i++;
    2fe4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2fe6:	8f 5f       	subi	r24, 0xFF	; 255
    2fe8:	8d 8f       	std	Y+29, r24	; 0x1d

		}

		if(key == ENTER)	/* User entered specified Enter key  */
    2fea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2fec:	8d 30       	cpi	r24, 0x0D	; 13
    2fee:	09 f0       	breq	.+2      	; 0x2ff2 <Change_Pass+0x5e>
    2ff0:	a8 c0       	rjmp	.+336    	; 0x3142 <Change_Pass+0x1ae>
		{
			LCD_clearScreen();	/* Clear LCD screen each successful operation */
    2ff2:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_clearScreen>
			UART_sendByte('#');	/* Tell Control_ECU to terminate Check_pass function */
    2ff6:	83 e2       	ldi	r24, 0x23	; 35
    2ff8:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>

			switch( UART_recieveByte() ){	/* Receive byte from Control_ECU */
    2ffc:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    3000:	28 2f       	mov	r18, r24
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	38 a3       	std	Y+32, r19	; 0x20
    3006:	2f 8f       	std	Y+31, r18	; 0x1f
    3008:	8f 8d       	ldd	r24, Y+31	; 0x1f
    300a:	98 a1       	ldd	r25, Y+32	; 0x20
    300c:	8c 30       	cpi	r24, 0x0C	; 12
    300e:	91 05       	cpc	r25, r1
    3010:	61 f0       	breq	.+24     	; 0x302a <Change_Pass+0x96>
    3012:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3014:	38 a1       	ldd	r19, Y+32	; 0x20
    3016:	2e 30       	cpi	r18, 0x0E	; 14
    3018:	31 05       	cpc	r19, r1
    301a:	09 f4       	brne	.+2      	; 0x301e <Change_Pass+0x8a>
    301c:	8f c0       	rjmp	.+286    	; 0x313c <Change_Pass+0x1a8>
    301e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3020:	98 a1       	ldd	r25, Y+32	; 0x20
    3022:	83 30       	cpi	r24, 0x03	; 3
    3024:	91 05       	cpc	r25, r1
    3026:	71 f0       	breq	.+28     	; 0x3044 <Change_Pass+0xb0>
    3028:	8c c0       	rjmp	.+280    	; 0x3142 <Change_Pass+0x1ae>

			case NO_MATCH :	/* If input password != Stored password in eeporm */
				i = 0;
    302a:	1d 8e       	std	Y+29, r1	; 0x1d
				LCD_displayString("plz enter pass:");
    302c:	8e e7       	ldi	r24, 0x7E	; 126
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_displayString>
				LCD_moveCursor(1,0);
    3034:	81 e0       	ldi	r24, 0x01	; 1
    3036:	60 e0       	ldi	r22, 0x00	; 0
    3038:	0e 94 51 14 	call	0x28a2	; 0x28a2 <LCD_moveCursor>
				UART_sendByte(PASS_CHECK);	/* Recall Check_pass function n Control_ECU */
    303c:	82 e0       	ldi	r24, 0x02	; 2
    303e:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
    3042:	7f c0       	rjmp	.+254    	; 0x3142 <Change_Pass+0x1ae>
				break;	/* Break from the loop, To re-enter the password */
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	a8 ec       	ldi	r26, 0xC8	; 200
    304a:	b2 e4       	ldi	r27, 0x42	; 66
    304c:	89 8f       	std	Y+25, r24	; 0x19
    304e:	9a 8f       	std	Y+26, r25	; 0x1a
    3050:	ab 8f       	std	Y+27, r26	; 0x1b
    3052:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3054:	69 8d       	ldd	r22, Y+25	; 0x19
    3056:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3058:	8b 8d       	ldd	r24, Y+27	; 0x1b
    305a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	4a ef       	ldi	r20, 0xFA	; 250
    3062:	54 e4       	ldi	r21, 0x44	; 68
    3064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	8d 8b       	std	Y+21, r24	; 0x15
    306e:	9e 8b       	std	Y+22, r25	; 0x16
    3070:	af 8b       	std	Y+23, r26	; 0x17
    3072:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3074:	6d 89       	ldd	r22, Y+21	; 0x15
    3076:	7e 89       	ldd	r23, Y+22	; 0x16
    3078:	8f 89       	ldd	r24, Y+23	; 0x17
    307a:	98 8d       	ldd	r25, Y+24	; 0x18
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	40 e8       	ldi	r20, 0x80	; 128
    3082:	5f e3       	ldi	r21, 0x3F	; 63
    3084:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3088:	88 23       	and	r24, r24
    308a:	2c f4       	brge	.+10     	; 0x3096 <Change_Pass+0x102>
		__ticks = 1;
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	9c 8b       	std	Y+20, r25	; 0x14
    3092:	8b 8b       	std	Y+19, r24	; 0x13
    3094:	3f c0       	rjmp	.+126    	; 0x3114 <Change_Pass+0x180>
	else if (__tmp > 65535)
    3096:	6d 89       	ldd	r22, Y+21	; 0x15
    3098:	7e 89       	ldd	r23, Y+22	; 0x16
    309a:	8f 89       	ldd	r24, Y+23	; 0x17
    309c:	98 8d       	ldd	r25, Y+24	; 0x18
    309e:	20 e0       	ldi	r18, 0x00	; 0
    30a0:	3f ef       	ldi	r19, 0xFF	; 255
    30a2:	4f e7       	ldi	r20, 0x7F	; 127
    30a4:	57 e4       	ldi	r21, 0x47	; 71
    30a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30aa:	18 16       	cp	r1, r24
    30ac:	4c f5       	brge	.+82     	; 0x3100 <Change_Pass+0x16c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ae:	69 8d       	ldd	r22, Y+25	; 0x19
    30b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b6:	20 e0       	ldi	r18, 0x00	; 0
    30b8:	30 e0       	ldi	r19, 0x00	; 0
    30ba:	40 e2       	ldi	r20, 0x20	; 32
    30bc:	51 e4       	ldi	r21, 0x41	; 65
    30be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c2:	dc 01       	movw	r26, r24
    30c4:	cb 01       	movw	r24, r22
    30c6:	bc 01       	movw	r22, r24
    30c8:	cd 01       	movw	r24, r26
    30ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30ce:	dc 01       	movw	r26, r24
    30d0:	cb 01       	movw	r24, r22
    30d2:	9c 8b       	std	Y+20, r25	; 0x14
    30d4:	8b 8b       	std	Y+19, r24	; 0x13
    30d6:	0f c0       	rjmp	.+30     	; 0x30f6 <Change_Pass+0x162>
    30d8:	88 ec       	ldi	r24, 0xC8	; 200
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	9a 8b       	std	Y+18, r25	; 0x12
    30de:	89 8b       	std	Y+17, r24	; 0x11
    30e0:	89 89       	ldd	r24, Y+17	; 0x11
    30e2:	9a 89       	ldd	r25, Y+18	; 0x12
    30e4:	01 97       	sbiw	r24, 0x01	; 1
    30e6:	f1 f7       	brne	.-4      	; 0x30e4 <Change_Pass+0x150>
    30e8:	9a 8b       	std	Y+18, r25	; 0x12
    30ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30ec:	8b 89       	ldd	r24, Y+19	; 0x13
    30ee:	9c 89       	ldd	r25, Y+20	; 0x14
    30f0:	01 97       	sbiw	r24, 0x01	; 1
    30f2:	9c 8b       	std	Y+20, r25	; 0x14
    30f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30f6:	8b 89       	ldd	r24, Y+19	; 0x13
    30f8:	9c 89       	ldd	r25, Y+20	; 0x14
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	69 f7       	brne	.-38     	; 0x30d8 <Change_Pass+0x144>
    30fe:	14 c0       	rjmp	.+40     	; 0x3128 <Change_Pass+0x194>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3100:	6d 89       	ldd	r22, Y+21	; 0x15
    3102:	7e 89       	ldd	r23, Y+22	; 0x16
    3104:	8f 89       	ldd	r24, Y+23	; 0x17
    3106:	98 8d       	ldd	r25, Y+24	; 0x18
    3108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310c:	dc 01       	movw	r26, r24
    310e:	cb 01       	movw	r24, r22
    3110:	9c 8b       	std	Y+20, r25	; 0x14
    3112:	8b 8b       	std	Y+19, r24	; 0x13
    3114:	8b 89       	ldd	r24, Y+19	; 0x13
    3116:	9c 89       	ldd	r25, Y+20	; 0x14
    3118:	98 8b       	std	Y+16, r25	; 0x10
    311a:	8f 87       	std	Y+15, r24	; 0x0f
    311c:	8f 85       	ldd	r24, Y+15	; 0x0f
    311e:	98 89       	ldd	r25, Y+16	; 0x10
    3120:	01 97       	sbiw	r24, 0x01	; 1
    3122:	f1 f7       	brne	.-4      	; 0x3120 <Change_Pass+0x18c>
    3124:	98 8b       	std	Y+16, r25	; 0x10
    3126:	8f 87       	std	Y+15, r24	; 0x0f

			case PASS_MATCH :	/* If input password == Stored password in eeporm */
				/* Get the matching password from the user */
				do {
					_delay_ms(100);
					Create_pass();
    3128:	0e 94 7e 15 	call	0x2afc	; 0x2afc <Create_pass>
					Check_pass();
    312c:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <Check_pass>
				} while (UART_recieveByte()!= PASS_MATCH);	/* Don't exit until the user enter a matching password*/
    3130:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    3134:	83 30       	cpi	r24, 0x03	; 3
    3136:	09 f0       	breq	.+2      	; 0x313a <Change_Pass+0x1a6>
    3138:	85 cf       	rjmp	.-246    	; 0x3044 <Change_Pass+0xb0>
    313a:	76 c0       	rjmp	.+236    	; 0x3228 <Change_Pass+0x294>
				return;

			case SYSTEM_LOCKED:	/* If the User input the wrong password 3-times in a row */
				Theft_alert();	/* Activate the Security system */
    313c:	0e 94 1d 19 	call	0x323a	; 0x323a <Theft_alert>
    3140:	73 c0       	rjmp	.+230    	; 0x3228 <Change_Pass+0x294>
				return;	/* Exist from the function and return to the Main options */
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	90 e8       	ldi	r25, 0x80	; 128
    3146:	a9 e0       	ldi	r26, 0x09	; 9
    3148:	b4 e4       	ldi	r27, 0x44	; 68
    314a:	8b 87       	std	Y+11, r24	; 0x0b
    314c:	9c 87       	std	Y+12, r25	; 0x0c
    314e:	ad 87       	std	Y+13, r26	; 0x0d
    3150:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3152:	6b 85       	ldd	r22, Y+11	; 0x0b
    3154:	7c 85       	ldd	r23, Y+12	; 0x0c
    3156:	8d 85       	ldd	r24, Y+13	; 0x0d
    3158:	9e 85       	ldd	r25, Y+14	; 0x0e
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	4a ef       	ldi	r20, 0xFA	; 250
    3160:	54 e4       	ldi	r21, 0x44	; 68
    3162:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3166:	dc 01       	movw	r26, r24
    3168:	cb 01       	movw	r24, r22
    316a:	8f 83       	std	Y+7, r24	; 0x07
    316c:	98 87       	std	Y+8, r25	; 0x08
    316e:	a9 87       	std	Y+9, r26	; 0x09
    3170:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3172:	6f 81       	ldd	r22, Y+7	; 0x07
    3174:	78 85       	ldd	r23, Y+8	; 0x08
    3176:	89 85       	ldd	r24, Y+9	; 0x09
    3178:	9a 85       	ldd	r25, Y+10	; 0x0a
    317a:	20 e0       	ldi	r18, 0x00	; 0
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	40 e8       	ldi	r20, 0x80	; 128
    3180:	5f e3       	ldi	r21, 0x3F	; 63
    3182:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3186:	88 23       	and	r24, r24
    3188:	2c f4       	brge	.+10     	; 0x3194 <Change_Pass+0x200>
		__ticks = 1;
    318a:	81 e0       	ldi	r24, 0x01	; 1
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	9e 83       	std	Y+6, r25	; 0x06
    3190:	8d 83       	std	Y+5, r24	; 0x05
    3192:	3f c0       	rjmp	.+126    	; 0x3212 <Change_Pass+0x27e>
	else if (__tmp > 65535)
    3194:	6f 81       	ldd	r22, Y+7	; 0x07
    3196:	78 85       	ldd	r23, Y+8	; 0x08
    3198:	89 85       	ldd	r24, Y+9	; 0x09
    319a:	9a 85       	ldd	r25, Y+10	; 0x0a
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	3f ef       	ldi	r19, 0xFF	; 255
    31a0:	4f e7       	ldi	r20, 0x7F	; 127
    31a2:	57 e4       	ldi	r21, 0x47	; 71
    31a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    31a8:	18 16       	cp	r1, r24
    31aa:	4c f5       	brge	.+82     	; 0x31fe <Change_Pass+0x26a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    31ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    31b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31b4:	20 e0       	ldi	r18, 0x00	; 0
    31b6:	30 e0       	ldi	r19, 0x00	; 0
    31b8:	40 e2       	ldi	r20, 0x20	; 32
    31ba:	51 e4       	ldi	r21, 0x41	; 65
    31bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31c0:	dc 01       	movw	r26, r24
    31c2:	cb 01       	movw	r24, r22
    31c4:	bc 01       	movw	r22, r24
    31c6:	cd 01       	movw	r24, r26
    31c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31cc:	dc 01       	movw	r26, r24
    31ce:	cb 01       	movw	r24, r22
    31d0:	9e 83       	std	Y+6, r25	; 0x06
    31d2:	8d 83       	std	Y+5, r24	; 0x05
    31d4:	0f c0       	rjmp	.+30     	; 0x31f4 <Change_Pass+0x260>
    31d6:	88 ec       	ldi	r24, 0xC8	; 200
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	9c 83       	std	Y+4, r25	; 0x04
    31dc:	8b 83       	std	Y+3, r24	; 0x03
    31de:	8b 81       	ldd	r24, Y+3	; 0x03
    31e0:	9c 81       	ldd	r25, Y+4	; 0x04
    31e2:	01 97       	sbiw	r24, 0x01	; 1
    31e4:	f1 f7       	brne	.-4      	; 0x31e2 <Change_Pass+0x24e>
    31e6:	9c 83       	std	Y+4, r25	; 0x04
    31e8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31ea:	8d 81       	ldd	r24, Y+5	; 0x05
    31ec:	9e 81       	ldd	r25, Y+6	; 0x06
    31ee:	01 97       	sbiw	r24, 0x01	; 1
    31f0:	9e 83       	std	Y+6, r25	; 0x06
    31f2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31f4:	8d 81       	ldd	r24, Y+5	; 0x05
    31f6:	9e 81       	ldd	r25, Y+6	; 0x06
    31f8:	00 97       	sbiw	r24, 0x00	; 0
    31fa:	69 f7       	brne	.-38     	; 0x31d6 <Change_Pass+0x242>
    31fc:	e3 ce       	rjmp	.-570    	; 0x2fc4 <Change_Pass+0x30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3200:	78 85       	ldd	r23, Y+8	; 0x08
    3202:	89 85       	ldd	r24, Y+9	; 0x09
    3204:	9a 85       	ldd	r25, Y+10	; 0x0a
    3206:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320a:	dc 01       	movw	r26, r24
    320c:	cb 01       	movw	r24, r22
    320e:	9e 83       	std	Y+6, r25	; 0x06
    3210:	8d 83       	std	Y+5, r24	; 0x05
    3212:	8d 81       	ldd	r24, Y+5	; 0x05
    3214:	9e 81       	ldd	r25, Y+6	; 0x06
    3216:	9a 83       	std	Y+2, r25	; 0x02
    3218:	89 83       	std	Y+1, r24	; 0x01
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	9a 81       	ldd	r25, Y+2	; 0x02
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	f1 f7       	brne	.-4      	; 0x321e <Change_Pass+0x28a>
    3222:	9a 83       	std	Y+2, r25	; 0x02
    3224:	89 83       	std	Y+1, r24	; 0x01
    3226:	ce ce       	rjmp	.-612    	; 0x2fc4 <Change_Pass+0x30>
		}

		_delay_ms(550);	/* Get pressed key each 550ms */
	}

}
    3228:	a1 96       	adiw	r28, 0x21	; 33
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	08 95       	ret

0000323a <Theft_alert>:

void Theft_alert(void){
    323a:	df 93       	push	r29
    323c:	cf 93       	push	r28
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
	g_count = 0;	/*	Reset the timer, To count the Displayed message */
    3242:	10 92 f6 00 	sts	0x00F6, r1
	LCD_clearScreen();
    3246:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_clearScreen>
	LCD_displayString("Security System:");
    324a:	89 ec       	ldi	r24, 0xC9	; 201
    324c:	90 e0       	ldi	r25, 0x00	; 0
    324e:	0e 94 28 14 	call	0x2850	; 0x2850 <LCD_displayString>
	LCD_displayStringRowColumn(1,0,"Locked.");
    3252:	2a ed       	ldi	r18, 0xDA	; 218
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	60 e0       	ldi	r22, 0x00	; 0
    325a:	a9 01       	movw	r20, r18
    325c:	0e 94 93 14 	call	0x2926	; 0x2926 <LCD_displayStringRowColumn>
	while(g_count<=60);	/* Display the message for 60 seconds */
    3260:	80 91 f6 00 	lds	r24, 0x00F6
    3264:	8d 33       	cpi	r24, 0x3D	; 61
    3266:	e0 f3       	brcs	.-8      	; 0x3260 <Theft_alert+0x26>
	LCD_clearScreen();	/* Clear LCD screen before existing the function */
    3268:	0e 94 d5 14 	call	0x29aa	; 0x29aa <LCD_clearScreen>

}
    326c:	cf 91       	pop	r28
    326e:	df 91       	pop	r29
    3270:	08 95       	ret

00003272 <__vector_9>:


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_OVF_vect){
    3272:	1f 92       	push	r1
    3274:	0f 92       	push	r0
    3276:	0f b6       	in	r0, 0x3f	; 63
    3278:	0f 92       	push	r0
    327a:	11 24       	eor	r1, r1
    327c:	2f 93       	push	r18
    327e:	3f 93       	push	r19
    3280:	4f 93       	push	r20
    3282:	5f 93       	push	r21
    3284:	6f 93       	push	r22
    3286:	7f 93       	push	r23
    3288:	8f 93       	push	r24
    328a:	9f 93       	push	r25
    328c:	af 93       	push	r26
    328e:	bf 93       	push	r27
    3290:	ef 93       	push	r30
    3292:	ff 93       	push	r31
    3294:	df 93       	push	r29
    3296:	cf 93       	push	r28
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR){
    329c:	80 91 f7 00 	lds	r24, 0x00F7
    32a0:	90 91 f8 00 	lds	r25, 0x00F8
    32a4:	00 97       	sbiw	r24, 0x00	; 0
    32a6:	29 f0       	breq	.+10     	; 0x32b2 <__vector_9+0x40>
		/* Call the Call Back function in the application after Overflow */
		(*g_callBackPtr)();
    32a8:	e0 91 f7 00 	lds	r30, 0x00F7
    32ac:	f0 91 f8 00 	lds	r31, 0x00F8
    32b0:	09 95       	icall
	}
}
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	ff 91       	pop	r31
    32b8:	ef 91       	pop	r30
    32ba:	bf 91       	pop	r27
    32bc:	af 91       	pop	r26
    32be:	9f 91       	pop	r25
    32c0:	8f 91       	pop	r24
    32c2:	7f 91       	pop	r23
    32c4:	6f 91       	pop	r22
    32c6:	5f 91       	pop	r21
    32c8:	4f 91       	pop	r20
    32ca:	3f 91       	pop	r19
    32cc:	2f 91       	pop	r18
    32ce:	0f 90       	pop	r0
    32d0:	0f be       	out	0x3f, r0	; 63
    32d2:	0f 90       	pop	r0
    32d4:	1f 90       	pop	r1
    32d6:	18 95       	reti

000032d8 <__vector_7>:


ISR(TIMER1_COMPA_vect){
    32d8:	1f 92       	push	r1
    32da:	0f 92       	push	r0
    32dc:	0f b6       	in	r0, 0x3f	; 63
    32de:	0f 92       	push	r0
    32e0:	11 24       	eor	r1, r1
    32e2:	2f 93       	push	r18
    32e4:	3f 93       	push	r19
    32e6:	4f 93       	push	r20
    32e8:	5f 93       	push	r21
    32ea:	6f 93       	push	r22
    32ec:	7f 93       	push	r23
    32ee:	8f 93       	push	r24
    32f0:	9f 93       	push	r25
    32f2:	af 93       	push	r26
    32f4:	bf 93       	push	r27
    32f6:	ef 93       	push	r30
    32f8:	ff 93       	push	r31
    32fa:	df 93       	push	r29
    32fc:	cf 93       	push	r28
    32fe:	cd b7       	in	r28, 0x3d	; 61
    3300:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR){
    3302:	80 91 f7 00 	lds	r24, 0x00F7
    3306:	90 91 f8 00 	lds	r25, 0x00F8
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	29 f0       	breq	.+10     	; 0x3318 <__vector_7+0x40>
			/* Call the Call Back function in the application after Compare Match */
			(*g_callBackPtr)();
    330e:	e0 91 f7 00 	lds	r30, 0x00F7
    3312:	f0 91 f8 00 	lds	r31, 0x00F8
    3316:	09 95       	icall
		}
}
    3318:	cf 91       	pop	r28
    331a:	df 91       	pop	r29
    331c:	ff 91       	pop	r31
    331e:	ef 91       	pop	r30
    3320:	bf 91       	pop	r27
    3322:	af 91       	pop	r26
    3324:	9f 91       	pop	r25
    3326:	8f 91       	pop	r24
    3328:	7f 91       	pop	r23
    332a:	6f 91       	pop	r22
    332c:	5f 91       	pop	r21
    332e:	4f 91       	pop	r20
    3330:	3f 91       	pop	r19
    3332:	2f 91       	pop	r18
    3334:	0f 90       	pop	r0
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	0f 90       	pop	r0
    333a:	1f 90       	pop	r1
    333c:	18 95       	reti

0000333e <Timer1_init>:
 * Function to initialize the Timer driver
 * Inputs: pointer to the configuration structure with type Timer1_ConfigType.
 * Return: None
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    333e:	df 93       	push	r29
    3340:	cf 93       	push	r28
    3342:	00 d0       	rcall	.+0      	; 0x3344 <Timer1_init+0x6>
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	9a 83       	std	Y+2, r25	; 0x02
    334a:	89 83       	std	Y+1, r24	; 0x01
	 * COM1B1:0 = 0 Disable Compare Output Mode for Compare unit B
	 * FOC1A = 1    Enable Force Output Compare for Compare unit A
	 * FOC1B = 1    Enable Force Output Compare for Compare unit B
	 * WGM11:10     Waveform Generation Mode
	 ***********************************************************************/
	TCCR1A = (1<<FOC1A) |(1<<FOC1B);
    334c:	ef e4       	ldi	r30, 0x4F	; 79
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	8c e0       	ldi	r24, 0x0C	; 12
    3352:	80 83       	st	Z, r24
	TCCR1A = (( Config_Ptr->mode & 0x02) << WGM10);
    3354:	af e4       	ldi	r26, 0x4F	; 79
    3356:	b0 e0       	ldi	r27, 0x00	; 0
    3358:	e9 81       	ldd	r30, Y+1	; 0x01
    335a:	fa 81       	ldd	r31, Y+2	; 0x02
    335c:	85 81       	ldd	r24, Z+5	; 0x05
    335e:	82 70       	andi	r24, 0x02	; 2
    3360:	8c 93       	st	X, r24
	 * ICES1 = 0 Disable Input Capture Edge Select
	 * Reserved Bit
	 * WGM13:2 : Waveform Generation Mode
	 * CS12:0  : Clock Select
	 ***********************************************************************/
	TCCR1B = ( (Config_Ptr->mode & 0x0C) <<WGM12) | (Config_Ptr->prescaler <<CS10);
    3362:	ae e4       	ldi	r26, 0x4E	; 78
    3364:	b0 e0       	ldi	r27, 0x00	; 0
    3366:	e9 81       	ldd	r30, Y+1	; 0x01
    3368:	fa 81       	ldd	r31, Y+2	; 0x02
    336a:	85 81       	ldd	r24, Z+5	; 0x05
    336c:	88 2f       	mov	r24, r24
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	8c 70       	andi	r24, 0x0C	; 12
    3372:	90 70       	andi	r25, 0x00	; 0
    3374:	88 0f       	add	r24, r24
    3376:	99 1f       	adc	r25, r25
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	98 2f       	mov	r25, r24
    3382:	e9 81       	ldd	r30, Y+1	; 0x01
    3384:	fa 81       	ldd	r31, Y+2	; 0x02
    3386:	84 81       	ldd	r24, Z+4	; 0x04
    3388:	89 2b       	or	r24, r25
    338a:	8c 93       	st	X, r24

	/************************** TCNT1 Description **************************
	 * TCNT1 give direct access, both for read and for write operations,
	 * to the Timer/Counter unit 16-bit counter.
	 ***********************************************************************/
	TCNT1 = Config_Ptr->initial_value;
    338c:	ac e4       	ldi	r26, 0x4C	; 76
    338e:	b0 e0       	ldi	r27, 0x00	; 0
    3390:	e9 81       	ldd	r30, Y+1	; 0x01
    3392:	fa 81       	ldd	r31, Y+2	; 0x02
    3394:	80 81       	ld	r24, Z
    3396:	91 81       	ldd	r25, Z+1	; 0x01
    3398:	11 96       	adiw	r26, 0x01	; 1
    339a:	9c 93       	st	X, r25
    339c:	8e 93       	st	-X, r24
	 * The Output Compare Registers contain a 16-bit value that is continuously
	 * compared with the counter value (TCNT1).
	 * A match can be used to generate an output compare interrupt,
	 * or to generate a waveform output on the OC1x pin.
	 ***********************************************************************/
	OCR1A = Config_Ptr->compare_value;
    339e:	aa e4       	ldi	r26, 0x4A	; 74
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e9 81       	ldd	r30, Y+1	; 0x01
    33a4:	fa 81       	ldd	r31, Y+2	; 0x02
    33a6:	82 81       	ldd	r24, Z+2	; 0x02
    33a8:	93 81       	ldd	r25, Z+3	; 0x03
    33aa:	11 96       	adiw	r26, 0x01	; 1
    33ac:	9c 93       	st	X, r25
    33ae:	8e 93       	st	-X, r24
	 * TICIE1 = 0 Disable Input Capture Interrupt Enable
	 * OCIE1A = 1 Enable Output Compare A Match Interrupt Enable
	 * OCIE1B = 0 Disable Output Compare B Match Interrupt Enable
	 * TOIE1  = 1 Enable  Overflow Interrupt Enable
	 ***********************************************************************/
	TIMSK |= (1<<OCIE1A) | (1<<TOIE1);
    33b0:	a9 e5       	ldi	r26, 0x59	; 89
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	e9 e5       	ldi	r30, 0x59	; 89
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	84 61       	ori	r24, 0x14	; 20
    33bc:	8c 93       	st	X, r24


}
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	08 95       	ret

000033c8 <Timer1_deInit>:
 * Description :
 * Function to disable the Timer1.
 * Inputs: None
 * Return: None
 */
void Timer1_deInit(void){
    33c8:	df 93       	push	r29
    33ca:	cf 93       	push	r28
    33cc:	cd b7       	in	r28, 0x3d	; 61
    33ce:	de b7       	in	r29, 0x3e	; 62

	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    33d0:	ef e4       	ldi	r30, 0x4F	; 79
    33d2:	f0 e0       	ldi	r31, 0x00	; 0
    33d4:	10 82       	st	Z, r1
	TCCR1B = 0;
    33d6:	ee e4       	ldi	r30, 0x4E	; 78
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	10 82       	st	Z, r1
	TCNT1  = 0;
    33dc:	ec e4       	ldi	r30, 0x4C	; 76
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	11 82       	std	Z+1, r1	; 0x01
    33e2:	10 82       	st	Z, r1
	OCR1A  = 0;
    33e4:	ea e4       	ldi	r30, 0x4A	; 74
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	11 82       	std	Z+1, r1	; 0x01
    33ea:	10 82       	st	Z, r1

	/* Disable the Timer1 interrupt */
	TIMSK &= ~(1<<OCIE1A) & ~(1<<TOIE1);
    33ec:	a9 e5       	ldi	r26, 0x59	; 89
    33ee:	b0 e0       	ldi	r27, 0x00	; 0
    33f0:	e9 e5       	ldi	r30, 0x59	; 89
    33f2:	f0 e0       	ldi	r31, 0x00	; 0
    33f4:	80 81       	ld	r24, Z
    33f6:	8b 7e       	andi	r24, 0xEB	; 235
    33f8:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    33fa:	10 92 f8 00 	sts	0x00F8, r1
    33fe:	10 92 f7 00 	sts	0x00F7, r1
}
    3402:	cf 91       	pop	r28
    3404:	df 91       	pop	r29
    3406:	08 95       	ret

00003408 <Timer1_setCallBack>:
 * Description :
 * Function to set the Call Back function address.
 * Inputs: pointer to Call Back function.
 * Return: None
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    3408:	df 93       	push	r29
    340a:	cf 93       	push	r28
    340c:	00 d0       	rcall	.+0      	; 0x340e <Timer1_setCallBack+0x6>
    340e:	cd b7       	in	r28, 0x3d	; 61
    3410:	de b7       	in	r29, 0x3e	; 62
    3412:	9a 83       	std	Y+2, r25	; 0x02
    3414:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3416:	89 81       	ldd	r24, Y+1	; 0x01
    3418:	9a 81       	ldd	r25, Y+2	; 0x02
    341a:	90 93 f8 00 	sts	0x00F8, r25
    341e:	80 93 f7 00 	sts	0x00F7, r24
}
    3422:	0f 90       	pop	r0
    3424:	0f 90       	pop	r0
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_ptr)
{
    342c:	0f 93       	push	r16
    342e:	1f 93       	push	r17
    3430:	df 93       	push	r29
    3432:	cf 93       	push	r28
    3434:	00 d0       	rcall	.+0      	; 0x3436 <UART_init+0xa>
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	9a 83       	std	Y+2, r25	; 0x02
    343c:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    343e:	eb e2       	ldi	r30, 0x2B	; 43
    3440:	f0 e0       	ldi	r31, 0x00	; 0
    3442:	82 e0       	ldi	r24, 0x02	; 2
    3444:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | ( ((Config_ptr->bit_data) >> 2) << UCSZ2);
    3446:	aa e2       	ldi	r26, 0x2A	; 42
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	e9 81       	ldd	r30, Y+1	; 0x01
    344c:	fa 81       	ldd	r31, Y+2	; 0x02
    344e:	80 81       	ld	r24, Z
    3450:	86 95       	lsr	r24
    3452:	86 95       	lsr	r24
    3454:	88 2f       	mov	r24, r24
    3456:	90 e0       	ldi	r25, 0x00	; 0
    3458:	88 0f       	add	r24, r24
    345a:	99 1f       	adc	r25, r25
    345c:	88 0f       	add	r24, r24
    345e:	99 1f       	adc	r25, r25
    3460:	88 61       	ori	r24, 0x18	; 24
    3462:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL)|(Config_ptr->parity << UPM0) | (Config_ptr->stop_bit<<USBS) | (Config_ptr->bit_data << UCSZ0);
    3464:	a0 e4       	ldi	r26, 0x40	; 64
    3466:	b0 e0       	ldi	r27, 0x00	; 0
    3468:	e9 81       	ldd	r30, Y+1	; 0x01
    346a:	fa 81       	ldd	r31, Y+2	; 0x02
    346c:	81 81       	ldd	r24, Z+1	; 0x01
    346e:	88 2f       	mov	r24, r24
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	82 95       	swap	r24
    3474:	92 95       	swap	r25
    3476:	90 7f       	andi	r25, 0xF0	; 240
    3478:	98 27       	eor	r25, r24
    347a:	80 7f       	andi	r24, 0xF0	; 240
    347c:	98 27       	eor	r25, r24
    347e:	28 2f       	mov	r18, r24
    3480:	20 68       	ori	r18, 0x80	; 128
    3482:	e9 81       	ldd	r30, Y+1	; 0x01
    3484:	fa 81       	ldd	r31, Y+2	; 0x02
    3486:	82 81       	ldd	r24, Z+2	; 0x02
    3488:	88 2f       	mov	r24, r24
    348a:	90 e0       	ldi	r25, 0x00	; 0
    348c:	88 0f       	add	r24, r24
    348e:	99 1f       	adc	r25, r25
    3490:	88 0f       	add	r24, r24
    3492:	99 1f       	adc	r25, r25
    3494:	88 0f       	add	r24, r24
    3496:	99 1f       	adc	r25, r25
    3498:	28 2b       	or	r18, r24
    349a:	e9 81       	ldd	r30, Y+1	; 0x01
    349c:	fa 81       	ldd	r31, Y+2	; 0x02
    349e:	80 81       	ld	r24, Z
    34a0:	88 2f       	mov	r24, r24
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	88 0f       	add	r24, r24
    34a6:	99 1f       	adc	r25, r25
    34a8:	82 2b       	or	r24, r18
    34aa:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (uint16)(((F_CPU / (Config_ptr->baud_rate * 8UL))) - 1) >> 8;
    34ac:	00 e4       	ldi	r16, 0x40	; 64
    34ae:	10 e0       	ldi	r17, 0x00	; 0
    34b0:	e9 81       	ldd	r30, Y+1	; 0x01
    34b2:	fa 81       	ldd	r31, Y+2	; 0x02
    34b4:	83 81       	ldd	r24, Z+3	; 0x03
    34b6:	94 81       	ldd	r25, Z+4	; 0x04
    34b8:	cc 01       	movw	r24, r24
    34ba:	a0 e0       	ldi	r26, 0x00	; 0
    34bc:	b0 e0       	ldi	r27, 0x00	; 0
    34be:	88 0f       	add	r24, r24
    34c0:	99 1f       	adc	r25, r25
    34c2:	aa 1f       	adc	r26, r26
    34c4:	bb 1f       	adc	r27, r27
    34c6:	88 0f       	add	r24, r24
    34c8:	99 1f       	adc	r25, r25
    34ca:	aa 1f       	adc	r26, r26
    34cc:	bb 1f       	adc	r27, r27
    34ce:	88 0f       	add	r24, r24
    34d0:	99 1f       	adc	r25, r25
    34d2:	aa 1f       	adc	r26, r26
    34d4:	bb 1f       	adc	r27, r27
    34d6:	9c 01       	movw	r18, r24
    34d8:	ad 01       	movw	r20, r26
    34da:	80 e0       	ldi	r24, 0x00	; 0
    34dc:	92 e1       	ldi	r25, 0x12	; 18
    34de:	aa e7       	ldi	r26, 0x7A	; 122
    34e0:	b0 e0       	ldi	r27, 0x00	; 0
    34e2:	bc 01       	movw	r22, r24
    34e4:	cd 01       	movw	r24, r26
    34e6:	0e 94 39 1b 	call	0x3672	; 0x3672 <__udivmodsi4>
    34ea:	da 01       	movw	r26, r20
    34ec:	c9 01       	movw	r24, r18
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	89 2f       	mov	r24, r25
    34f2:	99 27       	eor	r25, r25
    34f4:	f8 01       	movw	r30, r16
    34f6:	80 83       	st	Z, r24
	UBRRL = (uint16)(((F_CPU / (Config_ptr->baud_rate * 8UL))) - 1);
    34f8:	09 e2       	ldi	r16, 0x29	; 41
    34fa:	10 e0       	ldi	r17, 0x00	; 0
    34fc:	e9 81       	ldd	r30, Y+1	; 0x01
    34fe:	fa 81       	ldd	r31, Y+2	; 0x02
    3500:	83 81       	ldd	r24, Z+3	; 0x03
    3502:	94 81       	ldd	r25, Z+4	; 0x04
    3504:	cc 01       	movw	r24, r24
    3506:	a0 e0       	ldi	r26, 0x00	; 0
    3508:	b0 e0       	ldi	r27, 0x00	; 0
    350a:	88 0f       	add	r24, r24
    350c:	99 1f       	adc	r25, r25
    350e:	aa 1f       	adc	r26, r26
    3510:	bb 1f       	adc	r27, r27
    3512:	88 0f       	add	r24, r24
    3514:	99 1f       	adc	r25, r25
    3516:	aa 1f       	adc	r26, r26
    3518:	bb 1f       	adc	r27, r27
    351a:	88 0f       	add	r24, r24
    351c:	99 1f       	adc	r25, r25
    351e:	aa 1f       	adc	r26, r26
    3520:	bb 1f       	adc	r27, r27
    3522:	9c 01       	movw	r18, r24
    3524:	ad 01       	movw	r20, r26
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	92 e1       	ldi	r25, 0x12	; 18
    352a:	aa e7       	ldi	r26, 0x7A	; 122
    352c:	b0 e0       	ldi	r27, 0x00	; 0
    352e:	bc 01       	movw	r22, r24
    3530:	cd 01       	movw	r24, r26
    3532:	0e 94 39 1b 	call	0x3672	; 0x3672 <__udivmodsi4>
    3536:	da 01       	movw	r26, r20
    3538:	c9 01       	movw	r24, r18
    353a:	81 50       	subi	r24, 0x01	; 1
    353c:	f8 01       	movw	r30, r16
    353e:	80 83       	st	Z, r24

}
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	cf 91       	pop	r28
    3546:	df 91       	pop	r29
    3548:	1f 91       	pop	r17
    354a:	0f 91       	pop	r16
    354c:	08 95       	ret

0000354e <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    354e:	df 93       	push	r29
    3550:	cf 93       	push	r28
    3552:	0f 92       	push	r0
    3554:	cd b7       	in	r28, 0x3d	; 61
    3556:	de b7       	in	r29, 0x3e	; 62
    3558:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    355a:	eb e2       	ldi	r30, 0x2B	; 43
    355c:	f0 e0       	ldi	r31, 0x00	; 0
    355e:	80 81       	ld	r24, Z
    3560:	88 2f       	mov	r24, r24
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	80 72       	andi	r24, 0x20	; 32
    3566:	90 70       	andi	r25, 0x00	; 0
    3568:	00 97       	sbiw	r24, 0x00	; 0
    356a:	b9 f3       	breq	.-18     	; 0x355a <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    356c:	ec e2       	ldi	r30, 0x2C	; 44
    356e:	f0 e0       	ldi	r31, 0x00	; 0
    3570:	89 81       	ldd	r24, Y+1	; 0x01
    3572:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    3574:	0f 90       	pop	r0
    3576:	cf 91       	pop	r28
    3578:	df 91       	pop	r29
    357a:	08 95       	ret

0000357c <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    357c:	df 93       	push	r29
    357e:	cf 93       	push	r28
    3580:	cd b7       	in	r28, 0x3d	; 61
    3582:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3584:	eb e2       	ldi	r30, 0x2B	; 43
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	80 81       	ld	r24, Z
    358a:	88 23       	and	r24, r24
    358c:	dc f7       	brge	.-10     	; 0x3584 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    358e:	ec e2       	ldi	r30, 0x2C	; 44
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
}
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	08 95       	ret

0000359a <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	00 d0       	rcall	.+0      	; 0x35a0 <UART_sendString+0x6>
    35a0:	0f 92       	push	r0
    35a2:	cd b7       	in	r28, 0x3d	; 61
    35a4:	de b7       	in	r29, 0x3e	; 62
    35a6:	9b 83       	std	Y+3, r25	; 0x03
    35a8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    35aa:	19 82       	std	Y+1, r1	; 0x01
    35ac:	0e c0       	rjmp	.+28     	; 0x35ca <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    35ae:	89 81       	ldd	r24, Y+1	; 0x01
    35b0:	28 2f       	mov	r18, r24
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	8a 81       	ldd	r24, Y+2	; 0x02
    35b6:	9b 81       	ldd	r25, Y+3	; 0x03
    35b8:	fc 01       	movw	r30, r24
    35ba:	e2 0f       	add	r30, r18
    35bc:	f3 1f       	adc	r31, r19
    35be:	80 81       	ld	r24, Z
    35c0:	0e 94 a7 1a 	call	0x354e	; 0x354e <UART_sendByte>
		i++;
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	8f 5f       	subi	r24, 0xFF	; 255
    35c8:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	28 2f       	mov	r18, r24
    35ce:	30 e0       	ldi	r19, 0x00	; 0
    35d0:	8a 81       	ldd	r24, Y+2	; 0x02
    35d2:	9b 81       	ldd	r25, Y+3	; 0x03
    35d4:	fc 01       	movw	r30, r24
    35d6:	e2 0f       	add	r30, r18
    35d8:	f3 1f       	adc	r31, r19
    35da:	80 81       	ld	r24, Z
    35dc:	88 23       	and	r24, r24
    35de:	39 f7       	brne	.-50     	; 0x35ae <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	0f 90       	pop	r0
    35e6:	cf 91       	pop	r28
    35e8:	df 91       	pop	r29
    35ea:	08 95       	ret

000035ec <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    35f0:	df 93       	push	r29
    35f2:	cf 93       	push	r28
    35f4:	00 d0       	rcall	.+0      	; 0x35f6 <UART_receiveString+0xa>
    35f6:	0f 92       	push	r0
    35f8:	cd b7       	in	r28, 0x3d	; 61
    35fa:	de b7       	in	r29, 0x3e	; 62
    35fc:	9b 83       	std	Y+3, r25	; 0x03
    35fe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3600:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	28 2f       	mov	r18, r24
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	8a 81       	ldd	r24, Y+2	; 0x02
    360a:	9b 81       	ldd	r25, Y+3	; 0x03
    360c:	8c 01       	movw	r16, r24
    360e:	02 0f       	add	r16, r18
    3610:	13 1f       	adc	r17, r19
    3612:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    3616:	f8 01       	movw	r30, r16
    3618:	80 83       	st	Z, r24
    361a:	0f c0       	rjmp	.+30     	; 0x363a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	8f 5f       	subi	r24, 0xFF	; 255
    3620:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3622:	89 81       	ldd	r24, Y+1	; 0x01
    3624:	28 2f       	mov	r18, r24
    3626:	30 e0       	ldi	r19, 0x00	; 0
    3628:	8a 81       	ldd	r24, Y+2	; 0x02
    362a:	9b 81       	ldd	r25, Y+3	; 0x03
    362c:	8c 01       	movw	r16, r24
    362e:	02 0f       	add	r16, r18
    3630:	13 1f       	adc	r17, r19
    3632:	0e 94 be 1a 	call	0x357c	; 0x357c <UART_recieveByte>
    3636:	f8 01       	movw	r30, r16
    3638:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	28 2f       	mov	r18, r24
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	8a 81       	ldd	r24, Y+2	; 0x02
    3642:	9b 81       	ldd	r25, Y+3	; 0x03
    3644:	fc 01       	movw	r30, r24
    3646:	e2 0f       	add	r30, r18
    3648:	f3 1f       	adc	r31, r19
    364a:	80 81       	ld	r24, Z
    364c:	83 32       	cpi	r24, 0x23	; 35
    364e:	31 f7       	brne	.-52     	; 0x361c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3650:	89 81       	ldd	r24, Y+1	; 0x01
    3652:	28 2f       	mov	r18, r24
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	8a 81       	ldd	r24, Y+2	; 0x02
    3658:	9b 81       	ldd	r25, Y+3	; 0x03
    365a:	fc 01       	movw	r30, r24
    365c:	e2 0f       	add	r30, r18
    365e:	f3 1f       	adc	r31, r19
    3660:	10 82       	st	Z, r1
}
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	0f 90       	pop	r0
    3668:	cf 91       	pop	r28
    366a:	df 91       	pop	r29
    366c:	1f 91       	pop	r17
    366e:	0f 91       	pop	r16
    3670:	08 95       	ret

00003672 <__udivmodsi4>:
    3672:	a1 e2       	ldi	r26, 0x21	; 33
    3674:	1a 2e       	mov	r1, r26
    3676:	aa 1b       	sub	r26, r26
    3678:	bb 1b       	sub	r27, r27
    367a:	fd 01       	movw	r30, r26
    367c:	0d c0       	rjmp	.+26     	; 0x3698 <__udivmodsi4_ep>

0000367e <__udivmodsi4_loop>:
    367e:	aa 1f       	adc	r26, r26
    3680:	bb 1f       	adc	r27, r27
    3682:	ee 1f       	adc	r30, r30
    3684:	ff 1f       	adc	r31, r31
    3686:	a2 17       	cp	r26, r18
    3688:	b3 07       	cpc	r27, r19
    368a:	e4 07       	cpc	r30, r20
    368c:	f5 07       	cpc	r31, r21
    368e:	20 f0       	brcs	.+8      	; 0x3698 <__udivmodsi4_ep>
    3690:	a2 1b       	sub	r26, r18
    3692:	b3 0b       	sbc	r27, r19
    3694:	e4 0b       	sbc	r30, r20
    3696:	f5 0b       	sbc	r31, r21

00003698 <__udivmodsi4_ep>:
    3698:	66 1f       	adc	r22, r22
    369a:	77 1f       	adc	r23, r23
    369c:	88 1f       	adc	r24, r24
    369e:	99 1f       	adc	r25, r25
    36a0:	1a 94       	dec	r1
    36a2:	69 f7       	brne	.-38     	; 0x367e <__udivmodsi4_loop>
    36a4:	60 95       	com	r22
    36a6:	70 95       	com	r23
    36a8:	80 95       	com	r24
    36aa:	90 95       	com	r25
    36ac:	9b 01       	movw	r18, r22
    36ae:	ac 01       	movw	r20, r24
    36b0:	bd 01       	movw	r22, r26
    36b2:	cf 01       	movw	r24, r30
    36b4:	08 95       	ret

000036b6 <__prologue_saves__>:
    36b6:	2f 92       	push	r2
    36b8:	3f 92       	push	r3
    36ba:	4f 92       	push	r4
    36bc:	5f 92       	push	r5
    36be:	6f 92       	push	r6
    36c0:	7f 92       	push	r7
    36c2:	8f 92       	push	r8
    36c4:	9f 92       	push	r9
    36c6:	af 92       	push	r10
    36c8:	bf 92       	push	r11
    36ca:	cf 92       	push	r12
    36cc:	df 92       	push	r13
    36ce:	ef 92       	push	r14
    36d0:	ff 92       	push	r15
    36d2:	0f 93       	push	r16
    36d4:	1f 93       	push	r17
    36d6:	cf 93       	push	r28
    36d8:	df 93       	push	r29
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
    36de:	ca 1b       	sub	r28, r26
    36e0:	db 0b       	sbc	r29, r27
    36e2:	0f b6       	in	r0, 0x3f	; 63
    36e4:	f8 94       	cli
    36e6:	de bf       	out	0x3e, r29	; 62
    36e8:	0f be       	out	0x3f, r0	; 63
    36ea:	cd bf       	out	0x3d, r28	; 61
    36ec:	09 94       	ijmp

000036ee <__epilogue_restores__>:
    36ee:	2a 88       	ldd	r2, Y+18	; 0x12
    36f0:	39 88       	ldd	r3, Y+17	; 0x11
    36f2:	48 88       	ldd	r4, Y+16	; 0x10
    36f4:	5f 84       	ldd	r5, Y+15	; 0x0f
    36f6:	6e 84       	ldd	r6, Y+14	; 0x0e
    36f8:	7d 84       	ldd	r7, Y+13	; 0x0d
    36fa:	8c 84       	ldd	r8, Y+12	; 0x0c
    36fc:	9b 84       	ldd	r9, Y+11	; 0x0b
    36fe:	aa 84       	ldd	r10, Y+10	; 0x0a
    3700:	b9 84       	ldd	r11, Y+9	; 0x09
    3702:	c8 84       	ldd	r12, Y+8	; 0x08
    3704:	df 80       	ldd	r13, Y+7	; 0x07
    3706:	ee 80       	ldd	r14, Y+6	; 0x06
    3708:	fd 80       	ldd	r15, Y+5	; 0x05
    370a:	0c 81       	ldd	r16, Y+4	; 0x04
    370c:	1b 81       	ldd	r17, Y+3	; 0x03
    370e:	aa 81       	ldd	r26, Y+2	; 0x02
    3710:	b9 81       	ldd	r27, Y+1	; 0x01
    3712:	ce 0f       	add	r28, r30
    3714:	d1 1d       	adc	r29, r1
    3716:	0f b6       	in	r0, 0x3f	; 63
    3718:	f8 94       	cli
    371a:	de bf       	out	0x3e, r29	; 62
    371c:	0f be       	out	0x3f, r0	; 63
    371e:	cd bf       	out	0x3d, r28	; 61
    3720:	ed 01       	movw	r28, r26
    3722:	08 95       	ret

00003724 <ltoa>:
    3724:	fa 01       	movw	r30, r20
    3726:	cf 93       	push	r28
    3728:	ff 93       	push	r31
    372a:	ef 93       	push	r30
    372c:	22 30       	cpi	r18, 0x02	; 2
    372e:	44 f1       	brlt	.+80     	; 0x3780 <ltoa+0x5c>
    3730:	25 32       	cpi	r18, 0x25	; 37
    3732:	34 f5       	brge	.+76     	; 0x3780 <ltoa+0x5c>
    3734:	c2 2f       	mov	r28, r18
    3736:	e8 94       	clt
    3738:	ca 30       	cpi	r28, 0x0A	; 10
    373a:	49 f4       	brne	.+18     	; 0x374e <ltoa+0x2a>
    373c:	97 fb       	bst	r25, 7
    373e:	3e f4       	brtc	.+14     	; 0x374e <ltoa+0x2a>
    3740:	90 95       	com	r25
    3742:	80 95       	com	r24
    3744:	70 95       	com	r23
    3746:	61 95       	neg	r22
    3748:	7f 4f       	sbci	r23, 0xFF	; 255
    374a:	8f 4f       	sbci	r24, 0xFF	; 255
    374c:	9f 4f       	sbci	r25, 0xFF	; 255
    374e:	2c 2f       	mov	r18, r28
    3750:	33 27       	eor	r19, r19
    3752:	44 27       	eor	r20, r20
    3754:	55 27       	eor	r21, r21
    3756:	ff 93       	push	r31
    3758:	ef 93       	push	r30
    375a:	0e 94 39 1b 	call	0x3672	; 0x3672 <__udivmodsi4>
    375e:	ef 91       	pop	r30
    3760:	ff 91       	pop	r31
    3762:	60 5d       	subi	r22, 0xD0	; 208
    3764:	6a 33       	cpi	r22, 0x3A	; 58
    3766:	0c f0       	brlt	.+2      	; 0x376a <ltoa+0x46>
    3768:	69 5d       	subi	r22, 0xD9	; 217
    376a:	61 93       	st	Z+, r22
    376c:	b9 01       	movw	r22, r18
    376e:	ca 01       	movw	r24, r20
    3770:	60 50       	subi	r22, 0x00	; 0
    3772:	70 40       	sbci	r23, 0x00	; 0
    3774:	80 40       	sbci	r24, 0x00	; 0
    3776:	90 40       	sbci	r25, 0x00	; 0
    3778:	51 f7       	brne	.-44     	; 0x374e <ltoa+0x2a>
    377a:	16 f4       	brtc	.+4      	; 0x3780 <ltoa+0x5c>
    377c:	cd e2       	ldi	r28, 0x2D	; 45
    377e:	c1 93       	st	Z+, r28
    3780:	10 82       	st	Z, r1
    3782:	8f 91       	pop	r24
    3784:	9f 91       	pop	r25
    3786:	cf 91       	pop	r28
    3788:	0c 94 c6 1b 	jmp	0x378c	; 0x378c <strrev>

0000378c <strrev>:
    378c:	dc 01       	movw	r26, r24
    378e:	fc 01       	movw	r30, r24
    3790:	67 2f       	mov	r22, r23
    3792:	71 91       	ld	r23, Z+
    3794:	77 23       	and	r23, r23
    3796:	e1 f7       	brne	.-8      	; 0x3790 <strrev+0x4>
    3798:	32 97       	sbiw	r30, 0x02	; 2
    379a:	04 c0       	rjmp	.+8      	; 0x37a4 <strrev+0x18>
    379c:	7c 91       	ld	r23, X
    379e:	6d 93       	st	X+, r22
    37a0:	70 83       	st	Z, r23
    37a2:	62 91       	ld	r22, -Z
    37a4:	ae 17       	cp	r26, r30
    37a6:	bf 07       	cpc	r27, r31
    37a8:	c8 f3       	brcs	.-14     	; 0x379c <strrev+0x10>
    37aa:	08 95       	ret

000037ac <_exit>:
    37ac:	f8 94       	cli

000037ae <__stop_program>:
    37ae:	ff cf       	rjmp	.-2      	; 0x37ae <__stop_program>
