
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003974  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00003974  00003a08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800078  00800078  00003a20  2**0
                  ALLOC
  3 .stab         00003660  00000000  00000000  00003a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014f7  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008577  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000086b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008827  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a470  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b35b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c108  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c268  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c4f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ccc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 8f 19 	jmp	0x331e	; 0x331e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5c 19 	jmp	0x32b8	; 0x32b8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e7       	ldi	r30, 0x74	; 116
      68:	f9 e3       	ldi	r31, 0x39	; 57
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <main>
      8a:	0c 94 b8 1c 	jmp	0x3970	; 0x3970 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 59 1c 	jmp	0x38b2	; 0x38b2 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 49 1c 	jmp	0x3892	; 0x3892 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 65 1c 	jmp	0x38ca	; 0x38ca <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4d 1c 	jmp	0x389a	; 0x389a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 69 1c 	jmp	0x38d2	; 0x38d2 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <DcMotor_init>:
 * Description :
 * The Function responsible for setup the direction for the two motor pins through the GPIO driver.
 * Stop at the DC-Motor at the beginning through the GPIO driver.
 * */

void DcMotor_init(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(DCMOTOR_INPUT1_PORT,DCMOTOR_INPUT1_PIN,PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 f6 07 	call	0xfec	; 0xfec <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_INPUT2_PORT,DCMOTOR_INPUT2_PIN,PIN_OUTPUT);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 f6 07 	call	0xfec	; 0xfec <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DCMOTOR_ENABLE1_PORT,DCMOTOR_ENABLE1_PIN,PIN_OUTPUT);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	63 e0       	ldi	r22, 0x03	; 3
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 f6 07 	call	0xfec	; 0xfec <GPIO_setupPinDirection>

	GPIO_writePin(DCMOTOR_INPUT1_PORT,DCMOTOR_INPUT1_PIN,LOGIC_LOW);
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_INPUT2_PORT,DCMOTOR_INPUT2_PIN,LOGIC_LOW);
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	40 e0       	ldi	r20, 0x00	; 0
     b7c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(DCMOTOR_ENABLE1_PORT,DCMOTOR_ENABLE1_PIN,LOGIC_HIGH);
#endif

#endif

}
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <DcMotor_Rotate>:
/*
 * Description :
 * The function responsible for rotate the DC Motor CW/ or A-CW or stop the motor based on the state input state value.
 * Send the required duty cycle to the PWM driver based on the required speed value.
 * */
void DcMotor_Rotate(DcMotor_State state,uint8 speed){
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <DcMotor_Rotate+0x6>
     b8c:	00 d0       	rcall	.+0      	; 0xb8e <DcMotor_Rotate+0x8>
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	89 83       	std	Y+1, r24	; 0x01
     b94:	6a 83       	std	Y+2, r22	; 0x02




	switch(state){
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	3c 83       	std	Y+4, r19	; 0x04
     b9e:	2b 83       	std	Y+3, r18	; 0x03
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	9c 81       	ldd	r25, Y+4	; 0x04
     ba4:	81 30       	cpi	r24, 0x01	; 1
     ba6:	91 05       	cpc	r25, r1
     ba8:	a1 f0       	breq	.+40     	; 0xbd2 <DcMotor_Rotate+0x4c>
     baa:	2b 81       	ldd	r18, Y+3	; 0x03
     bac:	3c 81       	ldd	r19, Y+4	; 0x04
     bae:	22 30       	cpi	r18, 0x02	; 2
     bb0:	31 05       	cpc	r19, r1
     bb2:	d1 f0       	breq	.+52     	; 0xbe8 <DcMotor_Rotate+0x62>
     bb4:	8b 81       	ldd	r24, Y+3	; 0x03
     bb6:	9c 81       	ldd	r25, Y+4	; 0x04
     bb8:	00 97       	sbiw	r24, 0x00	; 0
     bba:	01 f5       	brne	.+64     	; 0xbfc <DcMotor_Rotate+0x76>

	case CW:
		GPIO_writePin(DCMOTOR_INPUT1_PORT,DCMOTOR_INPUT1_PIN,LOGIC_LOW);
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	60 e0       	ldi	r22, 0x00	; 0
     bc0:	40 e0       	ldi	r20, 0x00	; 0
     bc2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_INPUT2_PORT,DCMOTOR_INPUT2_PIN,LOGIC_HIGH);
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	61 e0       	ldi	r22, 0x01	; 1
     bca:	41 e0       	ldi	r20, 0x01	; 1
     bcc:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
     bd0:	15 c0       	rjmp	.+42     	; 0xbfc <DcMotor_Rotate+0x76>
		break;

	case A_CW:
		GPIO_writePin(DCMOTOR_INPUT1_PORT,DCMOTOR_INPUT1_PIN,LOGIC_HIGH);
     bd2:	81 e0       	ldi	r24, 0x01	; 1
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	41 e0       	ldi	r20, 0x01	; 1
     bd8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_INPUT2_PORT,DCMOTOR_INPUT2_PIN,LOGIC_LOW);
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	40 e0       	ldi	r20, 0x00	; 0
     be2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
     be6:	0a c0       	rjmp	.+20     	; 0xbfc <DcMotor_Rotate+0x76>
		break;

	case STOP:
		GPIO_writePin(DCMOTOR_INPUT1_PORT,DCMOTOR_INPUT1_PIN,LOGIC_LOW);
     be8:	81 e0       	ldi	r24, 0x01	; 1
     bea:	60 e0       	ldi	r22, 0x00	; 0
     bec:	40 e0       	ldi	r20, 0x00	; 0
     bee:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
		GPIO_writePin(DCMOTOR_INPUT2_PORT,DCMOTOR_INPUT2_PIN,LOGIC_LOW);
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	61 e0       	ldi	r22, 0x01	; 1
     bf6:	40 e0       	ldi	r20, 0x00	; 0
     bf8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
		break;

	}

	PWM_Timer0_Start (speed);
     bfc:	8a 81       	ldd	r24, Y+2	; 0x02
     bfe:	0e 94 13 19 	call	0x3226	; 0x3226 <PWM_Timer0_Start>

}
     c02:	0f 90       	pop	r0
     c04:	0f 90       	pop	r0
     c06:	0f 90       	pop	r0
     c08:	0f 90       	pop	r0
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	08 95       	ret

00000c10 <Buzzer_init>:
 * Turn off the buzzer through the GPIO.
 * Inputs: None
 * Return: None
 */
void Buzzer_init(void)
{
     c10:	df 93       	push	r29
     c12:	cf 93       	push	r28
     c14:	cd b7       	in	r28, 0x3d	; 61
     c16:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     c18:	83 e0       	ldi	r24, 0x03	; 3
     c1a:	62 e0       	ldi	r22, 0x02	; 2
     c1c:	41 e0       	ldi	r20, 0x01	; 1
     c1e:	0e 94 f6 07 	call	0xfec	; 0xfec <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     c22:	83 e0       	ldi	r24, 0x03	; 3
     c24:	62 e0       	ldi	r22, 0x02	; 2
     c26:	40 e0       	ldi	r20, 0x00	; 0
     c28:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
}
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <Buzzer_on>:
 * Function to enable the Buzzer through the GPIO.
 * Inputs: None
 * Return: None
 */
void Buzzer_on(void)
{
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	cd b7       	in	r28, 0x3d	; 61
     c38:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     c3a:	83 e0       	ldi	r24, 0x03	; 3
     c3c:	62 e0       	ldi	r22, 0x02	; 2
     c3e:	41 e0       	ldi	r20, 0x01	; 1
     c40:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>


}
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	08 95       	ret

00000c4a <Buzzer_off>:
 * Inputs: None
 * Return: No

 */
void Buzzer_off(void)
{
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	cd b7       	in	r28, 0x3d	; 61
     c50:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     c52:	83 e0       	ldi	r24, 0x03	; 3
     c54:	62 e0       	ldi	r22, 0x02	; 2
     c56:	40 e0       	ldi	r20, 0x00	; 0
     c58:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>


}
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <EEPROM_writeByte>:
#include "external_eeprom.h"
#include "twi.h"
#include"util/delay.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 *u8data,uint16 len)
{
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	67 97       	sbiw	r28, 0x17	; 23
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	9a 8b       	std	Y+18, r25	; 0x12
     c78:	89 8b       	std	Y+17, r24	; 0x11
     c7a:	7c 8b       	std	Y+20, r23	; 0x14
     c7c:	6b 8b       	std	Y+19, r22	; 0x13
     c7e:	5e 8b       	std	Y+22, r21	; 0x16
     c80:	4d 8b       	std	Y+21, r20	; 0x15
	uint16 i;
	/*Send the Start Bit*/
	TWI_start();
     c82:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <TWI_start>
	if (TWI_getStatus() != TWI_START)
     c86:	0e 94 ca 1a 	call	0x3594	; 0x3594 <TWI_getStatus>
     c8a:	88 30       	cpi	r24, 0x08	; 8
     c8c:	11 f0       	breq	.+4      	; 0xc92 <EEPROM_writeByte+0x30>
		return ERROR;
     c8e:	1f 8a       	std	Y+23, r1	; 0x17
     c90:	b1 c0       	rjmp	.+354    	; 0xdf4 <EEPROM_writeByte+0x192>

	/*Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write)*/
	TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c92:	89 89       	ldd	r24, Y+17	; 0x11
     c94:	9a 89       	ldd	r25, Y+18	; 0x12
     c96:	80 70       	andi	r24, 0x00	; 0
     c98:	97 70       	andi	r25, 0x07	; 7
     c9a:	88 0f       	add	r24, r24
     c9c:	89 2f       	mov	r24, r25
     c9e:	88 1f       	adc	r24, r24
     ca0:	99 0b       	sbc	r25, r25
     ca2:	91 95       	neg	r25
     ca4:	80 6a       	ori	r24, 0xA0	; 160
     ca6:	0e 94 8d 1a 	call	0x351a	; 0x351a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     caa:	0e 94 ca 1a 	call	0x3594	; 0x3594 <TWI_getStatus>
     cae:	88 31       	cpi	r24, 0x18	; 24
     cb0:	11 f0       	breq	.+4      	; 0xcb6 <EEPROM_writeByte+0x54>
		return ERROR;
     cb2:	1f 8a       	std	Y+23, r1	; 0x17
     cb4:	9f c0       	rjmp	.+318    	; 0xdf4 <EEPROM_writeByte+0x192>

	/* Send the required memory location address*/
	TWI_writeByte((uint8)(u16addr));
     cb6:	89 89       	ldd	r24, Y+17	; 0x11
     cb8:	0e 94 8d 1a 	call	0x351a	; 0x351a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
     cbc:	0e 94 ca 1a 	call	0x3594	; 0x3594 <TWI_getStatus>
     cc0:	88 32       	cpi	r24, 0x28	; 40
     cc2:	11 f0       	breq	.+4      	; 0xcc8 <EEPROM_writeByte+0x66>
		return ERROR;
     cc4:	1f 8a       	std	Y+23, r1	; 0x17
     cc6:	96 c0       	rjmp	.+300    	; 0xdf4 <EEPROM_writeByte+0x192>

	for(i=0 ;i<len; i++){
     cc8:	18 8a       	std	Y+16, r1	; 0x10
     cca:	1f 86       	std	Y+15, r1	; 0x0f
     ccc:	87 c0       	rjmp	.+270    	; 0xddc <EEPROM_writeByte+0x17a>
		/*write bytes to eeprom*/
		TWI_writeByte( u8data[i] );
     cce:	2b 89       	ldd	r18, Y+19	; 0x13
     cd0:	3c 89       	ldd	r19, Y+20	; 0x14
     cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd4:	98 89       	ldd	r25, Y+16	; 0x10
     cd6:	f9 01       	movw	r30, r18
     cd8:	e8 0f       	add	r30, r24
     cda:	f9 1f       	adc	r31, r25
     cdc:	80 81       	ld	r24, Z
     cde:	0e 94 8d 1a 	call	0x351a	; 0x351a <TWI_writeByte>
		if (TWI_getStatus() != TWI_MT_DATA_ACK)
     ce2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <TWI_getStatus>
     ce6:	88 32       	cpi	r24, 0x28	; 40
     ce8:	11 f0       	breq	.+4      	; 0xcee <EEPROM_writeByte+0x8c>
		{
			return ERROR;
     cea:	1f 8a       	std	Y+23, r1	; 0x17
     cec:	83 c0       	rjmp	.+262    	; 0xdf4 <EEPROM_writeByte+0x192>
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	a0 e2       	ldi	r26, 0x20	; 32
     cf4:	b1 e4       	ldi	r27, 0x41	; 65
     cf6:	8b 87       	std	Y+11, r24	; 0x0b
     cf8:	9c 87       	std	Y+12, r25	; 0x0c
     cfa:	ad 87       	std	Y+13, r26	; 0x0d
     cfc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cfe:	6b 85       	ldd	r22, Y+11	; 0x0b
     d00:	7c 85       	ldd	r23, Y+12	; 0x0c
     d02:	8d 85       	ldd	r24, Y+13	; 0x0d
     d04:	9e 85       	ldd	r25, Y+14	; 0x0e
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	4a ef       	ldi	r20, 0xFA	; 250
     d0c:	54 e4       	ldi	r21, 0x44	; 68
     d0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	8f 83       	std	Y+7, r24	; 0x07
     d18:	98 87       	std	Y+8, r25	; 0x08
     d1a:	a9 87       	std	Y+9, r26	; 0x09
     d1c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d1e:	6f 81       	ldd	r22, Y+7	; 0x07
     d20:	78 85       	ldd	r23, Y+8	; 0x08
     d22:	89 85       	ldd	r24, Y+9	; 0x09
     d24:	9a 85       	ldd	r25, Y+10	; 0x0a
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d32:	88 23       	and	r24, r24
     d34:	2c f4       	brge	.+10     	; 0xd40 <EEPROM_writeByte+0xde>
		__ticks = 1;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	9e 83       	std	Y+6, r25	; 0x06
     d3c:	8d 83       	std	Y+5, r24	; 0x05
     d3e:	3f c0       	rjmp	.+126    	; 0xdbe <EEPROM_writeByte+0x15c>
	else if (__tmp > 65535)
     d40:	6f 81       	ldd	r22, Y+7	; 0x07
     d42:	78 85       	ldd	r23, Y+8	; 0x08
     d44:	89 85       	ldd	r24, Y+9	; 0x09
     d46:	9a 85       	ldd	r25, Y+10	; 0x0a
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	3f ef       	ldi	r19, 0xFF	; 255
     d4c:	4f e7       	ldi	r20, 0x7F	; 127
     d4e:	57 e4       	ldi	r21, 0x47	; 71
     d50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d54:	18 16       	cp	r1, r24
     d56:	4c f5       	brge	.+82     	; 0xdaa <EEPROM_writeByte+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d58:	6b 85       	ldd	r22, Y+11	; 0x0b
     d5a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d5c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e2       	ldi	r20, 0x20	; 32
     d66:	51 e4       	ldi	r21, 0x41	; 65
     d68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	bc 01       	movw	r22, r24
     d72:	cd 01       	movw	r24, r26
     d74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	9e 83       	std	Y+6, r25	; 0x06
     d7e:	8d 83       	std	Y+5, r24	; 0x05
     d80:	0f c0       	rjmp	.+30     	; 0xda0 <EEPROM_writeByte+0x13e>
     d82:	88 ec       	ldi	r24, 0xC8	; 200
     d84:	90 e0       	ldi	r25, 0x00	; 0
     d86:	9c 83       	std	Y+4, r25	; 0x04
     d88:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d8a:	8b 81       	ldd	r24, Y+3	; 0x03
     d8c:	9c 81       	ldd	r25, Y+4	; 0x04
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	f1 f7       	brne	.-4      	; 0xd8e <EEPROM_writeByte+0x12c>
     d92:	9c 83       	std	Y+4, r25	; 0x04
     d94:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d96:	8d 81       	ldd	r24, Y+5	; 0x05
     d98:	9e 81       	ldd	r25, Y+6	; 0x06
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	9e 83       	std	Y+6, r25	; 0x06
     d9e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     da0:	8d 81       	ldd	r24, Y+5	; 0x05
     da2:	9e 81       	ldd	r25, Y+6	; 0x06
     da4:	00 97       	sbiw	r24, 0x00	; 0
     da6:	69 f7       	brne	.-38     	; 0xd82 <EEPROM_writeByte+0x120>
     da8:	14 c0       	rjmp	.+40     	; 0xdd2 <EEPROM_writeByte+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     daa:	6f 81       	ldd	r22, Y+7	; 0x07
     dac:	78 85       	ldd	r23, Y+8	; 0x08
     dae:	89 85       	ldd	r24, Y+9	; 0x09
     db0:	9a 85       	ldd	r25, Y+10	; 0x0a
     db2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	9e 83       	std	Y+6, r25	; 0x06
     dbc:	8d 83       	std	Y+5, r24	; 0x05
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	01 97       	sbiw	r24, 0x01	; 1
     dcc:	f1 f7       	brne	.-4      	; 0xdca <EEPROM_writeByte+0x168>
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	89 83       	std	Y+1, r24	; 0x01
	/* Send the required memory location address*/
	TWI_writeByte((uint8)(u16addr));
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
		return ERROR;

	for(i=0 ;i<len; i++){
     dd2:	8f 85       	ldd	r24, Y+15	; 0x0f
     dd4:	98 89       	ldd	r25, Y+16	; 0x10
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	98 8b       	std	Y+16, r25	; 0x10
     dda:	8f 87       	std	Y+15, r24	; 0x0f
     ddc:	2f 85       	ldd	r18, Y+15	; 0x0f
     dde:	38 89       	ldd	r19, Y+16	; 0x10
     de0:	8d 89       	ldd	r24, Y+21	; 0x15
     de2:	9e 89       	ldd	r25, Y+22	; 0x16
     de4:	28 17       	cp	r18, r24
     de6:	39 07       	cpc	r19, r25
     de8:	08 f4       	brcc	.+2      	; 0xdec <EEPROM_writeByte+0x18a>
     dea:	71 cf       	rjmp	.-286    	; 0xcce <EEPROM_writeByte+0x6c>
			return ERROR;
		}
		_delay_ms(10);
	}
	/*Send the Stop Bit*/
	TWI_stop();
     dec:	0e 94 82 1a 	call	0x3504	; 0x3504 <TWI_stop>

	return SUCCESS;
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	8f 8b       	std	Y+23, r24	; 0x17
     df4:	8f 89       	ldd	r24, Y+23	; 0x17
}
     df6:	67 96       	adiw	r28, 0x17	; 23
     df8:	0f b6       	in	r0, 0x3f	; 63
     dfa:	f8 94       	cli
     dfc:	de bf       	out	0x3e, r29	; 62
     dfe:	0f be       	out	0x3f, r0	; 63
     e00:	cd bf       	out	0x3d, r28	; 61
     e02:	cf 91       	pop	r28
     e04:	df 91       	pop	r29
     e06:	08 95       	ret

00000e08 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data,uint16 len)
{
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
     e14:	67 97       	sbiw	r28, 0x17	; 23
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	f8 94       	cli
     e1a:	de bf       	out	0x3e, r29	; 62
     e1c:	0f be       	out	0x3f, r0	; 63
     e1e:	cd bf       	out	0x3d, r28	; 61
     e20:	9a 8b       	std	Y+18, r25	; 0x12
     e22:	89 8b       	std	Y+17, r24	; 0x11
     e24:	7c 8b       	std	Y+20, r23	; 0x14
     e26:	6b 8b       	std	Y+19, r22	; 0x13
     e28:	5e 8b       	std	Y+22, r21	; 0x16
     e2a:	4d 8b       	std	Y+21, r20	; 0x15
	uint16 i;
	/*Send the Start Bit*/
	TWI_start();
     e2c:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <TWI_start>
	if (TWI_getStatus() != TWI_START)
     e30:	0e 94 ca 1a 	call	0x3594	; 0x3594 <TWI_getStatus>
     e34:	88 30       	cpi	r24, 0x08	; 8
     e36:	11 f0       	breq	.+4      	; 0xe3c <EEPROM_readByte+0x34>
		return ERROR;
     e38:	1f 8a       	std	Y+23, r1	; 0x17
     e3a:	cc c0       	rjmp	.+408    	; 0xfd4 <EEPROM_readByte+0x1cc>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write)*/
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     e3c:	89 89       	ldd	r24, Y+17	; 0x11
     e3e:	9a 89       	ldd	r25, Y+18	; 0x12
     e40:	80 70       	andi	r24, 0x00	; 0
     e42:	97 70       	andi	r25, 0x07	; 7
     e44:	88 0f       	add	r24, r24
     e46:	89 2f       	mov	r24, r25
     e48:	88 1f       	adc	r24, r24
     e4a:	99 0b       	sbc	r25, r25
     e4c:	91 95       	neg	r25
     e4e:	80 6a       	ori	r24, 0xA0	; 160
     e50:	0e 94 8d 1a 	call	0x351a	; 0x351a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
     e54:	0e 94 ca 1a 	call	0x3594	; 0x3594 <TWI_getStatus>
     e58:	88 31       	cpi	r24, 0x18	; 24
     e5a:	11 f0       	breq	.+4      	; 0xe60 <EEPROM_readByte+0x58>
		return ERROR;
     e5c:	1f 8a       	std	Y+23, r1	; 0x17
     e5e:	ba c0       	rjmp	.+372    	; 0xfd4 <EEPROM_readByte+0x1cc>

	/* Send the required memory location address*/
	TWI_writeByte((uint8)(u16addr));
     e60:	89 89       	ldd	r24, Y+17	; 0x11
     e62:	0e 94 8d 1a 	call	0x351a	; 0x351a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_DATA_ACK)
     e66:	0e 94 ca 1a 	call	0x3594	; 0x3594 <TWI_getStatus>
     e6a:	88 32       	cpi	r24, 0x28	; 40
     e6c:	11 f0       	breq	.+4      	; 0xe72 <EEPROM_readByte+0x6a>
		return ERROR;
     e6e:	1f 8a       	std	Y+23, r1	; 0x17
     e70:	b1 c0       	rjmp	.+354    	; 0xfd4 <EEPROM_readByte+0x1cc>

	/*Send the Repeated Start Bit*/
	TWI_start();
     e72:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <TWI_start>
	if (TWI_getStatus() != TWI_REP_START)
     e76:	0e 94 ca 1a 	call	0x3594	; 0x3594 <TWI_getStatus>
     e7a:	80 31       	cpi	r24, 0x10	; 16
     e7c:	11 f0       	breq	.+4      	; 0xe82 <EEPROM_readByte+0x7a>
		return ERROR;
     e7e:	1f 8a       	std	Y+23, r1	; 0x17
     e80:	a9 c0       	rjmp	.+338    	; 0xfd4 <EEPROM_readByte+0x1cc>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read)*/
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     e82:	89 89       	ldd	r24, Y+17	; 0x11
     e84:	9a 89       	ldd	r25, Y+18	; 0x12
     e86:	80 70       	andi	r24, 0x00	; 0
     e88:	97 70       	andi	r25, 0x07	; 7
     e8a:	88 0f       	add	r24, r24
     e8c:	89 2f       	mov	r24, r25
     e8e:	88 1f       	adc	r24, r24
     e90:	99 0b       	sbc	r25, r25
     e92:	91 95       	neg	r25
     e94:	81 6a       	ori	r24, 0xA1	; 161
     e96:	0e 94 8d 1a 	call	0x351a	; 0x351a <TWI_writeByte>
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
     e9a:	0e 94 ca 1a 	call	0x3594	; 0x3594 <TWI_getStatus>
     e9e:	80 34       	cpi	r24, 0x40	; 64
     ea0:	11 f0       	breq	.+4      	; 0xea6 <EEPROM_readByte+0x9e>
		return ERROR;
     ea2:	1f 8a       	std	Y+23, r1	; 0x17
     ea4:	97 c0       	rjmp	.+302    	; 0xfd4 <EEPROM_readByte+0x1cc>

	for(i=0 ;i<len; i++){
     ea6:	18 8a       	std	Y+16, r1	; 0x10
     ea8:	1f 86       	std	Y+15, r1	; 0x0f
     eaa:	88 c0       	rjmp	.+272    	; 0xfbc <EEPROM_readByte+0x1b4>
		/* Read Bytes from Memory with ACK*/
		u8data[i] = TWI_readByteWithACK();
     eac:	2b 89       	ldd	r18, Y+19	; 0x13
     eae:	3c 89       	ldd	r19, Y+20	; 0x14
     eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
     eb2:	98 89       	ldd	r25, Y+16	; 0x10
     eb4:	89 01       	movw	r16, r18
     eb6:	08 0f       	add	r16, r24
     eb8:	19 1f       	adc	r17, r25
     eba:	0e 94 a4 1a 	call	0x3548	; 0x3548 <TWI_readByteWithACK>
     ebe:	f8 01       	movw	r30, r16
     ec0:	80 83       	st	Z, r24
		if (TWI_getStatus() != TWI_MR_DATA_ACK)
     ec2:	0e 94 ca 1a 	call	0x3594	; 0x3594 <TWI_getStatus>
     ec6:	80 35       	cpi	r24, 0x50	; 80
     ec8:	11 f0       	breq	.+4      	; 0xece <EEPROM_readByte+0xc6>
		{
			return ERROR;
     eca:	1f 8a       	std	Y+23, r1	; 0x17
     ecc:	83 c0       	rjmp	.+262    	; 0xfd4 <EEPROM_readByte+0x1cc>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	a0 e2       	ldi	r26, 0x20	; 32
     ed4:	b1 e4       	ldi	r27, 0x41	; 65
     ed6:	8b 87       	std	Y+11, r24	; 0x0b
     ed8:	9c 87       	std	Y+12, r25	; 0x0c
     eda:	ad 87       	std	Y+13, r26	; 0x0d
     edc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ede:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	4a ef       	ldi	r20, 0xFA	; 250
     eec:	54 e4       	ldi	r21, 0x44	; 68
     eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	8f 83       	std	Y+7, r24	; 0x07
     ef8:	98 87       	std	Y+8, r25	; 0x08
     efa:	a9 87       	std	Y+9, r26	; 0x09
     efc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     efe:	6f 81       	ldd	r22, Y+7	; 0x07
     f00:	78 85       	ldd	r23, Y+8	; 0x08
     f02:	89 85       	ldd	r24, Y+9	; 0x09
     f04:	9a 85       	ldd	r25, Y+10	; 0x0a
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e8       	ldi	r20, 0x80	; 128
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f12:	88 23       	and	r24, r24
     f14:	2c f4       	brge	.+10     	; 0xf20 <EEPROM_readByte+0x118>
		__ticks = 1;
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	9e 83       	std	Y+6, r25	; 0x06
     f1c:	8d 83       	std	Y+5, r24	; 0x05
     f1e:	3f c0       	rjmp	.+126    	; 0xf9e <EEPROM_readByte+0x196>
	else if (__tmp > 65535)
     f20:	6f 81       	ldd	r22, Y+7	; 0x07
     f22:	78 85       	ldd	r23, Y+8	; 0x08
     f24:	89 85       	ldd	r24, Y+9	; 0x09
     f26:	9a 85       	ldd	r25, Y+10	; 0x0a
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	3f ef       	ldi	r19, 0xFF	; 255
     f2c:	4f e7       	ldi	r20, 0x7F	; 127
     f2e:	57 e4       	ldi	r21, 0x47	; 71
     f30:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f34:	18 16       	cp	r1, r24
     f36:	4c f5       	brge	.+82     	; 0xf8a <EEPROM_readByte+0x182>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f38:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e2       	ldi	r20, 0x20	; 32
     f46:	51 e4       	ldi	r21, 0x41	; 65
     f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	bc 01       	movw	r22, r24
     f52:	cd 01       	movw	r24, r26
     f54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f58:	dc 01       	movw	r26, r24
     f5a:	cb 01       	movw	r24, r22
     f5c:	9e 83       	std	Y+6, r25	; 0x06
     f5e:	8d 83       	std	Y+5, r24	; 0x05
     f60:	0f c0       	rjmp	.+30     	; 0xf80 <EEPROM_readByte+0x178>
     f62:	88 ec       	ldi	r24, 0xC8	; 200
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <EEPROM_readByte+0x166>
     f72:	9c 83       	std	Y+4, r25	; 0x04
     f74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f76:	8d 81       	ldd	r24, Y+5	; 0x05
     f78:	9e 81       	ldd	r25, Y+6	; 0x06
     f7a:	01 97       	sbiw	r24, 0x01	; 1
     f7c:	9e 83       	std	Y+6, r25	; 0x06
     f7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f80:	8d 81       	ldd	r24, Y+5	; 0x05
     f82:	9e 81       	ldd	r25, Y+6	; 0x06
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	69 f7       	brne	.-38     	; 0xf62 <EEPROM_readByte+0x15a>
     f88:	14 c0       	rjmp	.+40     	; 0xfb2 <EEPROM_readByte+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8a:	6f 81       	ldd	r22, Y+7	; 0x07
     f8c:	78 85       	ldd	r23, Y+8	; 0x08
     f8e:	89 85       	ldd	r24, Y+9	; 0x09
     f90:	9a 85       	ldd	r25, Y+10	; 0x0a
     f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	9e 83       	std	Y+6, r25	; 0x06
     f9c:	8d 83       	std	Y+5, r24	; 0x05
     f9e:	8d 81       	ldd	r24, Y+5	; 0x05
     fa0:	9e 81       	ldd	r25, Y+6	; 0x06
     fa2:	9a 83       	std	Y+2, r25	; 0x02
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	f1 f7       	brne	.-4      	; 0xfaa <EEPROM_readByte+0x1a2>
     fae:	9a 83       	std	Y+2, r25	; 0x02
     fb0:	89 83       	std	Y+1, r24	; 0x01
	 * memory location address and R/W=1 (Read)*/
	TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
	if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
		return ERROR;

	for(i=0 ;i<len; i++){
     fb2:	8f 85       	ldd	r24, Y+15	; 0x0f
     fb4:	98 89       	ldd	r25, Y+16	; 0x10
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	98 8b       	std	Y+16, r25	; 0x10
     fba:	8f 87       	std	Y+15, r24	; 0x0f
     fbc:	2f 85       	ldd	r18, Y+15	; 0x0f
     fbe:	38 89       	ldd	r19, Y+16	; 0x10
     fc0:	8d 89       	ldd	r24, Y+21	; 0x15
     fc2:	9e 89       	ldd	r25, Y+22	; 0x16
     fc4:	28 17       	cp	r18, r24
     fc6:	39 07       	cpc	r19, r25
     fc8:	08 f4       	brcc	.+2      	; 0xfcc <EEPROM_readByte+0x1c4>
     fca:	70 cf       	rjmp	.-288    	; 0xeac <EEPROM_readByte+0xa4>
		}
		_delay_ms(10);
	}

	/*Send the Stop Bit*/
	TWI_stop();
     fcc:	0e 94 82 1a 	call	0x3504	; 0x3504 <TWI_stop>

	return SUCCESS;
     fd0:	f1 e0       	ldi	r31, 0x01	; 1
     fd2:	ff 8b       	std	Y+23, r31	; 0x17
     fd4:	8f 89       	ldd	r24, Y+23	; 0x17
}
     fd6:	67 96       	adiw	r28, 0x17	; 23
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	08 95       	ret

00000fec <GPIO_setupPinDirection>:
/*
 * Description:
 * Set the required direction of pin input/output.
 * If the input port number on pin number is incorrect, The function will not handle the request.
 * */
void GPIO_setupPinDirection(uint8 port_num,uint8 pin_num,GPIO_PinDirectionType direction){
     fec:	df 93       	push	r29
     fee:	cf 93       	push	r28
     ff0:	00 d0       	rcall	.+0      	; 0xff2 <GPIO_setupPinDirection+0x6>
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <GPIO_setupPinDirection+0x8>
     ff4:	0f 92       	push	r0
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
     ffa:	89 83       	std	Y+1, r24	; 0x01
     ffc:	6a 83       	std	Y+2, r22	; 0x02
     ffe:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if(port_num >= NUM_OF_PORTS  || pin_num >= NUM_OF_PINS_PER_PORTS){
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	84 30       	cpi	r24, 0x04	; 4
    1004:	08 f0       	brcs	.+2      	; 0x1008 <GPIO_setupPinDirection+0x1c>
    1006:	d5 c0       	rjmp	.+426    	; 0x11b2 <GPIO_setupPinDirection+0x1c6>
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	88 30       	cpi	r24, 0x08	; 8
    100c:	08 f0       	brcs	.+2      	; 0x1010 <GPIO_setupPinDirection+0x24>
    100e:	d1 c0       	rjmp	.+418    	; 0x11b2 <GPIO_setupPinDirection+0x1c6>
		/* DO NOTHING */

	}
	else{
		switch(port_num)
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	3d 83       	std	Y+5, r19	; 0x05
    1018:	2c 83       	std	Y+4, r18	; 0x04
    101a:	8c 81       	ldd	r24, Y+4	; 0x04
    101c:	9d 81       	ldd	r25, Y+5	; 0x05
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	91 05       	cpc	r25, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <GPIO_setupPinDirection+0x3a>
    1024:	43 c0       	rjmp	.+134    	; 0x10ac <GPIO_setupPinDirection+0xc0>
    1026:	2c 81       	ldd	r18, Y+4	; 0x04
    1028:	3d 81       	ldd	r19, Y+5	; 0x05
    102a:	22 30       	cpi	r18, 0x02	; 2
    102c:	31 05       	cpc	r19, r1
    102e:	2c f4       	brge	.+10     	; 0x103a <GPIO_setupPinDirection+0x4e>
    1030:	8c 81       	ldd	r24, Y+4	; 0x04
    1032:	9d 81       	ldd	r25, Y+5	; 0x05
    1034:	00 97       	sbiw	r24, 0x00	; 0
    1036:	71 f0       	breq	.+28     	; 0x1054 <GPIO_setupPinDirection+0x68>
    1038:	bc c0       	rjmp	.+376    	; 0x11b2 <GPIO_setupPinDirection+0x1c6>
    103a:	2c 81       	ldd	r18, Y+4	; 0x04
    103c:	3d 81       	ldd	r19, Y+5	; 0x05
    103e:	22 30       	cpi	r18, 0x02	; 2
    1040:	31 05       	cpc	r19, r1
    1042:	09 f4       	brne	.+2      	; 0x1046 <GPIO_setupPinDirection+0x5a>
    1044:	5f c0       	rjmp	.+190    	; 0x1104 <GPIO_setupPinDirection+0x118>
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	91 05       	cpc	r25, r1
    104e:	09 f4       	brne	.+2      	; 0x1052 <GPIO_setupPinDirection+0x66>
    1050:	85 c0       	rjmp	.+266    	; 0x115c <GPIO_setupPinDirection+0x170>
    1052:	af c0       	rjmp	.+350    	; 0x11b2 <GPIO_setupPinDirection+0x1c6>
		/* Setup the pin direction as required */
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	a1 f4       	brne	.+40     	; 0x1082 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    105a:	aa e3       	ldi	r26, 0x3A	; 58
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	ea e3       	ldi	r30, 0x3A	; 58
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <GPIO_setupPinDirection+0x8c>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <GPIO_setupPinDirection+0x88>
    107c:	84 2b       	or	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	98 c0       	rjmp	.+304    	; 0x11b2 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRA,pin_num);
    1082:	aa e3       	ldi	r26, 0x3A	; 58
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	ea e3       	ldi	r30, 0x3A	; 58
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	48 2f       	mov	r20, r24
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	28 2f       	mov	r18, r24
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	02 2e       	mov	r0, r18
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <GPIO_setupPinDirection+0xb4>
    109c:	88 0f       	add	r24, r24
    109e:	99 1f       	adc	r25, r25
    10a0:	0a 94       	dec	r0
    10a2:	e2 f7       	brpl	.-8      	; 0x109c <GPIO_setupPinDirection+0xb0>
    10a4:	80 95       	com	r24
    10a6:	84 23       	and	r24, r20
    10a8:	8c 93       	st	X, r24
    10aa:	83 c0       	rjmp	.+262    	; 0x11b2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	81 30       	cpi	r24, 0x01	; 1
    10b0:	a1 f4       	brne	.+40     	; 0x10da <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    10b2:	a7 e3       	ldi	r26, 0x37	; 55
    10b4:	b0 e0       	ldi	r27, 0x00	; 0
    10b6:	e7 e3       	ldi	r30, 0x37	; 55
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	80 81       	ld	r24, Z
    10bc:	48 2f       	mov	r20, r24
    10be:	8a 81       	ldd	r24, Y+2	; 0x02
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	81 e0       	ldi	r24, 0x01	; 1
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	02 2e       	mov	r0, r18
    10ca:	02 c0       	rjmp	.+4      	; 0x10d0 <GPIO_setupPinDirection+0xe4>
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	0a 94       	dec	r0
    10d2:	e2 f7       	brpl	.-8      	; 0x10cc <GPIO_setupPinDirection+0xe0>
    10d4:	84 2b       	or	r24, r20
    10d6:	8c 93       	st	X, r24
    10d8:	6c c0       	rjmp	.+216    	; 0x11b2 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRB,pin_num);
    10da:	a7 e3       	ldi	r26, 0x37	; 55
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	e7 e3       	ldi	r30, 0x37	; 55
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	48 2f       	mov	r20, r24
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	02 2e       	mov	r0, r18
    10f2:	02 c0       	rjmp	.+4      	; 0x10f8 <GPIO_setupPinDirection+0x10c>
    10f4:	88 0f       	add	r24, r24
    10f6:	99 1f       	adc	r25, r25
    10f8:	0a 94       	dec	r0
    10fa:	e2 f7       	brpl	.-8      	; 0x10f4 <GPIO_setupPinDirection+0x108>
    10fc:	80 95       	com	r24
    10fe:	84 23       	and	r24, r20
    1100:	8c 93       	st	X, r24
    1102:	57 c0       	rjmp	.+174    	; 0x11b2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	a1 f4       	brne	.+40     	; 0x1132 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    110a:	a4 e3       	ldi	r26, 0x34	; 52
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	e4 e3       	ldi	r30, 0x34	; 52
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
    1114:	48 2f       	mov	r20, r24
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	02 2e       	mov	r0, r18
    1122:	02 c0       	rjmp	.+4      	; 0x1128 <GPIO_setupPinDirection+0x13c>
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	0a 94       	dec	r0
    112a:	e2 f7       	brpl	.-8      	; 0x1124 <GPIO_setupPinDirection+0x138>
    112c:	84 2b       	or	r24, r20
    112e:	8c 93       	st	X, r24
    1130:	40 c0       	rjmp	.+128    	; 0x11b2 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRC,pin_num);
    1132:	a4 e3       	ldi	r26, 0x34	; 52
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e4 e3       	ldi	r30, 0x34	; 52
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	48 2f       	mov	r20, r24
    113e:	8a 81       	ldd	r24, Y+2	; 0x02
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	02 2e       	mov	r0, r18
    114a:	02 c0       	rjmp	.+4      	; 0x1150 <GPIO_setupPinDirection+0x164>
    114c:	88 0f       	add	r24, r24
    114e:	99 1f       	adc	r25, r25
    1150:	0a 94       	dec	r0
    1152:	e2 f7       	brpl	.-8      	; 0x114c <GPIO_setupPinDirection+0x160>
    1154:	80 95       	com	r24
    1156:	84 23       	and	r24, r20
    1158:	8c 93       	st	X, r24
    115a:	2b c0       	rjmp	.+86     	; 0x11b2 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	a1 f4       	brne	.+40     	; 0x118a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1162:	a1 e3       	ldi	r26, 0x31	; 49
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e1 e3       	ldi	r30, 0x31	; 49
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	48 2f       	mov	r20, r24
    116e:	8a 81       	ldd	r24, Y+2	; 0x02
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	02 2e       	mov	r0, r18
    117a:	02 c0       	rjmp	.+4      	; 0x1180 <GPIO_setupPinDirection+0x194>
    117c:	88 0f       	add	r24, r24
    117e:	99 1f       	adc	r25, r25
    1180:	0a 94       	dec	r0
    1182:	e2 f7       	brpl	.-8      	; 0x117c <GPIO_setupPinDirection+0x190>
    1184:	84 2b       	or	r24, r20
    1186:	8c 93       	st	X, r24
    1188:	14 c0       	rjmp	.+40     	; 0x11b2 <GPIO_setupPinDirection+0x1c6>
			}
			else{
				CLEAR_BIT(DDRD,pin_num);
    118a:	a1 e3       	ldi	r26, 0x31	; 49
    118c:	b0 e0       	ldi	r27, 0x00	; 0
    118e:	e1 e3       	ldi	r30, 0x31	; 49
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	80 81       	ld	r24, Z
    1194:	48 2f       	mov	r20, r24
    1196:	8a 81       	ldd	r24, Y+2	; 0x02
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	02 2e       	mov	r0, r18
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <GPIO_setupPinDirection+0x1bc>
    11a4:	88 0f       	add	r24, r24
    11a6:	99 1f       	adc	r25, r25
    11a8:	0a 94       	dec	r0
    11aa:	e2 f7       	brpl	.-8      	; 0x11a4 <GPIO_setupPinDirection+0x1b8>
    11ac:	80 95       	com	r24
    11ae:	84 23       	and	r24, r20
    11b0:	8c 93       	st	X, r24
			break;
		}

	}

}
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <GPIO_writePin>:
 * Description:
 * Write the value LOGIC HIGH or LOGIC LOW on the required pin
 * If the input port number of pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 * */
void GPIO_writePin(uint8 port_num, uint8 pin_num,uint8 value){
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <GPIO_writePin+0x6>
    11c8:	00 d0       	rcall	.+0      	; 0x11ca <GPIO_writePin+0x8>
    11ca:	0f 92       	push	r0
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	89 83       	std	Y+1, r24	; 0x01
    11d2:	6a 83       	std	Y+2, r22	; 0x02
    11d4:	4b 83       	std	Y+3, r20	; 0x03

	if(port_num >= NUM_OF_PORTS  || pin_num >= NUM_OF_PINS_PER_PORTS){
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	08 f0       	brcs	.+2      	; 0x11de <GPIO_writePin+0x1c>
    11dc:	d5 c0       	rjmp	.+426    	; 0x1388 <GPIO_writePin+0x1c6>
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	88 30       	cpi	r24, 0x08	; 8
    11e2:	08 f0       	brcs	.+2      	; 0x11e6 <GPIO_writePin+0x24>
    11e4:	d1 c0       	rjmp	.+418    	; 0x1388 <GPIO_writePin+0x1c6>
		/* DO NOTHING */

	}
	else
	{
		switch(port_num){
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	28 2f       	mov	r18, r24
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	3d 83       	std	Y+5, r19	; 0x05
    11ee:	2c 83       	std	Y+4, r18	; 0x04
    11f0:	8c 81       	ldd	r24, Y+4	; 0x04
    11f2:	9d 81       	ldd	r25, Y+5	; 0x05
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	91 05       	cpc	r25, r1
    11f8:	09 f4       	brne	.+2      	; 0x11fc <GPIO_writePin+0x3a>
    11fa:	43 c0       	rjmp	.+134    	; 0x1282 <GPIO_writePin+0xc0>
    11fc:	2c 81       	ldd	r18, Y+4	; 0x04
    11fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1200:	22 30       	cpi	r18, 0x02	; 2
    1202:	31 05       	cpc	r19, r1
    1204:	2c f4       	brge	.+10     	; 0x1210 <GPIO_writePin+0x4e>
    1206:	8c 81       	ldd	r24, Y+4	; 0x04
    1208:	9d 81       	ldd	r25, Y+5	; 0x05
    120a:	00 97       	sbiw	r24, 0x00	; 0
    120c:	71 f0       	breq	.+28     	; 0x122a <GPIO_writePin+0x68>
    120e:	bc c0       	rjmp	.+376    	; 0x1388 <GPIO_writePin+0x1c6>
    1210:	2c 81       	ldd	r18, Y+4	; 0x04
    1212:	3d 81       	ldd	r19, Y+5	; 0x05
    1214:	22 30       	cpi	r18, 0x02	; 2
    1216:	31 05       	cpc	r19, r1
    1218:	09 f4       	brne	.+2      	; 0x121c <GPIO_writePin+0x5a>
    121a:	5f c0       	rjmp	.+190    	; 0x12da <GPIO_writePin+0x118>
    121c:	8c 81       	ldd	r24, Y+4	; 0x04
    121e:	9d 81       	ldd	r25, Y+5	; 0x05
    1220:	83 30       	cpi	r24, 0x03	; 3
    1222:	91 05       	cpc	r25, r1
    1224:	09 f4       	brne	.+2      	; 0x1228 <GPIO_writePin+0x66>
    1226:	85 c0       	rjmp	.+266    	; 0x1332 <GPIO_writePin+0x170>
    1228:	af c0       	rjmp	.+350    	; 0x1388 <GPIO_writePin+0x1c6>
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	a1 f4       	brne	.+40     	; 0x1258 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1230:	ab e3       	ldi	r26, 0x3B	; 59
    1232:	b0 e0       	ldi	r27, 0x00	; 0
    1234:	eb e3       	ldi	r30, 0x3B	; 59
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	48 2f       	mov	r20, r24
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	28 2f       	mov	r18, r24
    1240:	30 e0       	ldi	r19, 0x00	; 0
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	90 e0       	ldi	r25, 0x00	; 0
    1246:	02 2e       	mov	r0, r18
    1248:	02 c0       	rjmp	.+4      	; 0x124e <GPIO_writePin+0x8c>
    124a:	88 0f       	add	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	0a 94       	dec	r0
    1250:	e2 f7       	brpl	.-8      	; 0x124a <GPIO_writePin+0x88>
    1252:	84 2b       	or	r24, r20
    1254:	8c 93       	st	X, r24
    1256:	98 c0       	rjmp	.+304    	; 0x1388 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1258:	ab e3       	ldi	r26, 0x3B	; 59
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	eb e3       	ldi	r30, 0x3B	; 59
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	80 81       	ld	r24, Z
    1262:	48 2f       	mov	r20, r24
    1264:	8a 81       	ldd	r24, Y+2	; 0x02
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	02 2e       	mov	r0, r18
    1270:	02 c0       	rjmp	.+4      	; 0x1276 <GPIO_writePin+0xb4>
    1272:	88 0f       	add	r24, r24
    1274:	99 1f       	adc	r25, r25
    1276:	0a 94       	dec	r0
    1278:	e2 f7       	brpl	.-8      	; 0x1272 <GPIO_writePin+0xb0>
    127a:	80 95       	com	r24
    127c:	84 23       	and	r24, r20
    127e:	8c 93       	st	X, r24
    1280:	83 c0       	rjmp	.+262    	; 0x1388 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	81 30       	cpi	r24, 0x01	; 1
    1286:	a1 f4       	brne	.+40     	; 0x12b0 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1288:	a8 e3       	ldi	r26, 0x38	; 56
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e8 e3       	ldi	r30, 0x38	; 56
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	48 2f       	mov	r20, r24
    1294:	8a 81       	ldd	r24, Y+2	; 0x02
    1296:	28 2f       	mov	r18, r24
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	02 2e       	mov	r0, r18
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <GPIO_writePin+0xe4>
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	0a 94       	dec	r0
    12a8:	e2 f7       	brpl	.-8      	; 0x12a2 <GPIO_writePin+0xe0>
    12aa:	84 2b       	or	r24, r20
    12ac:	8c 93       	st	X, r24
    12ae:	6c c0       	rjmp	.+216    	; 0x1388 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    12b0:	a8 e3       	ldi	r26, 0x38	; 56
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	e8 e3       	ldi	r30, 0x38	; 56
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <GPIO_writePin+0x10c>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <GPIO_writePin+0x108>
    12d2:	80 95       	com	r24
    12d4:	84 23       	and	r24, r20
    12d6:	8c 93       	st	X, r24
    12d8:	57 c0       	rjmp	.+174    	; 0x1388 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	a1 f4       	brne	.+40     	; 0x1308 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    12e0:	a5 e3       	ldi	r26, 0x35	; 53
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e5 e3       	ldi	r30, 0x35	; 53
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <GPIO_writePin+0x13c>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <GPIO_writePin+0x138>
    1302:	84 2b       	or	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	40 c0       	rjmp	.+128    	; 0x1388 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1308:	a5 e3       	ldi	r26, 0x35	; 53
    130a:	b0 e0       	ldi	r27, 0x00	; 0
    130c:	e5 e3       	ldi	r30, 0x35	; 53
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	48 2f       	mov	r20, r24
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	28 2f       	mov	r18, r24
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	81 e0       	ldi	r24, 0x01	; 1
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	02 2e       	mov	r0, r18
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <GPIO_writePin+0x164>
    1322:	88 0f       	add	r24, r24
    1324:	99 1f       	adc	r25, r25
    1326:	0a 94       	dec	r0
    1328:	e2 f7       	brpl	.-8      	; 0x1322 <GPIO_writePin+0x160>
    132a:	80 95       	com	r24
    132c:	84 23       	and	r24, r20
    132e:	8c 93       	st	X, r24
    1330:	2b c0       	rjmp	.+86     	; 0x1388 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	81 30       	cpi	r24, 0x01	; 1
    1336:	a1 f4       	brne	.+40     	; 0x1360 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1338:	a2 e3       	ldi	r26, 0x32	; 50
    133a:	b0 e0       	ldi	r27, 0x00	; 0
    133c:	e2 e3       	ldi	r30, 0x32	; 50
    133e:	f0 e0       	ldi	r31, 0x00	; 0
    1340:	80 81       	ld	r24, Z
    1342:	48 2f       	mov	r20, r24
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	02 2e       	mov	r0, r18
    1350:	02 c0       	rjmp	.+4      	; 0x1356 <GPIO_writePin+0x194>
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	0a 94       	dec	r0
    1358:	e2 f7       	brpl	.-8      	; 0x1352 <GPIO_writePin+0x190>
    135a:	84 2b       	or	r24, r20
    135c:	8c 93       	st	X, r24
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1360:	a2 e3       	ldi	r26, 0x32	; 50
    1362:	b0 e0       	ldi	r27, 0x00	; 0
    1364:	e2 e3       	ldi	r30, 0x32	; 50
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	48 2f       	mov	r20, r24
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 2e       	mov	r0, r18
    1378:	02 c0       	rjmp	.+4      	; 0x137e <GPIO_writePin+0x1bc>
    137a:	88 0f       	add	r24, r24
    137c:	99 1f       	adc	r25, r25
    137e:	0a 94       	dec	r0
    1380:	e2 f7       	brpl	.-8      	; 0x137a <GPIO_writePin+0x1b8>
    1382:	80 95       	com	r24
    1384:	84 23       	and	r24, r20
    1386:	8c 93       	st	X, r24
	}




}
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	0f 90       	pop	r0
    1392:	cf 91       	pop	r28
    1394:	df 91       	pop	r29
    1396:	08 95       	ret

00001398 <GPIO_readPin>:
/*
 * Description:
 * Read and return the value for the required pin,it should be LOGDIC HIGH or LOGIC LOW.
 * If the input port number or pin number are not correct, The function will return LOGIC LOW.
 * */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num){
    1398:	df 93       	push	r29
    139a:	cf 93       	push	r28
    139c:	00 d0       	rcall	.+0      	; 0x139e <GPIO_readPin+0x6>
    139e:	00 d0       	rcall	.+0      	; 0x13a0 <GPIO_readPin+0x8>
    13a0:	00 d0       	rcall	.+0      	; 0x13a2 <GPIO_readPin+0xa>
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	6b 83       	std	Y+3, r22	; 0x03

	uint8 state = LOGIC_LOW;
    13aa:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS  || pin_num >= NUM_OF_PINS_PER_PORTS){
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	84 30       	cpi	r24, 0x04	; 4
    13b0:	18 f4       	brcc	.+6      	; 0x13b8 <GPIO_readPin+0x20>
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	88 30       	cpi	r24, 0x08	; 8
    13b6:	18 f0       	brcs	.+6      	; 0x13be <GPIO_readPin+0x26>

		return state;
    13b8:	29 81       	ldd	r18, Y+1	; 0x01
    13ba:	2e 83       	std	Y+6, r18	; 0x06
    13bc:	82 c0       	rjmp	.+260    	; 0x14c2 <GPIO_readPin+0x12a>

	}
	else
	{
		switch(port_num){
    13be:	8a 81       	ldd	r24, Y+2	; 0x02
    13c0:	48 2f       	mov	r20, r24
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	5d 83       	std	Y+5, r21	; 0x05
    13c6:	4c 83       	std	Y+4, r20	; 0x04
    13c8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ca:	9d 81       	ldd	r25, Y+5	; 0x05
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	91 05       	cpc	r25, r1
    13d0:	79 f1       	breq	.+94     	; 0x1430 <GPIO_readPin+0x98>
    13d2:	2c 81       	ldd	r18, Y+4	; 0x04
    13d4:	3d 81       	ldd	r19, Y+5	; 0x05
    13d6:	22 30       	cpi	r18, 0x02	; 2
    13d8:	31 05       	cpc	r19, r1
    13da:	34 f4       	brge	.+12     	; 0x13e8 <GPIO_readPin+0x50>
    13dc:	4c 81       	ldd	r20, Y+4	; 0x04
    13de:	5d 81       	ldd	r21, Y+5	; 0x05
    13e0:	41 15       	cp	r20, r1
    13e2:	51 05       	cpc	r21, r1
    13e4:	69 f0       	breq	.+26     	; 0x1400 <GPIO_readPin+0x68>
    13e6:	6b c0       	rjmp	.+214    	; 0x14be <GPIO_readPin+0x126>
    13e8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ea:	9d 81       	ldd	r25, Y+5	; 0x05
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	91 05       	cpc	r25, r1
    13f0:	b9 f1       	breq	.+110    	; 0x1460 <GPIO_readPin+0xc8>
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
    13f4:	3d 81       	ldd	r19, Y+5	; 0x05
    13f6:	23 30       	cpi	r18, 0x03	; 3
    13f8:	31 05       	cpc	r19, r1
    13fa:	09 f4       	brne	.+2      	; 0x13fe <GPIO_readPin+0x66>
    13fc:	49 c0       	rjmp	.+146    	; 0x1490 <GPIO_readPin+0xf8>
    13fe:	5f c0       	rjmp	.+190    	; 0x14be <GPIO_readPin+0x126>
		case PORTA_ID:
			if( BIT_IS_SET(PINA,pin_num) )
    1400:	e9 e3       	ldi	r30, 0x39	; 57
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <GPIO_readPin+0x80>
    1414:	55 95       	asr	r21
    1416:	47 95       	ror	r20
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <GPIO_readPin+0x7c>
    141c:	ca 01       	movw	r24, r20
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	90 70       	andi	r25, 0x00	; 0
    1422:	88 23       	and	r24, r24
    1424:	19 f0       	breq	.+6      	; 0x142c <GPIO_readPin+0x94>
			{
				state = LOGIC_HIGH;
    1426:	81 e0       	ldi	r24, 0x01	; 1
    1428:	89 83       	std	Y+1, r24	; 0x01
    142a:	49 c0       	rjmp	.+146    	; 0x14be <GPIO_readPin+0x126>

			}
			else
			{
				state = LOGIC_LOW;
    142c:	19 82       	std	Y+1, r1	; 0x01
    142e:	47 c0       	rjmp	.+142    	; 0x14be <GPIO_readPin+0x126>
			}
			break;
		case PORTB_ID:
			if( BIT_IS_SET(PINB,pin_num) )
    1430:	e6 e3       	ldi	r30, 0x36	; 54
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	88 2f       	mov	r24, r24
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	a9 01       	movw	r20, r18
    1442:	02 c0       	rjmp	.+4      	; 0x1448 <GPIO_readPin+0xb0>
    1444:	55 95       	asr	r21
    1446:	47 95       	ror	r20
    1448:	8a 95       	dec	r24
    144a:	e2 f7       	brpl	.-8      	; 0x1444 <GPIO_readPin+0xac>
    144c:	ca 01       	movw	r24, r20
    144e:	81 70       	andi	r24, 0x01	; 1
    1450:	90 70       	andi	r25, 0x00	; 0
    1452:	88 23       	and	r24, r24
    1454:	19 f0       	breq	.+6      	; 0x145c <GPIO_readPin+0xc4>
			{
				state = LOGIC_HIGH;
    1456:	81 e0       	ldi	r24, 0x01	; 1
    1458:	89 83       	std	Y+1, r24	; 0x01
    145a:	31 c0       	rjmp	.+98     	; 0x14be <GPIO_readPin+0x126>

			}
			else
			{
				state = LOGIC_LOW;
    145c:	19 82       	std	Y+1, r1	; 0x01
    145e:	2f c0       	rjmp	.+94     	; 0x14be <GPIO_readPin+0x126>
			}
			break;
		case PORTC_ID:
			if( BIT_IS_SET(PINC,pin_num) )
    1460:	e3 e3       	ldi	r30, 0x33	; 51
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	88 2f       	mov	r24, r24
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a9 01       	movw	r20, r18
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <GPIO_readPin+0xe0>
    1474:	55 95       	asr	r21
    1476:	47 95       	ror	r20
    1478:	8a 95       	dec	r24
    147a:	e2 f7       	brpl	.-8      	; 0x1474 <GPIO_readPin+0xdc>
    147c:	ca 01       	movw	r24, r20
    147e:	81 70       	andi	r24, 0x01	; 1
    1480:	90 70       	andi	r25, 0x00	; 0
    1482:	88 23       	and	r24, r24
    1484:	19 f0       	breq	.+6      	; 0x148c <GPIO_readPin+0xf4>
			{
				state = LOGIC_HIGH;
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	89 83       	std	Y+1, r24	; 0x01
    148a:	19 c0       	rjmp	.+50     	; 0x14be <GPIO_readPin+0x126>

			}
			else
			{
				state = LOGIC_LOW;
    148c:	19 82       	std	Y+1, r1	; 0x01
    148e:	17 c0       	rjmp	.+46     	; 0x14be <GPIO_readPin+0x126>
			}
			break;
		case PORTD_ID:
			if( BIT_IS_SET(PIND,pin_num) )
    1490:	e0 e3       	ldi	r30, 0x30	; 48
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 2f       	mov	r24, r24
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a9 01       	movw	r20, r18
    14a2:	02 c0       	rjmp	.+4      	; 0x14a8 <GPIO_readPin+0x110>
    14a4:	55 95       	asr	r21
    14a6:	47 95       	ror	r20
    14a8:	8a 95       	dec	r24
    14aa:	e2 f7       	brpl	.-8      	; 0x14a4 <GPIO_readPin+0x10c>
    14ac:	ca 01       	movw	r24, r20
    14ae:	81 70       	andi	r24, 0x01	; 1
    14b0:	90 70       	andi	r25, 0x00	; 0
    14b2:	88 23       	and	r24, r24
    14b4:	19 f0       	breq	.+6      	; 0x14bc <GPIO_readPin+0x124>
			{
				state = LOGIC_HIGH;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	89 83       	std	Y+1, r24	; 0x01
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <GPIO_readPin+0x126>

			}
			else
			{
				state = LOGIC_LOW;
    14bc:	19 82       	std	Y+1, r1	; 0x01
			break;

		}

	}
	return state;
    14be:	59 81       	ldd	r21, Y+1	; 0x01
    14c0:	5e 83       	std	Y+6, r21	; 0x06
    14c2:	8e 81       	ldd	r24, Y+6	; 0x06
}
    14c4:	26 96       	adiw	r28, 0x06	; 6
    14c6:	0f b6       	in	r0, 0x3f	; 63
    14c8:	f8 94       	cli
    14ca:	de bf       	out	0x3e, r29	; 62
    14cc:	0f be       	out	0x3f, r0	; 63
    14ce:	cd bf       	out	0x3d, r28	; 61
    14d0:	cf 91       	pop	r28
    14d2:	df 91       	pop	r29
    14d4:	08 95       	ret

000014d6 <GPIO_setupPortDirection>:
 * Setup the direction of the required port all pins input/output.
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 * */
void GPIO_setupPortDirection(uint8 port_num,GPIO_PortDirectionType direction){
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	00 d0       	rcall	.+0      	; 0x14dc <GPIO_setupPortDirection+0x6>
    14dc:	00 d0       	rcall	.+0      	; 0x14de <GPIO_setupPortDirection+0x8>
    14de:	cd b7       	in	r28, 0x3d	; 61
    14e0:	de b7       	in	r29, 0x3e	; 62
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS){
    14e6:	89 81       	ldd	r24, Y+1	; 0x01
    14e8:	84 30       	cpi	r24, 0x04	; 4
    14ea:	90 f5       	brcc	.+100    	; 0x1550 <GPIO_setupPortDirection+0x7a>
		/* DO NOTHING */

	}
	else
	{
		switch(port_num)
    14ec:	89 81       	ldd	r24, Y+1	; 0x01
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	3c 83       	std	Y+4, r19	; 0x04
    14f4:	2b 83       	std	Y+3, r18	; 0x03
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	91 05       	cpc	r25, r1
    14fe:	d1 f0       	breq	.+52     	; 0x1534 <GPIO_setupPortDirection+0x5e>
    1500:	2b 81       	ldd	r18, Y+3	; 0x03
    1502:	3c 81       	ldd	r19, Y+4	; 0x04
    1504:	22 30       	cpi	r18, 0x02	; 2
    1506:	31 05       	cpc	r19, r1
    1508:	2c f4       	brge	.+10     	; 0x1514 <GPIO_setupPortDirection+0x3e>
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	61 f0       	breq	.+24     	; 0x152a <GPIO_setupPortDirection+0x54>
    1512:	1e c0       	rjmp	.+60     	; 0x1550 <GPIO_setupPortDirection+0x7a>
    1514:	2b 81       	ldd	r18, Y+3	; 0x03
    1516:	3c 81       	ldd	r19, Y+4	; 0x04
    1518:	22 30       	cpi	r18, 0x02	; 2
    151a:	31 05       	cpc	r19, r1
    151c:	81 f0       	breq	.+32     	; 0x153e <GPIO_setupPortDirection+0x68>
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	83 30       	cpi	r24, 0x03	; 3
    1524:	91 05       	cpc	r25, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <GPIO_setupPortDirection+0x72>
    1528:	13 c0       	rjmp	.+38     	; 0x1550 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    152a:	ea e3       	ldi	r30, 0x3A	; 58
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	80 83       	st	Z, r24
    1532:	0e c0       	rjmp	.+28     	; 0x1550 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1534:	e7 e3       	ldi	r30, 0x37	; 55
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	80 83       	st	Z, r24
    153c:	09 c0       	rjmp	.+18     	; 0x1550 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    153e:	e4 e3       	ldi	r30, 0x34	; 52
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	80 83       	st	Z, r24
    1546:	04 c0       	rjmp	.+8      	; 0x1550 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1548:	e1 e3       	ldi	r30, 0x31	; 49
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
			break;
		}

	}
}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <GPIO_writePort>:
 * Write the value on the required port.
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value){
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <GPIO_writePort+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <GPIO_writePort+0x8>
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS)
    156e:	89 81       	ldd	r24, Y+1	; 0x01
    1570:	84 30       	cpi	r24, 0x04	; 4
    1572:	90 f5       	brcc	.+100    	; 0x15d8 <GPIO_writePort+0x7a>
		/* DO NOTHING */

	}
	else
	{
		switch(port_num)
    1574:	89 81       	ldd	r24, Y+1	; 0x01
    1576:	28 2f       	mov	r18, r24
    1578:	30 e0       	ldi	r19, 0x00	; 0
    157a:	3c 83       	std	Y+4, r19	; 0x04
    157c:	2b 83       	std	Y+3, r18	; 0x03
    157e:	8b 81       	ldd	r24, Y+3	; 0x03
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	91 05       	cpc	r25, r1
    1586:	d1 f0       	breq	.+52     	; 0x15bc <GPIO_writePort+0x5e>
    1588:	2b 81       	ldd	r18, Y+3	; 0x03
    158a:	3c 81       	ldd	r19, Y+4	; 0x04
    158c:	22 30       	cpi	r18, 0x02	; 2
    158e:	31 05       	cpc	r19, r1
    1590:	2c f4       	brge	.+10     	; 0x159c <GPIO_writePort+0x3e>
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	00 97       	sbiw	r24, 0x00	; 0
    1598:	61 f0       	breq	.+24     	; 0x15b2 <GPIO_writePort+0x54>
    159a:	1e c0       	rjmp	.+60     	; 0x15d8 <GPIO_writePort+0x7a>
    159c:	2b 81       	ldd	r18, Y+3	; 0x03
    159e:	3c 81       	ldd	r19, Y+4	; 0x04
    15a0:	22 30       	cpi	r18, 0x02	; 2
    15a2:	31 05       	cpc	r19, r1
    15a4:	81 f0       	breq	.+32     	; 0x15c6 <GPIO_writePort+0x68>
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	9c 81       	ldd	r25, Y+4	; 0x04
    15aa:	83 30       	cpi	r24, 0x03	; 3
    15ac:	91 05       	cpc	r25, r1
    15ae:	81 f0       	breq	.+32     	; 0x15d0 <GPIO_writePort+0x72>
    15b0:	13 c0       	rjmp	.+38     	; 0x15d8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    15b2:	eb e3       	ldi	r30, 0x3B	; 59
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	8a 81       	ldd	r24, Y+2	; 0x02
    15b8:	80 83       	st	Z, r24
    15ba:	0e c0       	rjmp	.+28     	; 0x15d8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    15bc:	e8 e3       	ldi	r30, 0x38	; 56
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	80 83       	st	Z, r24
    15c4:	09 c0       	rjmp	.+18     	; 0x15d8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    15c6:	e5 e3       	ldi	r30, 0x35	; 53
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	80 83       	st	Z, r24
    15ce:	04 c0       	rjmp	.+8      	; 0x15d8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    15d0:	e2 e3       	ldi	r30, 0x32	; 50
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	80 83       	st	Z, r24
			break;
		}

	}

}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	0f 90       	pop	r0
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <GPIO_readPort>:
/*
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num){
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <GPIO_readPort+0x6>
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <GPIO_readPort+0x8>
    15ee:	0f 92       	push	r0
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	8a 83       	std	Y+2, r24	; 0x02

	uint8 state = LOGIC_LOW;
    15f6:	19 82       	std	Y+1, r1	; 0x01
	if(port_num >= NUM_OF_PORTS)
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	84 30       	cpi	r24, 0x04	; 4
    15fc:	18 f0       	brcs	.+6      	; 0x1604 <GPIO_readPort+0x1e>
	{
		return state;
    15fe:	29 81       	ldd	r18, Y+1	; 0x01
    1600:	2d 83       	std	Y+5, r18	; 0x05
    1602:	34 c0       	rjmp	.+104    	; 0x166c <GPIO_readPort+0x86>

	}
	else
	{
		switch(port_num){
    1604:	8a 81       	ldd	r24, Y+2	; 0x02
    1606:	28 2f       	mov	r18, r24
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	3c 83       	std	Y+4, r19	; 0x04
    160c:	2b 83       	std	Y+3, r18	; 0x03
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	81 30       	cpi	r24, 0x01	; 1
    1614:	91 05       	cpc	r25, r1
    1616:	d1 f0       	breq	.+52     	; 0x164c <GPIO_readPort+0x66>
    1618:	2b 81       	ldd	r18, Y+3	; 0x03
    161a:	3c 81       	ldd	r19, Y+4	; 0x04
    161c:	22 30       	cpi	r18, 0x02	; 2
    161e:	31 05       	cpc	r19, r1
    1620:	2c f4       	brge	.+10     	; 0x162c <GPIO_readPort+0x46>
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	61 f0       	breq	.+24     	; 0x1642 <GPIO_readPort+0x5c>
    162a:	1e c0       	rjmp	.+60     	; 0x1668 <GPIO_readPort+0x82>
    162c:	2b 81       	ldd	r18, Y+3	; 0x03
    162e:	3c 81       	ldd	r19, Y+4	; 0x04
    1630:	22 30       	cpi	r18, 0x02	; 2
    1632:	31 05       	cpc	r19, r1
    1634:	81 f0       	breq	.+32     	; 0x1656 <GPIO_readPort+0x70>
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	91 05       	cpc	r25, r1
    163e:	81 f0       	breq	.+32     	; 0x1660 <GPIO_readPort+0x7a>
    1640:	13 c0       	rjmp	.+38     	; 0x1668 <GPIO_readPort+0x82>
		case PORTA_ID:
			state = PINA;
    1642:	e9 e3       	ldi	r30, 0x39	; 57
    1644:	f0 e0       	ldi	r31, 0x00	; 0
    1646:	80 81       	ld	r24, Z
    1648:	89 83       	std	Y+1, r24	; 0x01
    164a:	0e c0       	rjmp	.+28     	; 0x1668 <GPIO_readPort+0x82>
			break;
		case PORTB_ID:
			state = PINB;
    164c:	e6 e3       	ldi	r30, 0x36	; 54
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <GPIO_readPort+0x82>
			break;
		case PORTC_ID:
			state = PINC;
    1656:	e3 e3       	ldi	r30, 0x33	; 51
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	04 c0       	rjmp	.+8      	; 0x1668 <GPIO_readPort+0x82>
			break;
		case PORTD_ID:
			state = PIND;
    1660:	e0 e3       	ldi	r30, 0x30	; 48
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}
	return state;
    1668:	99 81       	ldd	r25, Y+1	; 0x01
    166a:	9d 83       	std	Y+5, r25	; 0x05
    166c:	8d 81       	ldd	r24, Y+5	; 0x05
}
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	2e 97       	sbiw	r28, 0x0e	; 14
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	de bf       	out	0x3e, r29	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1692:	80 e0       	ldi	r24, 0x00	; 0
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 f6 07 	call	0xfec	; 0xfec <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	62 e0       	ldi	r22, 0x02	; 2
    16a0:	41 e0       	ldi	r20, 0x01	; 1
    16a2:	0e 94 f6 07 	call	0xfec	; 0xfec <GPIO_setupPinDirection>
    16a6:	80 e0       	ldi	r24, 0x00	; 0
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	a0 ea       	ldi	r26, 0xA0	; 160
    16ac:	b1 e4       	ldi	r27, 0x41	; 65
    16ae:	8b 87       	std	Y+11, r24	; 0x0b
    16b0:	9c 87       	std	Y+12, r25	; 0x0c
    16b2:	ad 87       	std	Y+13, r26	; 0x0d
    16b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    16ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    16bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    16be:	20 e0       	ldi	r18, 0x00	; 0
    16c0:	30 e0       	ldi	r19, 0x00	; 0
    16c2:	4a ef       	ldi	r20, 0xFA	; 250
    16c4:	54 e4       	ldi	r21, 0x44	; 68
    16c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ca:	dc 01       	movw	r26, r24
    16cc:	cb 01       	movw	r24, r22
    16ce:	8f 83       	std	Y+7, r24	; 0x07
    16d0:	98 87       	std	Y+8, r25	; 0x08
    16d2:	a9 87       	std	Y+9, r26	; 0x09
    16d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16d6:	6f 81       	ldd	r22, Y+7	; 0x07
    16d8:	78 85       	ldd	r23, Y+8	; 0x08
    16da:	89 85       	ldd	r24, Y+9	; 0x09
    16dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e8       	ldi	r20, 0x80	; 128
    16e4:	5f e3       	ldi	r21, 0x3F	; 63
    16e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ea:	88 23       	and	r24, r24
    16ec:	2c f4       	brge	.+10     	; 0x16f8 <LCD_init+0x7a>
		__ticks = 1;
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	9e 83       	std	Y+6, r25	; 0x06
    16f4:	8d 83       	std	Y+5, r24	; 0x05
    16f6:	3f c0       	rjmp	.+126    	; 0x1776 <LCD_init+0xf8>
	else if (__tmp > 65535)
    16f8:	6f 81       	ldd	r22, Y+7	; 0x07
    16fa:	78 85       	ldd	r23, Y+8	; 0x08
    16fc:	89 85       	ldd	r24, Y+9	; 0x09
    16fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	3f ef       	ldi	r19, 0xFF	; 255
    1704:	4f e7       	ldi	r20, 0x7F	; 127
    1706:	57 e4       	ldi	r21, 0x47	; 71
    1708:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    170c:	18 16       	cp	r1, r24
    170e:	4c f5       	brge	.+82     	; 0x1762 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1710:	6b 85       	ldd	r22, Y+11	; 0x0b
    1712:	7c 85       	ldd	r23, Y+12	; 0x0c
    1714:	8d 85       	ldd	r24, Y+13	; 0x0d
    1716:	9e 85       	ldd	r25, Y+14	; 0x0e
    1718:	20 e0       	ldi	r18, 0x00	; 0
    171a:	30 e0       	ldi	r19, 0x00	; 0
    171c:	40 e2       	ldi	r20, 0x20	; 32
    171e:	51 e4       	ldi	r21, 0x41	; 65
    1720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1724:	dc 01       	movw	r26, r24
    1726:	cb 01       	movw	r24, r22
    1728:	bc 01       	movw	r22, r24
    172a:	cd 01       	movw	r24, r26
    172c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	9e 83       	std	Y+6, r25	; 0x06
    1736:	8d 83       	std	Y+5, r24	; 0x05
    1738:	0f c0       	rjmp	.+30     	; 0x1758 <LCD_init+0xda>
    173a:	88 ec       	ldi	r24, 0xC8	; 200
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	9c 83       	std	Y+4, r25	; 0x04
    1740:	8b 83       	std	Y+3, r24	; 0x03
    1742:	8b 81       	ldd	r24, Y+3	; 0x03
    1744:	9c 81       	ldd	r25, Y+4	; 0x04
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	f1 f7       	brne	.-4      	; 0x1746 <LCD_init+0xc8>
    174a:	9c 83       	std	Y+4, r25	; 0x04
    174c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    174e:	8d 81       	ldd	r24, Y+5	; 0x05
    1750:	9e 81       	ldd	r25, Y+6	; 0x06
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	9e 83       	std	Y+6, r25	; 0x06
    1756:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1758:	8d 81       	ldd	r24, Y+5	; 0x05
    175a:	9e 81       	ldd	r25, Y+6	; 0x06
    175c:	00 97       	sbiw	r24, 0x00	; 0
    175e:	69 f7       	brne	.-38     	; 0x173a <LCD_init+0xbc>
    1760:	14 c0       	rjmp	.+40     	; 0x178a <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1762:	6f 81       	ldd	r22, Y+7	; 0x07
    1764:	78 85       	ldd	r23, Y+8	; 0x08
    1766:	89 85       	ldd	r24, Y+9	; 0x09
    1768:	9a 85       	ldd	r25, Y+10	; 0x0a
    176a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	9e 83       	std	Y+6, r25	; 0x06
    1774:	8d 83       	std	Y+5, r24	; 0x05
    1776:	8d 81       	ldd	r24, Y+5	; 0x05
    1778:	9e 81       	ldd	r25, Y+6	; 0x06
    177a:	9a 83       	std	Y+2, r25	; 0x02
    177c:	89 83       	std	Y+1, r24	; 0x01
    177e:	89 81       	ldd	r24, Y+1	; 0x01
    1780:	9a 81       	ldd	r25, Y+2	; 0x02
    1782:	01 97       	sbiw	r24, 0x01	; 1
    1784:	f1 f7       	brne	.-4      	; 0x1782 <LCD_init+0x104>
    1786:	9a 83       	std	Y+2, r25	; 0x02
    1788:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	63 e0       	ldi	r22, 0x03	; 3
    178e:	41 e0       	ldi	r20, 0x01	; 1
    1790:	0e 94 f6 07 	call	0xfec	; 0xfec <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	64 e0       	ldi	r22, 0x04	; 4
    1798:	41 e0       	ldi	r20, 0x01	; 1
    179a:	0e 94 f6 07 	call	0xfec	; 0xfec <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	65 e0       	ldi	r22, 0x05	; 5
    17a2:	41 e0       	ldi	r20, 0x01	; 1
    17a4:	0e 94 f6 07 	call	0xfec	; 0xfec <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	66 e0       	ldi	r22, 0x06	; 6
    17ac:	41 e0       	ldi	r20, 0x01	; 1
    17ae:	0e 94 f6 07 	call	0xfec	; 0xfec <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    17b2:	83 e3       	ldi	r24, 0x33	; 51
    17b4:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    17b8:	82 e3       	ldi	r24, 0x32	; 50
    17ba:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    17be:	88 e2       	ldi	r24, 0x28	; 40
    17c0:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    17c4:	8c e0       	ldi	r24, 0x0C	; 12
    17c6:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>
}
    17d0:	2e 96       	adiw	r28, 0x0e	; 14
    17d2:	0f b6       	in	r0, 0x3f	; 63
    17d4:	f8 94       	cli
    17d6:	de bf       	out	0x3e, r29	; 62
    17d8:	0f be       	out	0x3f, r0	; 63
    17da:	cd bf       	out	0x3d, r28	; 61
    17dc:	cf 91       	pop	r28
    17de:	df 91       	pop	r29
    17e0:	08 95       	ret

000017e2 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	c3 56       	subi	r28, 0x63	; 99
    17f0:	d0 40       	sbci	r29, 0x00	; 0
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	fe 01       	movw	r30, r28
    17fe:	ed 59       	subi	r30, 0x9D	; 157
    1800:	ff 4f       	sbci	r31, 0xFF	; 255
    1802:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1804:	80 e0       	ldi	r24, 0x00	; 0
    1806:	61 e0       	ldi	r22, 0x01	; 1
    1808:	40 e0       	ldi	r20, 0x00	; 0
    180a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    180e:	fe 01       	movw	r30, r28
    1810:	e1 5a       	subi	r30, 0xA1	; 161
    1812:	ff 4f       	sbci	r31, 0xFF	; 255
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	a0 e8       	ldi	r26, 0x80	; 128
    181a:	bf e3       	ldi	r27, 0x3F	; 63
    181c:	80 83       	st	Z, r24
    181e:	91 83       	std	Z+1, r25	; 0x01
    1820:	a2 83       	std	Z+2, r26	; 0x02
    1822:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1824:	8e 01       	movw	r16, r28
    1826:	05 5a       	subi	r16, 0xA5	; 165
    1828:	1f 4f       	sbci	r17, 0xFF	; 255
    182a:	fe 01       	movw	r30, r28
    182c:	e1 5a       	subi	r30, 0xA1	; 161
    182e:	ff 4f       	sbci	r31, 0xFF	; 255
    1830:	60 81       	ld	r22, Z
    1832:	71 81       	ldd	r23, Z+1	; 0x01
    1834:	82 81       	ldd	r24, Z+2	; 0x02
    1836:	93 81       	ldd	r25, Z+3	; 0x03
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a ef       	ldi	r20, 0xFA	; 250
    183e:	54 e4       	ldi	r21, 0x44	; 68
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	f8 01       	movw	r30, r16
    184a:	80 83       	st	Z, r24
    184c:	91 83       	std	Z+1, r25	; 0x01
    184e:	a2 83       	std	Z+2, r26	; 0x02
    1850:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1852:	fe 01       	movw	r30, r28
    1854:	e5 5a       	subi	r30, 0xA5	; 165
    1856:	ff 4f       	sbci	r31, 0xFF	; 255
    1858:	60 81       	ld	r22, Z
    185a:	71 81       	ldd	r23, Z+1	; 0x01
    185c:	82 81       	ldd	r24, Z+2	; 0x02
    185e:	93 81       	ldd	r25, Z+3	; 0x03
    1860:	20 e0       	ldi	r18, 0x00	; 0
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	40 e8       	ldi	r20, 0x80	; 128
    1866:	5f e3       	ldi	r21, 0x3F	; 63
    1868:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    186c:	88 23       	and	r24, r24
    186e:	44 f4       	brge	.+16     	; 0x1880 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1870:	fe 01       	movw	r30, r28
    1872:	e7 5a       	subi	r30, 0xA7	; 167
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	91 83       	std	Z+1, r25	; 0x01
    187c:	80 83       	st	Z, r24
    187e:	64 c0       	rjmp	.+200    	; 0x1948 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1880:	fe 01       	movw	r30, r28
    1882:	e5 5a       	subi	r30, 0xA5	; 165
    1884:	ff 4f       	sbci	r31, 0xFF	; 255
    1886:	60 81       	ld	r22, Z
    1888:	71 81       	ldd	r23, Z+1	; 0x01
    188a:	82 81       	ldd	r24, Z+2	; 0x02
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	20 e0       	ldi	r18, 0x00	; 0
    1890:	3f ef       	ldi	r19, 0xFF	; 255
    1892:	4f e7       	ldi	r20, 0x7F	; 127
    1894:	57 e4       	ldi	r21, 0x47	; 71
    1896:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    189a:	18 16       	cp	r1, r24
    189c:	0c f0       	brlt	.+2      	; 0x18a0 <LCD_sendCommand+0xbe>
    189e:	43 c0       	rjmp	.+134    	; 0x1926 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18a0:	fe 01       	movw	r30, r28
    18a2:	e1 5a       	subi	r30, 0xA1	; 161
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	60 81       	ld	r22, Z
    18a8:	71 81       	ldd	r23, Z+1	; 0x01
    18aa:	82 81       	ldd	r24, Z+2	; 0x02
    18ac:	93 81       	ldd	r25, Z+3	; 0x03
    18ae:	20 e0       	ldi	r18, 0x00	; 0
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	40 e2       	ldi	r20, 0x20	; 32
    18b4:	51 e4       	ldi	r21, 0x41	; 65
    18b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ba:	dc 01       	movw	r26, r24
    18bc:	cb 01       	movw	r24, r22
    18be:	8e 01       	movw	r16, r28
    18c0:	07 5a       	subi	r16, 0xA7	; 167
    18c2:	1f 4f       	sbci	r17, 0xFF	; 255
    18c4:	bc 01       	movw	r22, r24
    18c6:	cd 01       	movw	r24, r26
    18c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18cc:	dc 01       	movw	r26, r24
    18ce:	cb 01       	movw	r24, r22
    18d0:	f8 01       	movw	r30, r16
    18d2:	91 83       	std	Z+1, r25	; 0x01
    18d4:	80 83       	st	Z, r24
    18d6:	1f c0       	rjmp	.+62     	; 0x1916 <LCD_sendCommand+0x134>
    18d8:	fe 01       	movw	r30, r28
    18da:	e9 5a       	subi	r30, 0xA9	; 169
    18dc:	ff 4f       	sbci	r31, 0xFF	; 255
    18de:	88 ec       	ldi	r24, 0xC8	; 200
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	91 83       	std	Z+1, r25	; 0x01
    18e4:	80 83       	st	Z, r24
    18e6:	fe 01       	movw	r30, r28
    18e8:	e9 5a       	subi	r30, 0xA9	; 169
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	80 81       	ld	r24, Z
    18ee:	91 81       	ldd	r25, Z+1	; 0x01
    18f0:	01 97       	sbiw	r24, 0x01	; 1
    18f2:	f1 f7       	brne	.-4      	; 0x18f0 <LCD_sendCommand+0x10e>
    18f4:	fe 01       	movw	r30, r28
    18f6:	e9 5a       	subi	r30, 0xA9	; 169
    18f8:	ff 4f       	sbci	r31, 0xFF	; 255
    18fa:	91 83       	std	Z+1, r25	; 0x01
    18fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18fe:	de 01       	movw	r26, r28
    1900:	a7 5a       	subi	r26, 0xA7	; 167
    1902:	bf 4f       	sbci	r27, 0xFF	; 255
    1904:	fe 01       	movw	r30, r28
    1906:	e7 5a       	subi	r30, 0xA7	; 167
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	80 81       	ld	r24, Z
    190c:	91 81       	ldd	r25, Z+1	; 0x01
    190e:	01 97       	sbiw	r24, 0x01	; 1
    1910:	11 96       	adiw	r26, 0x01	; 1
    1912:	9c 93       	st	X, r25
    1914:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1916:	fe 01       	movw	r30, r28
    1918:	e7 5a       	subi	r30, 0xA7	; 167
    191a:	ff 4f       	sbci	r31, 0xFF	; 255
    191c:	80 81       	ld	r24, Z
    191e:	91 81       	ldd	r25, Z+1	; 0x01
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	d1 f6       	brne	.-76     	; 0x18d8 <LCD_sendCommand+0xf6>
    1924:	27 c0       	rjmp	.+78     	; 0x1974 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1926:	8e 01       	movw	r16, r28
    1928:	07 5a       	subi	r16, 0xA7	; 167
    192a:	1f 4f       	sbci	r17, 0xFF	; 255
    192c:	fe 01       	movw	r30, r28
    192e:	e5 5a       	subi	r30, 0xA5	; 165
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	60 81       	ld	r22, Z
    1934:	71 81       	ldd	r23, Z+1	; 0x01
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    193e:	dc 01       	movw	r26, r24
    1940:	cb 01       	movw	r24, r22
    1942:	f8 01       	movw	r30, r16
    1944:	91 83       	std	Z+1, r25	; 0x01
    1946:	80 83       	st	Z, r24
    1948:	de 01       	movw	r26, r28
    194a:	ab 5a       	subi	r26, 0xAB	; 171
    194c:	bf 4f       	sbci	r27, 0xFF	; 255
    194e:	fe 01       	movw	r30, r28
    1950:	e7 5a       	subi	r30, 0xA7	; 167
    1952:	ff 4f       	sbci	r31, 0xFF	; 255
    1954:	80 81       	ld	r24, Z
    1956:	91 81       	ldd	r25, Z+1	; 0x01
    1958:	8d 93       	st	X+, r24
    195a:	9c 93       	st	X, r25
    195c:	fe 01       	movw	r30, r28
    195e:	eb 5a       	subi	r30, 0xAB	; 171
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	80 81       	ld	r24, Z
    1964:	91 81       	ldd	r25, Z+1	; 0x01
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_sendCommand+0x184>
    196a:	fe 01       	movw	r30, r28
    196c:	eb 5a       	subi	r30, 0xAB	; 171
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	91 83       	std	Z+1, r25	; 0x01
    1972:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	62 e0       	ldi	r22, 0x02	; 2
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    197e:	fe 01       	movw	r30, r28
    1980:	ef 5a       	subi	r30, 0xAF	; 175
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 e0       	ldi	r24, 0x00	; 0
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	a0 e8       	ldi	r26, 0x80	; 128
    198a:	bf e3       	ldi	r27, 0x3F	; 63
    198c:	80 83       	st	Z, r24
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	a2 83       	std	Z+2, r26	; 0x02
    1992:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1994:	8e 01       	movw	r16, r28
    1996:	03 5b       	subi	r16, 0xB3	; 179
    1998:	1f 4f       	sbci	r17, 0xFF	; 255
    199a:	fe 01       	movw	r30, r28
    199c:	ef 5a       	subi	r30, 0xAF	; 175
    199e:	ff 4f       	sbci	r31, 0xFF	; 255
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a ef       	ldi	r20, 0xFA	; 250
    19ae:	54 e4       	ldi	r21, 0x44	; 68
    19b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	f8 01       	movw	r30, r16
    19ba:	80 83       	st	Z, r24
    19bc:	91 83       	std	Z+1, r25	; 0x01
    19be:	a2 83       	std	Z+2, r26	; 0x02
    19c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    19c2:	fe 01       	movw	r30, r28
    19c4:	e3 5b       	subi	r30, 0xB3	; 179
    19c6:	ff 4f       	sbci	r31, 0xFF	; 255
    19c8:	60 81       	ld	r22, Z
    19ca:	71 81       	ldd	r23, Z+1	; 0x01
    19cc:	82 81       	ldd	r24, Z+2	; 0x02
    19ce:	93 81       	ldd	r25, Z+3	; 0x03
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	40 e8       	ldi	r20, 0x80	; 128
    19d6:	5f e3       	ldi	r21, 0x3F	; 63
    19d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19dc:	88 23       	and	r24, r24
    19de:	44 f4       	brge	.+16     	; 0x19f0 <LCD_sendCommand+0x20e>
		__ticks = 1;
    19e0:	fe 01       	movw	r30, r28
    19e2:	e5 5b       	subi	r30, 0xB5	; 181
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	81 e0       	ldi	r24, 0x01	; 1
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	91 83       	std	Z+1, r25	; 0x01
    19ec:	80 83       	st	Z, r24
    19ee:	64 c0       	rjmp	.+200    	; 0x1ab8 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    19f0:	fe 01       	movw	r30, r28
    19f2:	e3 5b       	subi	r30, 0xB3	; 179
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	60 81       	ld	r22, Z
    19f8:	71 81       	ldd	r23, Z+1	; 0x01
    19fa:	82 81       	ldd	r24, Z+2	; 0x02
    19fc:	93 81       	ldd	r25, Z+3	; 0x03
    19fe:	20 e0       	ldi	r18, 0x00	; 0
    1a00:	3f ef       	ldi	r19, 0xFF	; 255
    1a02:	4f e7       	ldi	r20, 0x7F	; 127
    1a04:	57 e4       	ldi	r21, 0x47	; 71
    1a06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a0a:	18 16       	cp	r1, r24
    1a0c:	0c f0       	brlt	.+2      	; 0x1a10 <LCD_sendCommand+0x22e>
    1a0e:	43 c0       	rjmp	.+134    	; 0x1a96 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a10:	fe 01       	movw	r30, r28
    1a12:	ef 5a       	subi	r30, 0xAF	; 175
    1a14:	ff 4f       	sbci	r31, 0xFF	; 255
    1a16:	60 81       	ld	r22, Z
    1a18:	71 81       	ldd	r23, Z+1	; 0x01
    1a1a:	82 81       	ldd	r24, Z+2	; 0x02
    1a1c:	93 81       	ldd	r25, Z+3	; 0x03
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
    1a22:	40 e2       	ldi	r20, 0x20	; 32
    1a24:	51 e4       	ldi	r21, 0x41	; 65
    1a26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a2a:	dc 01       	movw	r26, r24
    1a2c:	cb 01       	movw	r24, r22
    1a2e:	8e 01       	movw	r16, r28
    1a30:	05 5b       	subi	r16, 0xB5	; 181
    1a32:	1f 4f       	sbci	r17, 0xFF	; 255
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	f8 01       	movw	r30, r16
    1a42:	91 83       	std	Z+1, r25	; 0x01
    1a44:	80 83       	st	Z, r24
    1a46:	1f c0       	rjmp	.+62     	; 0x1a86 <LCD_sendCommand+0x2a4>
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e7 5b       	subi	r30, 0xB7	; 183
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	88 ec       	ldi	r24, 0xC8	; 200
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	91 83       	std	Z+1, r25	; 0x01
    1a54:	80 83       	st	Z, r24
    1a56:	fe 01       	movw	r30, r28
    1a58:	e7 5b       	subi	r30, 0xB7	; 183
    1a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a5c:	80 81       	ld	r24, Z
    1a5e:	91 81       	ldd	r25, Z+1	; 0x01
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	f1 f7       	brne	.-4      	; 0x1a60 <LCD_sendCommand+0x27e>
    1a64:	fe 01       	movw	r30, r28
    1a66:	e7 5b       	subi	r30, 0xB7	; 183
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	91 83       	std	Z+1, r25	; 0x01
    1a6c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a6e:	de 01       	movw	r26, r28
    1a70:	a5 5b       	subi	r26, 0xB5	; 181
    1a72:	bf 4f       	sbci	r27, 0xFF	; 255
    1a74:	fe 01       	movw	r30, r28
    1a76:	e5 5b       	subi	r30, 0xB5	; 181
    1a78:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7a:	80 81       	ld	r24, Z
    1a7c:	91 81       	ldd	r25, Z+1	; 0x01
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	11 96       	adiw	r26, 0x01	; 1
    1a82:	9c 93       	st	X, r25
    1a84:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a86:	fe 01       	movw	r30, r28
    1a88:	e5 5b       	subi	r30, 0xB5	; 181
    1a8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8c:	80 81       	ld	r24, Z
    1a8e:	91 81       	ldd	r25, Z+1	; 0x01
    1a90:	00 97       	sbiw	r24, 0x00	; 0
    1a92:	d1 f6       	brne	.-76     	; 0x1a48 <LCD_sendCommand+0x266>
    1a94:	27 c0       	rjmp	.+78     	; 0x1ae4 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a96:	8e 01       	movw	r16, r28
    1a98:	05 5b       	subi	r16, 0xB5	; 181
    1a9a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9c:	fe 01       	movw	r30, r28
    1a9e:	e3 5b       	subi	r30, 0xB3	; 179
    1aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa2:	60 81       	ld	r22, Z
    1aa4:	71 81       	ldd	r23, Z+1	; 0x01
    1aa6:	82 81       	ldd	r24, Z+2	; 0x02
    1aa8:	93 81       	ldd	r25, Z+3	; 0x03
    1aaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aae:	dc 01       	movw	r26, r24
    1ab0:	cb 01       	movw	r24, r22
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	de 01       	movw	r26, r28
    1aba:	a9 5b       	subi	r26, 0xB9	; 185
    1abc:	bf 4f       	sbci	r27, 0xFF	; 255
    1abe:	fe 01       	movw	r30, r28
    1ac0:	e5 5b       	subi	r30, 0xB5	; 181
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	8d 93       	st	X+, r24
    1aca:	9c 93       	st	X, r25
    1acc:	fe 01       	movw	r30, r28
    1ace:	e9 5b       	subi	r30, 0xB9	; 185
    1ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad2:	80 81       	ld	r24, Z
    1ad4:	91 81       	ldd	r25, Z+1	; 0x01
    1ad6:	01 97       	sbiw	r24, 0x01	; 1
    1ad8:	f1 f7       	brne	.-4      	; 0x1ad6 <LCD_sendCommand+0x2f4>
    1ada:	fe 01       	movw	r30, r28
    1adc:	e9 5b       	subi	r30, 0xB9	; 185
    1ade:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae0:	91 83       	std	Z+1, r25	; 0x01
    1ae2:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    1ae4:	fe 01       	movw	r30, r28
    1ae6:	ed 59       	subi	r30, 0x9D	; 157
    1ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    1aea:	80 81       	ld	r24, Z
    1aec:	88 2f       	mov	r24, r24
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	80 71       	andi	r24, 0x10	; 16
    1af2:	90 70       	andi	r25, 0x00	; 0
    1af4:	95 95       	asr	r25
    1af6:	87 95       	ror	r24
    1af8:	95 95       	asr	r25
    1afa:	87 95       	ror	r24
    1afc:	95 95       	asr	r25
    1afe:	87 95       	ror	r24
    1b00:	95 95       	asr	r25
    1b02:	87 95       	ror	r24
    1b04:	98 2f       	mov	r25, r24
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	63 e0       	ldi	r22, 0x03	; 3
    1b0a:	49 2f       	mov	r20, r25
    1b0c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    1b10:	fe 01       	movw	r30, r28
    1b12:	ed 59       	subi	r30, 0x9D	; 157
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	80 81       	ld	r24, Z
    1b18:	88 2f       	mov	r24, r24
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	80 72       	andi	r24, 0x20	; 32
    1b1e:	90 70       	andi	r25, 0x00	; 0
    1b20:	95 95       	asr	r25
    1b22:	87 95       	ror	r24
    1b24:	95 95       	asr	r25
    1b26:	87 95       	ror	r24
    1b28:	95 95       	asr	r25
    1b2a:	87 95       	ror	r24
    1b2c:	95 95       	asr	r25
    1b2e:	87 95       	ror	r24
    1b30:	95 95       	asr	r25
    1b32:	87 95       	ror	r24
    1b34:	98 2f       	mov	r25, r24
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	64 e0       	ldi	r22, 0x04	; 4
    1b3a:	49 2f       	mov	r20, r25
    1b3c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    1b40:	fe 01       	movw	r30, r28
    1b42:	ed 59       	subi	r30, 0x9D	; 157
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	80 81       	ld	r24, Z
    1b48:	88 2f       	mov	r24, r24
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	80 74       	andi	r24, 0x40	; 64
    1b4e:	90 70       	andi	r25, 0x00	; 0
    1b50:	08 2e       	mov	r0, r24
    1b52:	89 2f       	mov	r24, r25
    1b54:	00 0c       	add	r0, r0
    1b56:	88 1f       	adc	r24, r24
    1b58:	99 0b       	sbc	r25, r25
    1b5a:	00 0c       	add	r0, r0
    1b5c:	88 1f       	adc	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	98 2f       	mov	r25, r24
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	65 e0       	ldi	r22, 0x05	; 5
    1b66:	49 2f       	mov	r20, r25
    1b68:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    1b6c:	fe 01       	movw	r30, r28
    1b6e:	ed 59       	subi	r30, 0x9D	; 157
    1b70:	ff 4f       	sbci	r31, 0xFF	; 255
    1b72:	80 81       	ld	r24, Z
    1b74:	98 2f       	mov	r25, r24
    1b76:	99 1f       	adc	r25, r25
    1b78:	99 27       	eor	r25, r25
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	66 e0       	ldi	r22, 0x06	; 6
    1b80:	49 2f       	mov	r20, r25
    1b82:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    1b86:	fe 01       	movw	r30, r28
    1b88:	ed 5b       	subi	r30, 0xBD	; 189
    1b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e8       	ldi	r26, 0x80	; 128
    1b92:	bf e3       	ldi	r27, 0x3F	; 63
    1b94:	80 83       	st	Z, r24
    1b96:	91 83       	std	Z+1, r25	; 0x01
    1b98:	a2 83       	std	Z+2, r26	; 0x02
    1b9a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b9c:	8e 01       	movw	r16, r28
    1b9e:	01 5c       	subi	r16, 0xC1	; 193
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	fe 01       	movw	r30, r28
    1ba4:	ed 5b       	subi	r30, 0xBD	; 189
    1ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba8:	60 81       	ld	r22, Z
    1baa:	71 81       	ldd	r23, Z+1	; 0x01
    1bac:	82 81       	ldd	r24, Z+2	; 0x02
    1bae:	93 81       	ldd	r25, Z+3	; 0x03
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4a ef       	ldi	r20, 0xFA	; 250
    1bb6:	54 e4       	ldi	r21, 0x44	; 68
    1bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	f8 01       	movw	r30, r16
    1bc2:	80 83       	st	Z, r24
    1bc4:	91 83       	std	Z+1, r25	; 0x01
    1bc6:	a2 83       	std	Z+2, r26	; 0x02
    1bc8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bca:	fe 01       	movw	r30, r28
    1bcc:	ff 96       	adiw	r30, 0x3f	; 63
    1bce:	60 81       	ld	r22, Z
    1bd0:	71 81       	ldd	r23, Z+1	; 0x01
    1bd2:	82 81       	ldd	r24, Z+2	; 0x02
    1bd4:	93 81       	ldd	r25, Z+3	; 0x03
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <LCD_sendCommand+0x40e>
		__ticks = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9e af       	std	Y+62, r25	; 0x3e
    1bec:	8d af       	std	Y+61, r24	; 0x3d
    1bee:	46 c0       	rjmp	.+140    	; 0x1c7c <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    1bf0:	fe 01       	movw	r30, r28
    1bf2:	ff 96       	adiw	r30, 0x3f	; 63
    1bf4:	60 81       	ld	r22, Z
    1bf6:	71 81       	ldd	r23, Z+1	; 0x01
    1bf8:	82 81       	ldd	r24, Z+2	; 0x02
    1bfa:	93 81       	ldd	r25, Z+3	; 0x03
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	3f ef       	ldi	r19, 0xFF	; 255
    1c00:	4f e7       	ldi	r20, 0x7F	; 127
    1c02:	57 e4       	ldi	r21, 0x47	; 71
    1c04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c08:	18 16       	cp	r1, r24
    1c0a:	64 f5       	brge	.+88     	; 0x1c64 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	ed 5b       	subi	r30, 0xBD	; 189
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	82 81       	ldd	r24, Z+2	; 0x02
    1c18:	93 81       	ldd	r25, Z+3	; 0x03
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	40 e2       	ldi	r20, 0x20	; 32
    1c20:	51 e4       	ldi	r21, 0x41	; 65
    1c22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c26:	dc 01       	movw	r26, r24
    1c28:	cb 01       	movw	r24, r22
    1c2a:	bc 01       	movw	r22, r24
    1c2c:	cd 01       	movw	r24, r26
    1c2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c32:	dc 01       	movw	r26, r24
    1c34:	cb 01       	movw	r24, r22
    1c36:	9e af       	std	Y+62, r25	; 0x3e
    1c38:	8d af       	std	Y+61, r24	; 0x3d
    1c3a:	0f c0       	rjmp	.+30     	; 0x1c5a <LCD_sendCommand+0x478>
    1c3c:	88 ec       	ldi	r24, 0xC8	; 200
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	9c af       	std	Y+60, r25	; 0x3c
    1c42:	8b af       	std	Y+59, r24	; 0x3b
    1c44:	8b ad       	ldd	r24, Y+59	; 0x3b
    1c46:	9c ad       	ldd	r25, Y+60	; 0x3c
    1c48:	01 97       	sbiw	r24, 0x01	; 1
    1c4a:	f1 f7       	brne	.-4      	; 0x1c48 <LCD_sendCommand+0x466>
    1c4c:	9c af       	std	Y+60, r25	; 0x3c
    1c4e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c50:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c52:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	9e af       	std	Y+62, r25	; 0x3e
    1c58:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c5e:	00 97       	sbiw	r24, 0x00	; 0
    1c60:	69 f7       	brne	.-38     	; 0x1c3c <LCD_sendCommand+0x45a>
    1c62:	16 c0       	rjmp	.+44     	; 0x1c90 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c64:	fe 01       	movw	r30, r28
    1c66:	ff 96       	adiw	r30, 0x3f	; 63
    1c68:	60 81       	ld	r22, Z
    1c6a:	71 81       	ldd	r23, Z+1	; 0x01
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	93 81       	ldd	r25, Z+3	; 0x03
    1c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	9e af       	std	Y+62, r25	; 0x3e
    1c7a:	8d af       	std	Y+61, r24	; 0x3d
    1c7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c80:	9a af       	std	Y+58, r25	; 0x3a
    1c82:	89 af       	std	Y+57, r24	; 0x39
    1c84:	89 ad       	ldd	r24, Y+57	; 0x39
    1c86:	9a ad       	ldd	r25, Y+58	; 0x3a
    1c88:	01 97       	sbiw	r24, 0x01	; 1
    1c8a:	f1 f7       	brne	.-4      	; 0x1c88 <LCD_sendCommand+0x4a6>
    1c8c:	9a af       	std	Y+58, r25	; 0x3a
    1c8e:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	62 e0       	ldi	r22, 0x02	; 2
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    1c9a:	80 e0       	ldi	r24, 0x00	; 0
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	a0 e8       	ldi	r26, 0x80	; 128
    1ca0:	bf e3       	ldi	r27, 0x3F	; 63
    1ca2:	8d ab       	std	Y+53, r24	; 0x35
    1ca4:	9e ab       	std	Y+54, r25	; 0x36
    1ca6:	af ab       	std	Y+55, r26	; 0x37
    1ca8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1caa:	6d a9       	ldd	r22, Y+53	; 0x35
    1cac:	7e a9       	ldd	r23, Y+54	; 0x36
    1cae:	8f a9       	ldd	r24, Y+55	; 0x37
    1cb0:	98 ad       	ldd	r25, Y+56	; 0x38
    1cb2:	20 e0       	ldi	r18, 0x00	; 0
    1cb4:	30 e0       	ldi	r19, 0x00	; 0
    1cb6:	4a ef       	ldi	r20, 0xFA	; 250
    1cb8:	54 e4       	ldi	r21, 0x44	; 68
    1cba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbe:	dc 01       	movw	r26, r24
    1cc0:	cb 01       	movw	r24, r22
    1cc2:	89 ab       	std	Y+49, r24	; 0x31
    1cc4:	9a ab       	std	Y+50, r25	; 0x32
    1cc6:	ab ab       	std	Y+51, r26	; 0x33
    1cc8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1cca:	69 a9       	ldd	r22, Y+49	; 0x31
    1ccc:	7a a9       	ldd	r23, Y+50	; 0x32
    1cce:	8b a9       	ldd	r24, Y+51	; 0x33
    1cd0:	9c a9       	ldd	r25, Y+52	; 0x34
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e8       	ldi	r20, 0x80	; 128
    1cd8:	5f e3       	ldi	r21, 0x3F	; 63
    1cda:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cde:	88 23       	and	r24, r24
    1ce0:	2c f4       	brge	.+10     	; 0x1cec <LCD_sendCommand+0x50a>
		__ticks = 1;
    1ce2:	81 e0       	ldi	r24, 0x01	; 1
    1ce4:	90 e0       	ldi	r25, 0x00	; 0
    1ce6:	98 ab       	std	Y+48, r25	; 0x30
    1ce8:	8f a7       	std	Y+47, r24	; 0x2f
    1cea:	3f c0       	rjmp	.+126    	; 0x1d6a <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    1cec:	69 a9       	ldd	r22, Y+49	; 0x31
    1cee:	7a a9       	ldd	r23, Y+50	; 0x32
    1cf0:	8b a9       	ldd	r24, Y+51	; 0x33
    1cf2:	9c a9       	ldd	r25, Y+52	; 0x34
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	3f ef       	ldi	r19, 0xFF	; 255
    1cf8:	4f e7       	ldi	r20, 0x7F	; 127
    1cfa:	57 e4       	ldi	r21, 0x47	; 71
    1cfc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d00:	18 16       	cp	r1, r24
    1d02:	4c f5       	brge	.+82     	; 0x1d56 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d04:	6d a9       	ldd	r22, Y+53	; 0x35
    1d06:	7e a9       	ldd	r23, Y+54	; 0x36
    1d08:	8f a9       	ldd	r24, Y+55	; 0x37
    1d0a:	98 ad       	ldd	r25, Y+56	; 0x38
    1d0c:	20 e0       	ldi	r18, 0x00	; 0
    1d0e:	30 e0       	ldi	r19, 0x00	; 0
    1d10:	40 e2       	ldi	r20, 0x20	; 32
    1d12:	51 e4       	ldi	r21, 0x41	; 65
    1d14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	bc 01       	movw	r22, r24
    1d1e:	cd 01       	movw	r24, r26
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	98 ab       	std	Y+48, r25	; 0x30
    1d2a:	8f a7       	std	Y+47, r24	; 0x2f
    1d2c:	0f c0       	rjmp	.+30     	; 0x1d4c <LCD_sendCommand+0x56a>
    1d2e:	88 ec       	ldi	r24, 0xC8	; 200
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	9e a7       	std	Y+46, r25	; 0x2e
    1d34:	8d a7       	std	Y+45, r24	; 0x2d
    1d36:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d38:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <LCD_sendCommand+0x558>
    1d3e:	9e a7       	std	Y+46, r25	; 0x2e
    1d40:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d44:	98 a9       	ldd	r25, Y+48	; 0x30
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	98 ab       	std	Y+48, r25	; 0x30
    1d4a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d4e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d50:	00 97       	sbiw	r24, 0x00	; 0
    1d52:	69 f7       	brne	.-38     	; 0x1d2e <LCD_sendCommand+0x54c>
    1d54:	14 c0       	rjmp	.+40     	; 0x1d7e <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d56:	69 a9       	ldd	r22, Y+49	; 0x31
    1d58:	7a a9       	ldd	r23, Y+50	; 0x32
    1d5a:	8b a9       	ldd	r24, Y+51	; 0x33
    1d5c:	9c a9       	ldd	r25, Y+52	; 0x34
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	98 ab       	std	Y+48, r25	; 0x30
    1d68:	8f a7       	std	Y+47, r24	; 0x2f
    1d6a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d6c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d6e:	9c a7       	std	Y+44, r25	; 0x2c
    1d70:	8b a7       	std	Y+43, r24	; 0x2b
    1d72:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d74:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	f1 f7       	brne	.-4      	; 0x1d76 <LCD_sendCommand+0x594>
    1d7a:	9c a7       	std	Y+44, r25	; 0x2c
    1d7c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	62 e0       	ldi	r22, 0x02	; 2
    1d82:	41 e0       	ldi	r20, 0x01	; 1
    1d84:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    1d88:	80 e0       	ldi	r24, 0x00	; 0
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	a0 e8       	ldi	r26, 0x80	; 128
    1d8e:	bf e3       	ldi	r27, 0x3F	; 63
    1d90:	8f a3       	std	Y+39, r24	; 0x27
    1d92:	98 a7       	std	Y+40, r25	; 0x28
    1d94:	a9 a7       	std	Y+41, r26	; 0x29
    1d96:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d98:	6f a1       	ldd	r22, Y+39	; 0x27
    1d9a:	78 a5       	ldd	r23, Y+40	; 0x28
    1d9c:	89 a5       	ldd	r24, Y+41	; 0x29
    1d9e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1da0:	20 e0       	ldi	r18, 0x00	; 0
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	4a ef       	ldi	r20, 0xFA	; 250
    1da6:	54 e4       	ldi	r21, 0x44	; 68
    1da8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dac:	dc 01       	movw	r26, r24
    1dae:	cb 01       	movw	r24, r22
    1db0:	8b a3       	std	Y+35, r24	; 0x23
    1db2:	9c a3       	std	Y+36, r25	; 0x24
    1db4:	ad a3       	std	Y+37, r26	; 0x25
    1db6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1db8:	6b a1       	ldd	r22, Y+35	; 0x23
    1dba:	7c a1       	ldd	r23, Y+36	; 0x24
    1dbc:	8d a1       	ldd	r24, Y+37	; 0x25
    1dbe:	9e a1       	ldd	r25, Y+38	; 0x26
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e8       	ldi	r20, 0x80	; 128
    1dc6:	5f e3       	ldi	r21, 0x3F	; 63
    1dc8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dcc:	88 23       	and	r24, r24
    1dce:	2c f4       	brge	.+10     	; 0x1dda <LCD_sendCommand+0x5f8>
		__ticks = 1;
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	9a a3       	std	Y+34, r25	; 0x22
    1dd6:	89 a3       	std	Y+33, r24	; 0x21
    1dd8:	3f c0       	rjmp	.+126    	; 0x1e58 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    1dda:	6b a1       	ldd	r22, Y+35	; 0x23
    1ddc:	7c a1       	ldd	r23, Y+36	; 0x24
    1dde:	8d a1       	ldd	r24, Y+37	; 0x25
    1de0:	9e a1       	ldd	r25, Y+38	; 0x26
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	3f ef       	ldi	r19, 0xFF	; 255
    1de6:	4f e7       	ldi	r20, 0x7F	; 127
    1de8:	57 e4       	ldi	r21, 0x47	; 71
    1dea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dee:	18 16       	cp	r1, r24
    1df0:	4c f5       	brge	.+82     	; 0x1e44 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df2:	6f a1       	ldd	r22, Y+39	; 0x27
    1df4:	78 a5       	ldd	r23, Y+40	; 0x28
    1df6:	89 a5       	ldd	r24, Y+41	; 0x29
    1df8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e2       	ldi	r20, 0x20	; 32
    1e00:	51 e4       	ldi	r21, 0x41	; 65
    1e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	bc 01       	movw	r22, r24
    1e0c:	cd 01       	movw	r24, r26
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9a a3       	std	Y+34, r25	; 0x22
    1e18:	89 a3       	std	Y+33, r24	; 0x21
    1e1a:	0f c0       	rjmp	.+30     	; 0x1e3a <LCD_sendCommand+0x658>
    1e1c:	88 ec       	ldi	r24, 0xC8	; 200
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	98 a3       	std	Y+32, r25	; 0x20
    1e22:	8f 8f       	std	Y+31, r24	; 0x1f
    1e24:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e26:	98 a1       	ldd	r25, Y+32	; 0x20
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <LCD_sendCommand+0x646>
    1e2c:	98 a3       	std	Y+32, r25	; 0x20
    1e2e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e30:	89 a1       	ldd	r24, Y+33	; 0x21
    1e32:	9a a1       	ldd	r25, Y+34	; 0x22
    1e34:	01 97       	sbiw	r24, 0x01	; 1
    1e36:	9a a3       	std	Y+34, r25	; 0x22
    1e38:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e3c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	69 f7       	brne	.-38     	; 0x1e1c <LCD_sendCommand+0x63a>
    1e42:	14 c0       	rjmp	.+40     	; 0x1e6c <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e44:	6b a1       	ldd	r22, Y+35	; 0x23
    1e46:	7c a1       	ldd	r23, Y+36	; 0x24
    1e48:	8d a1       	ldd	r24, Y+37	; 0x25
    1e4a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e50:	dc 01       	movw	r26, r24
    1e52:	cb 01       	movw	r24, r22
    1e54:	9a a3       	std	Y+34, r25	; 0x22
    1e56:	89 a3       	std	Y+33, r24	; 0x21
    1e58:	89 a1       	ldd	r24, Y+33	; 0x21
    1e5a:	9a a1       	ldd	r25, Y+34	; 0x22
    1e5c:	9e 8f       	std	Y+30, r25	; 0x1e
    1e5e:	8d 8f       	std	Y+29, r24	; 0x1d
    1e60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e64:	01 97       	sbiw	r24, 0x01	; 1
    1e66:	f1 f7       	brne	.-4      	; 0x1e64 <LCD_sendCommand+0x682>
    1e68:	9e 8f       	std	Y+30, r25	; 0x1e
    1e6a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	ed 59       	subi	r30, 0x9D	; 157
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 81       	ld	r24, Z
    1e74:	98 2f       	mov	r25, r24
    1e76:	91 70       	andi	r25, 0x01	; 1
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	63 e0       	ldi	r22, 0x03	; 3
    1e7c:	49 2f       	mov	r20, r25
    1e7e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    1e82:	fe 01       	movw	r30, r28
    1e84:	ed 59       	subi	r30, 0x9D	; 157
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 81       	ld	r24, Z
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	82 70       	andi	r24, 0x02	; 2
    1e90:	90 70       	andi	r25, 0x00	; 0
    1e92:	95 95       	asr	r25
    1e94:	87 95       	ror	r24
    1e96:	98 2f       	mov	r25, r24
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	64 e0       	ldi	r22, 0x04	; 4
    1e9c:	49 2f       	mov	r20, r25
    1e9e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	ed 59       	subi	r30, 0x9D	; 157
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	80 81       	ld	r24, Z
    1eaa:	88 2f       	mov	r24, r24
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	84 70       	andi	r24, 0x04	; 4
    1eb0:	90 70       	andi	r25, 0x00	; 0
    1eb2:	95 95       	asr	r25
    1eb4:	87 95       	ror	r24
    1eb6:	95 95       	asr	r25
    1eb8:	87 95       	ror	r24
    1eba:	98 2f       	mov	r25, r24
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	65 e0       	ldi	r22, 0x05	; 5
    1ec0:	49 2f       	mov	r20, r25
    1ec2:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	ed 59       	subi	r30, 0x9D	; 157
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 2f       	mov	r24, r24
    1ed0:	90 e0       	ldi	r25, 0x00	; 0
    1ed2:	88 70       	andi	r24, 0x08	; 8
    1ed4:	90 70       	andi	r25, 0x00	; 0
    1ed6:	95 95       	asr	r25
    1ed8:	87 95       	ror	r24
    1eda:	95 95       	asr	r25
    1edc:	87 95       	ror	r24
    1ede:	95 95       	asr	r25
    1ee0:	87 95       	ror	r24
    1ee2:	98 2f       	mov	r25, r24
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	66 e0       	ldi	r22, 0x06	; 6
    1ee8:	49 2f       	mov	r20, r25
    1eea:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	a0 e8       	ldi	r26, 0x80	; 128
    1ef4:	bf e3       	ldi	r27, 0x3F	; 63
    1ef6:	89 8f       	std	Y+25, r24	; 0x19
    1ef8:	9a 8f       	std	Y+26, r25	; 0x1a
    1efa:	ab 8f       	std	Y+27, r26	; 0x1b
    1efc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1efe:	69 8d       	ldd	r22, Y+25	; 0x19
    1f00:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f02:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f04:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	4a ef       	ldi	r20, 0xFA	; 250
    1f0c:	54 e4       	ldi	r21, 0x44	; 68
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	8d 8b       	std	Y+21, r24	; 0x15
    1f18:	9e 8b       	std	Y+22, r25	; 0x16
    1f1a:	af 8b       	std	Y+23, r26	; 0x17
    1f1c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f1e:	6d 89       	ldd	r22, Y+21	; 0x15
    1f20:	7e 89       	ldd	r23, Y+22	; 0x16
    1f22:	8f 89       	ldd	r24, Y+23	; 0x17
    1f24:	98 8d       	ldd	r25, Y+24	; 0x18
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e8       	ldi	r20, 0x80	; 128
    1f2c:	5f e3       	ldi	r21, 0x3F	; 63
    1f2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f32:	88 23       	and	r24, r24
    1f34:	2c f4       	brge	.+10     	; 0x1f40 <LCD_sendCommand+0x75e>
		__ticks = 1;
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	9c 8b       	std	Y+20, r25	; 0x14
    1f3c:	8b 8b       	std	Y+19, r24	; 0x13
    1f3e:	3f c0       	rjmp	.+126    	; 0x1fbe <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    1f40:	6d 89       	ldd	r22, Y+21	; 0x15
    1f42:	7e 89       	ldd	r23, Y+22	; 0x16
    1f44:	8f 89       	ldd	r24, Y+23	; 0x17
    1f46:	98 8d       	ldd	r25, Y+24	; 0x18
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	3f ef       	ldi	r19, 0xFF	; 255
    1f4c:	4f e7       	ldi	r20, 0x7F	; 127
    1f4e:	57 e4       	ldi	r21, 0x47	; 71
    1f50:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f54:	18 16       	cp	r1, r24
    1f56:	4c f5       	brge	.+82     	; 0x1faa <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f58:	69 8d       	ldd	r22, Y+25	; 0x19
    1f5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f60:	20 e0       	ldi	r18, 0x00	; 0
    1f62:	30 e0       	ldi	r19, 0x00	; 0
    1f64:	40 e2       	ldi	r20, 0x20	; 32
    1f66:	51 e4       	ldi	r21, 0x41	; 65
    1f68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	bc 01       	movw	r22, r24
    1f72:	cd 01       	movw	r24, r26
    1f74:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9c 8b       	std	Y+20, r25	; 0x14
    1f7e:	8b 8b       	std	Y+19, r24	; 0x13
    1f80:	0f c0       	rjmp	.+30     	; 0x1fa0 <LCD_sendCommand+0x7be>
    1f82:	88 ec       	ldi	r24, 0xC8	; 200
    1f84:	90 e0       	ldi	r25, 0x00	; 0
    1f86:	9a 8b       	std	Y+18, r25	; 0x12
    1f88:	89 8b       	std	Y+17, r24	; 0x11
    1f8a:	89 89       	ldd	r24, Y+17	; 0x11
    1f8c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8e:	01 97       	sbiw	r24, 0x01	; 1
    1f90:	f1 f7       	brne	.-4      	; 0x1f8e <LCD_sendCommand+0x7ac>
    1f92:	9a 8b       	std	Y+18, r25	; 0x12
    1f94:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f96:	8b 89       	ldd	r24, Y+19	; 0x13
    1f98:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9a:	01 97       	sbiw	r24, 0x01	; 1
    1f9c:	9c 8b       	std	Y+20, r25	; 0x14
    1f9e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fa2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa4:	00 97       	sbiw	r24, 0x00	; 0
    1fa6:	69 f7       	brne	.-38     	; 0x1f82 <LCD_sendCommand+0x7a0>
    1fa8:	14 c0       	rjmp	.+40     	; 0x1fd2 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1faa:	6d 89       	ldd	r22, Y+21	; 0x15
    1fac:	7e 89       	ldd	r23, Y+22	; 0x16
    1fae:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb6:	dc 01       	movw	r26, r24
    1fb8:	cb 01       	movw	r24, r22
    1fba:	9c 8b       	std	Y+20, r25	; 0x14
    1fbc:	8b 8b       	std	Y+19, r24	; 0x13
    1fbe:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc0:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc2:	98 8b       	std	Y+16, r25	; 0x10
    1fc4:	8f 87       	std	Y+15, r24	; 0x0f
    1fc6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc8:	98 89       	ldd	r25, Y+16	; 0x10
    1fca:	01 97       	sbiw	r24, 0x01	; 1
    1fcc:	f1 f7       	brne	.-4      	; 0x1fca <LCD_sendCommand+0x7e8>
    1fce:	98 8b       	std	Y+16, r25	; 0x10
    1fd0:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	62 e0       	ldi	r22, 0x02	; 2
    1fd6:	40 e0       	ldi	r20, 0x00	; 0
    1fd8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	a0 e8       	ldi	r26, 0x80	; 128
    1fe2:	bf e3       	ldi	r27, 0x3F	; 63
    1fe4:	8b 87       	std	Y+11, r24	; 0x0b
    1fe6:	9c 87       	std	Y+12, r25	; 0x0c
    1fe8:	ad 87       	std	Y+13, r26	; 0x0d
    1fea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ff0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ff2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ff4:	20 e0       	ldi	r18, 0x00	; 0
    1ff6:	30 e0       	ldi	r19, 0x00	; 0
    1ff8:	4a ef       	ldi	r20, 0xFA	; 250
    1ffa:	54 e4       	ldi	r21, 0x44	; 68
    1ffc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2000:	dc 01       	movw	r26, r24
    2002:	cb 01       	movw	r24, r22
    2004:	8f 83       	std	Y+7, r24	; 0x07
    2006:	98 87       	std	Y+8, r25	; 0x08
    2008:	a9 87       	std	Y+9, r26	; 0x09
    200a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    200c:	6f 81       	ldd	r22, Y+7	; 0x07
    200e:	78 85       	ldd	r23, Y+8	; 0x08
    2010:	89 85       	ldd	r24, Y+9	; 0x09
    2012:	9a 85       	ldd	r25, Y+10	; 0x0a
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e8       	ldi	r20, 0x80	; 128
    201a:	5f e3       	ldi	r21, 0x3F	; 63
    201c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2020:	88 23       	and	r24, r24
    2022:	2c f4       	brge	.+10     	; 0x202e <LCD_sendCommand+0x84c>
		__ticks = 1;
    2024:	81 e0       	ldi	r24, 0x01	; 1
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9e 83       	std	Y+6, r25	; 0x06
    202a:	8d 83       	std	Y+5, r24	; 0x05
    202c:	3f c0       	rjmp	.+126    	; 0x20ac <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    202e:	6f 81       	ldd	r22, Y+7	; 0x07
    2030:	78 85       	ldd	r23, Y+8	; 0x08
    2032:	89 85       	ldd	r24, Y+9	; 0x09
    2034:	9a 85       	ldd	r25, Y+10	; 0x0a
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	3f ef       	ldi	r19, 0xFF	; 255
    203a:	4f e7       	ldi	r20, 0x7F	; 127
    203c:	57 e4       	ldi	r21, 0x47	; 71
    203e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2042:	18 16       	cp	r1, r24
    2044:	4c f5       	brge	.+82     	; 0x2098 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2046:	6b 85       	ldd	r22, Y+11	; 0x0b
    2048:	7c 85       	ldd	r23, Y+12	; 0x0c
    204a:	8d 85       	ldd	r24, Y+13	; 0x0d
    204c:	9e 85       	ldd	r25, Y+14	; 0x0e
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e2       	ldi	r20, 0x20	; 32
    2054:	51 e4       	ldi	r21, 0x41	; 65
    2056:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205a:	dc 01       	movw	r26, r24
    205c:	cb 01       	movw	r24, r22
    205e:	bc 01       	movw	r22, r24
    2060:	cd 01       	movw	r24, r26
    2062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	9e 83       	std	Y+6, r25	; 0x06
    206c:	8d 83       	std	Y+5, r24	; 0x05
    206e:	0f c0       	rjmp	.+30     	; 0x208e <LCD_sendCommand+0x8ac>
    2070:	88 ec       	ldi	r24, 0xC8	; 200
    2072:	90 e0       	ldi	r25, 0x00	; 0
    2074:	9c 83       	std	Y+4, r25	; 0x04
    2076:	8b 83       	std	Y+3, r24	; 0x03
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	01 97       	sbiw	r24, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_sendCommand+0x89a>
    2080:	9c 83       	std	Y+4, r25	; 0x04
    2082:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	01 97       	sbiw	r24, 0x01	; 1
    208a:	9e 83       	std	Y+6, r25	; 0x06
    208c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    208e:	8d 81       	ldd	r24, Y+5	; 0x05
    2090:	9e 81       	ldd	r25, Y+6	; 0x06
    2092:	00 97       	sbiw	r24, 0x00	; 0
    2094:	69 f7       	brne	.-38     	; 0x2070 <LCD_sendCommand+0x88e>
    2096:	14 c0       	rjmp	.+40     	; 0x20c0 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2098:	6f 81       	ldd	r22, Y+7	; 0x07
    209a:	78 85       	ldd	r23, Y+8	; 0x08
    209c:	89 85       	ldd	r24, Y+9	; 0x09
    209e:	9a 85       	ldd	r25, Y+10	; 0x0a
    20a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	9e 83       	std	Y+6, r25	; 0x06
    20aa:	8d 83       	std	Y+5, r24	; 0x05
    20ac:	8d 81       	ldd	r24, Y+5	; 0x05
    20ae:	9e 81       	ldd	r25, Y+6	; 0x06
    20b0:	9a 83       	std	Y+2, r25	; 0x02
    20b2:	89 83       	std	Y+1, r24	; 0x01
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_sendCommand+0x8d6>
    20bc:	9a 83       	std	Y+2, r25	; 0x02
    20be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif
}
    20c0:	cd 59       	subi	r28, 0x9D	; 157
    20c2:	df 4f       	sbci	r29, 0xFF	; 255
    20c4:	0f b6       	in	r0, 0x3f	; 63
    20c6:	f8 94       	cli
    20c8:	de bf       	out	0x3e, r29	; 62
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	cd bf       	out	0x3d, r28	; 61
    20ce:	cf 91       	pop	r28
    20d0:	df 91       	pop	r29
    20d2:	1f 91       	pop	r17
    20d4:	0f 91       	pop	r16
    20d6:	08 95       	ret

000020d8 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    20d8:	0f 93       	push	r16
    20da:	1f 93       	push	r17
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	c3 56       	subi	r28, 0x63	; 99
    20e6:	d0 40       	sbci	r29, 0x00	; 0
    20e8:	0f b6       	in	r0, 0x3f	; 63
    20ea:	f8 94       	cli
    20ec:	de bf       	out	0x3e, r29	; 62
    20ee:	0f be       	out	0x3f, r0	; 63
    20f0:	cd bf       	out	0x3d, r28	; 61
    20f2:	fe 01       	movw	r30, r28
    20f4:	ed 59       	subi	r30, 0x9D	; 157
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    20fa:	80 e0       	ldi	r24, 0x00	; 0
    20fc:	61 e0       	ldi	r22, 0x01	; 1
    20fe:	41 e0       	ldi	r20, 0x01	; 1
    2100:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    2104:	fe 01       	movw	r30, r28
    2106:	e1 5a       	subi	r30, 0xA1	; 161
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	80 e0       	ldi	r24, 0x00	; 0
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	a0 e8       	ldi	r26, 0x80	; 128
    2110:	bf e3       	ldi	r27, 0x3F	; 63
    2112:	80 83       	st	Z, r24
    2114:	91 83       	std	Z+1, r25	; 0x01
    2116:	a2 83       	std	Z+2, r26	; 0x02
    2118:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    211a:	8e 01       	movw	r16, r28
    211c:	05 5a       	subi	r16, 0xA5	; 165
    211e:	1f 4f       	sbci	r17, 0xFF	; 255
    2120:	fe 01       	movw	r30, r28
    2122:	e1 5a       	subi	r30, 0xA1	; 161
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	60 81       	ld	r22, Z
    2128:	71 81       	ldd	r23, Z+1	; 0x01
    212a:	82 81       	ldd	r24, Z+2	; 0x02
    212c:	93 81       	ldd	r25, Z+3	; 0x03
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4a ef       	ldi	r20, 0xFA	; 250
    2134:	54 e4       	ldi	r21, 0x44	; 68
    2136:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	f8 01       	movw	r30, r16
    2140:	80 83       	st	Z, r24
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	a2 83       	std	Z+2, r26	; 0x02
    2146:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2148:	fe 01       	movw	r30, r28
    214a:	e5 5a       	subi	r30, 0xA5	; 165
    214c:	ff 4f       	sbci	r31, 0xFF	; 255
    214e:	60 81       	ld	r22, Z
    2150:	71 81       	ldd	r23, Z+1	; 0x01
    2152:	82 81       	ldd	r24, Z+2	; 0x02
    2154:	93 81       	ldd	r25, Z+3	; 0x03
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e8       	ldi	r20, 0x80	; 128
    215c:	5f e3       	ldi	r21, 0x3F	; 63
    215e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2162:	88 23       	and	r24, r24
    2164:	44 f4       	brge	.+16     	; 0x2176 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2166:	fe 01       	movw	r30, r28
    2168:	e7 5a       	subi	r30, 0xA7	; 167
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	91 83       	std	Z+1, r25	; 0x01
    2172:	80 83       	st	Z, r24
    2174:	64 c0       	rjmp	.+200    	; 0x223e <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2176:	fe 01       	movw	r30, r28
    2178:	e5 5a       	subi	r30, 0xA5	; 165
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	60 81       	ld	r22, Z
    217e:	71 81       	ldd	r23, Z+1	; 0x01
    2180:	82 81       	ldd	r24, Z+2	; 0x02
    2182:	93 81       	ldd	r25, Z+3	; 0x03
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	3f ef       	ldi	r19, 0xFF	; 255
    2188:	4f e7       	ldi	r20, 0x7F	; 127
    218a:	57 e4       	ldi	r21, 0x47	; 71
    218c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2190:	18 16       	cp	r1, r24
    2192:	0c f0       	brlt	.+2      	; 0x2196 <LCD_displayCharacter+0xbe>
    2194:	43 c0       	rjmp	.+134    	; 0x221c <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2196:	fe 01       	movw	r30, r28
    2198:	e1 5a       	subi	r30, 0xA1	; 161
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	60 81       	ld	r22, Z
    219e:	71 81       	ldd	r23, Z+1	; 0x01
    21a0:	82 81       	ldd	r24, Z+2	; 0x02
    21a2:	93 81       	ldd	r25, Z+3	; 0x03
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	51 e4       	ldi	r21, 0x41	; 65
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8e 01       	movw	r16, r28
    21b6:	07 5a       	subi	r16, 0xA7	; 167
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ba:	bc 01       	movw	r22, r24
    21bc:	cd 01       	movw	r24, r26
    21be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c2:	dc 01       	movw	r26, r24
    21c4:	cb 01       	movw	r24, r22
    21c6:	f8 01       	movw	r30, r16
    21c8:	91 83       	std	Z+1, r25	; 0x01
    21ca:	80 83       	st	Z, r24
    21cc:	1f c0       	rjmp	.+62     	; 0x220c <LCD_displayCharacter+0x134>
    21ce:	fe 01       	movw	r30, r28
    21d0:	e9 5a       	subi	r30, 0xA9	; 169
    21d2:	ff 4f       	sbci	r31, 0xFF	; 255
    21d4:	88 ec       	ldi	r24, 0xC8	; 200
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	91 83       	std	Z+1, r25	; 0x01
    21da:	80 83       	st	Z, r24
    21dc:	fe 01       	movw	r30, r28
    21de:	e9 5a       	subi	r30, 0xA9	; 169
    21e0:	ff 4f       	sbci	r31, 0xFF	; 255
    21e2:	80 81       	ld	r24, Z
    21e4:	91 81       	ldd	r25, Z+1	; 0x01
    21e6:	01 97       	sbiw	r24, 0x01	; 1
    21e8:	f1 f7       	brne	.-4      	; 0x21e6 <LCD_displayCharacter+0x10e>
    21ea:	fe 01       	movw	r30, r28
    21ec:	e9 5a       	subi	r30, 0xA9	; 169
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	91 83       	std	Z+1, r25	; 0x01
    21f2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21f4:	de 01       	movw	r26, r28
    21f6:	a7 5a       	subi	r26, 0xA7	; 167
    21f8:	bf 4f       	sbci	r27, 0xFF	; 255
    21fa:	fe 01       	movw	r30, r28
    21fc:	e7 5a       	subi	r30, 0xA7	; 167
    21fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2200:	80 81       	ld	r24, Z
    2202:	91 81       	ldd	r25, Z+1	; 0x01
    2204:	01 97       	sbiw	r24, 0x01	; 1
    2206:	11 96       	adiw	r26, 0x01	; 1
    2208:	9c 93       	st	X, r25
    220a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220c:	fe 01       	movw	r30, r28
    220e:	e7 5a       	subi	r30, 0xA7	; 167
    2210:	ff 4f       	sbci	r31, 0xFF	; 255
    2212:	80 81       	ld	r24, Z
    2214:	91 81       	ldd	r25, Z+1	; 0x01
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	d1 f6       	brne	.-76     	; 0x21ce <LCD_displayCharacter+0xf6>
    221a:	27 c0       	rjmp	.+78     	; 0x226a <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    221c:	8e 01       	movw	r16, r28
    221e:	07 5a       	subi	r16, 0xA7	; 167
    2220:	1f 4f       	sbci	r17, 0xFF	; 255
    2222:	fe 01       	movw	r30, r28
    2224:	e5 5a       	subi	r30, 0xA5	; 165
    2226:	ff 4f       	sbci	r31, 0xFF	; 255
    2228:	60 81       	ld	r22, Z
    222a:	71 81       	ldd	r23, Z+1	; 0x01
    222c:	82 81       	ldd	r24, Z+2	; 0x02
    222e:	93 81       	ldd	r25, Z+3	; 0x03
    2230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	f8 01       	movw	r30, r16
    223a:	91 83       	std	Z+1, r25	; 0x01
    223c:	80 83       	st	Z, r24
    223e:	de 01       	movw	r26, r28
    2240:	ab 5a       	subi	r26, 0xAB	; 171
    2242:	bf 4f       	sbci	r27, 0xFF	; 255
    2244:	fe 01       	movw	r30, r28
    2246:	e7 5a       	subi	r30, 0xA7	; 167
    2248:	ff 4f       	sbci	r31, 0xFF	; 255
    224a:	80 81       	ld	r24, Z
    224c:	91 81       	ldd	r25, Z+1	; 0x01
    224e:	8d 93       	st	X+, r24
    2250:	9c 93       	st	X, r25
    2252:	fe 01       	movw	r30, r28
    2254:	eb 5a       	subi	r30, 0xAB	; 171
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	91 81       	ldd	r25, Z+1	; 0x01
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <LCD_displayCharacter+0x184>
    2260:	fe 01       	movw	r30, r28
    2262:	eb 5a       	subi	r30, 0xAB	; 171
    2264:	ff 4f       	sbci	r31, 0xFF	; 255
    2266:	91 83       	std	Z+1, r25	; 0x01
    2268:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	62 e0       	ldi	r22, 0x02	; 2
    226e:	41 e0       	ldi	r20, 0x01	; 1
    2270:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    2274:	fe 01       	movw	r30, r28
    2276:	ef 5a       	subi	r30, 0xAF	; 175
    2278:	ff 4f       	sbci	r31, 0xFF	; 255
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e8       	ldi	r26, 0x80	; 128
    2280:	bf e3       	ldi	r27, 0x3F	; 63
    2282:	80 83       	st	Z, r24
    2284:	91 83       	std	Z+1, r25	; 0x01
    2286:	a2 83       	std	Z+2, r26	; 0x02
    2288:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    228a:	8e 01       	movw	r16, r28
    228c:	03 5b       	subi	r16, 0xB3	; 179
    228e:	1f 4f       	sbci	r17, 0xFF	; 255
    2290:	fe 01       	movw	r30, r28
    2292:	ef 5a       	subi	r30, 0xAF	; 175
    2294:	ff 4f       	sbci	r31, 0xFF	; 255
    2296:	60 81       	ld	r22, Z
    2298:	71 81       	ldd	r23, Z+1	; 0x01
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	93 81       	ldd	r25, Z+3	; 0x03
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	4a ef       	ldi	r20, 0xFA	; 250
    22a4:	54 e4       	ldi	r21, 0x44	; 68
    22a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	f8 01       	movw	r30, r16
    22b0:	80 83       	st	Z, r24
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	a2 83       	std	Z+2, r26	; 0x02
    22b6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22b8:	fe 01       	movw	r30, r28
    22ba:	e3 5b       	subi	r30, 0xB3	; 179
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	60 81       	ld	r22, Z
    22c0:	71 81       	ldd	r23, Z+1	; 0x01
    22c2:	82 81       	ldd	r24, Z+2	; 0x02
    22c4:	93 81       	ldd	r25, Z+3	; 0x03
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e8       	ldi	r20, 0x80	; 128
    22cc:	5f e3       	ldi	r21, 0x3F	; 63
    22ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	44 f4       	brge	.+16     	; 0x22e6 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    22d6:	fe 01       	movw	r30, r28
    22d8:	e5 5b       	subi	r30, 0xB5	; 181
    22da:	ff 4f       	sbci	r31, 0xFF	; 255
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	91 83       	std	Z+1, r25	; 0x01
    22e2:	80 83       	st	Z, r24
    22e4:	64 c0       	rjmp	.+200    	; 0x23ae <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    22e6:	fe 01       	movw	r30, r28
    22e8:	e3 5b       	subi	r30, 0xB3	; 179
    22ea:	ff 4f       	sbci	r31, 0xFF	; 255
    22ec:	60 81       	ld	r22, Z
    22ee:	71 81       	ldd	r23, Z+1	; 0x01
    22f0:	82 81       	ldd	r24, Z+2	; 0x02
    22f2:	93 81       	ldd	r25, Z+3	; 0x03
    22f4:	20 e0       	ldi	r18, 0x00	; 0
    22f6:	3f ef       	ldi	r19, 0xFF	; 255
    22f8:	4f e7       	ldi	r20, 0x7F	; 127
    22fa:	57 e4       	ldi	r21, 0x47	; 71
    22fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2300:	18 16       	cp	r1, r24
    2302:	0c f0       	brlt	.+2      	; 0x2306 <LCD_displayCharacter+0x22e>
    2304:	43 c0       	rjmp	.+134    	; 0x238c <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2306:	fe 01       	movw	r30, r28
    2308:	ef 5a       	subi	r30, 0xAF	; 175
    230a:	ff 4f       	sbci	r31, 0xFF	; 255
    230c:	60 81       	ld	r22, Z
    230e:	71 81       	ldd	r23, Z+1	; 0x01
    2310:	82 81       	ldd	r24, Z+2	; 0x02
    2312:	93 81       	ldd	r25, Z+3	; 0x03
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	8e 01       	movw	r16, r28
    2326:	05 5b       	subi	r16, 0xB5	; 181
    2328:	1f 4f       	sbci	r17, 0xFF	; 255
    232a:	bc 01       	movw	r22, r24
    232c:	cd 01       	movw	r24, r26
    232e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2332:	dc 01       	movw	r26, r24
    2334:	cb 01       	movw	r24, r22
    2336:	f8 01       	movw	r30, r16
    2338:	91 83       	std	Z+1, r25	; 0x01
    233a:	80 83       	st	Z, r24
    233c:	1f c0       	rjmp	.+62     	; 0x237c <LCD_displayCharacter+0x2a4>
    233e:	fe 01       	movw	r30, r28
    2340:	e7 5b       	subi	r30, 0xB7	; 183
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	88 ec       	ldi	r24, 0xC8	; 200
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	91 83       	std	Z+1, r25	; 0x01
    234a:	80 83       	st	Z, r24
    234c:	fe 01       	movw	r30, r28
    234e:	e7 5b       	subi	r30, 0xB7	; 183
    2350:	ff 4f       	sbci	r31, 0xFF	; 255
    2352:	80 81       	ld	r24, Z
    2354:	91 81       	ldd	r25, Z+1	; 0x01
    2356:	01 97       	sbiw	r24, 0x01	; 1
    2358:	f1 f7       	brne	.-4      	; 0x2356 <LCD_displayCharacter+0x27e>
    235a:	fe 01       	movw	r30, r28
    235c:	e7 5b       	subi	r30, 0xB7	; 183
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	91 83       	std	Z+1, r25	; 0x01
    2362:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2364:	de 01       	movw	r26, r28
    2366:	a5 5b       	subi	r26, 0xB5	; 181
    2368:	bf 4f       	sbci	r27, 0xFF	; 255
    236a:	fe 01       	movw	r30, r28
    236c:	e5 5b       	subi	r30, 0xB5	; 181
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	91 81       	ldd	r25, Z+1	; 0x01
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	11 96       	adiw	r26, 0x01	; 1
    2378:	9c 93       	st	X, r25
    237a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237c:	fe 01       	movw	r30, r28
    237e:	e5 5b       	subi	r30, 0xB5	; 181
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	80 81       	ld	r24, Z
    2384:	91 81       	ldd	r25, Z+1	; 0x01
    2386:	00 97       	sbiw	r24, 0x00	; 0
    2388:	d1 f6       	brne	.-76     	; 0x233e <LCD_displayCharacter+0x266>
    238a:	27 c0       	rjmp	.+78     	; 0x23da <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    238c:	8e 01       	movw	r16, r28
    238e:	05 5b       	subi	r16, 0xB5	; 181
    2390:	1f 4f       	sbci	r17, 0xFF	; 255
    2392:	fe 01       	movw	r30, r28
    2394:	e3 5b       	subi	r30, 0xB3	; 179
    2396:	ff 4f       	sbci	r31, 0xFF	; 255
    2398:	60 81       	ld	r22, Z
    239a:	71 81       	ldd	r23, Z+1	; 0x01
    239c:	82 81       	ldd	r24, Z+2	; 0x02
    239e:	93 81       	ldd	r25, Z+3	; 0x03
    23a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	f8 01       	movw	r30, r16
    23aa:	91 83       	std	Z+1, r25	; 0x01
    23ac:	80 83       	st	Z, r24
    23ae:	de 01       	movw	r26, r28
    23b0:	a9 5b       	subi	r26, 0xB9	; 185
    23b2:	bf 4f       	sbci	r27, 0xFF	; 255
    23b4:	fe 01       	movw	r30, r28
    23b6:	e5 5b       	subi	r30, 0xB5	; 181
    23b8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	8d 93       	st	X+, r24
    23c0:	9c 93       	st	X, r25
    23c2:	fe 01       	movw	r30, r28
    23c4:	e9 5b       	subi	r30, 0xB9	; 185
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	80 81       	ld	r24, Z
    23ca:	91 81       	ldd	r25, Z+1	; 0x01
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <LCD_displayCharacter+0x2f4>
    23d0:	fe 01       	movw	r30, r28
    23d2:	e9 5b       	subi	r30, 0xB9	; 185
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	91 83       	std	Z+1, r25	; 0x01
    23d8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    23da:	fe 01       	movw	r30, r28
    23dc:	ed 59       	subi	r30, 0x9D	; 157
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	80 81       	ld	r24, Z
    23e2:	88 2f       	mov	r24, r24
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	80 71       	andi	r24, 0x10	; 16
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	95 95       	asr	r25
    23ec:	87 95       	ror	r24
    23ee:	95 95       	asr	r25
    23f0:	87 95       	ror	r24
    23f2:	95 95       	asr	r25
    23f4:	87 95       	ror	r24
    23f6:	95 95       	asr	r25
    23f8:	87 95       	ror	r24
    23fa:	98 2f       	mov	r25, r24
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	63 e0       	ldi	r22, 0x03	; 3
    2400:	49 2f       	mov	r20, r25
    2402:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2406:	fe 01       	movw	r30, r28
    2408:	ed 59       	subi	r30, 0x9D	; 157
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	80 81       	ld	r24, Z
    240e:	88 2f       	mov	r24, r24
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	80 72       	andi	r24, 0x20	; 32
    2414:	90 70       	andi	r25, 0x00	; 0
    2416:	95 95       	asr	r25
    2418:	87 95       	ror	r24
    241a:	95 95       	asr	r25
    241c:	87 95       	ror	r24
    241e:	95 95       	asr	r25
    2420:	87 95       	ror	r24
    2422:	95 95       	asr	r25
    2424:	87 95       	ror	r24
    2426:	95 95       	asr	r25
    2428:	87 95       	ror	r24
    242a:	98 2f       	mov	r25, r24
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	64 e0       	ldi	r22, 0x04	; 4
    2430:	49 2f       	mov	r20, r25
    2432:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2436:	fe 01       	movw	r30, r28
    2438:	ed 59       	subi	r30, 0x9D	; 157
    243a:	ff 4f       	sbci	r31, 0xFF	; 255
    243c:	80 81       	ld	r24, Z
    243e:	88 2f       	mov	r24, r24
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	80 74       	andi	r24, 0x40	; 64
    2444:	90 70       	andi	r25, 0x00	; 0
    2446:	08 2e       	mov	r0, r24
    2448:	89 2f       	mov	r24, r25
    244a:	00 0c       	add	r0, r0
    244c:	88 1f       	adc	r24, r24
    244e:	99 0b       	sbc	r25, r25
    2450:	00 0c       	add	r0, r0
    2452:	88 1f       	adc	r24, r24
    2454:	99 1f       	adc	r25, r25
    2456:	98 2f       	mov	r25, r24
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	65 e0       	ldi	r22, 0x05	; 5
    245c:	49 2f       	mov	r20, r25
    245e:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2462:	fe 01       	movw	r30, r28
    2464:	ed 59       	subi	r30, 0x9D	; 157
    2466:	ff 4f       	sbci	r31, 0xFF	; 255
    2468:	80 81       	ld	r24, Z
    246a:	98 2f       	mov	r25, r24
    246c:	99 1f       	adc	r25, r25
    246e:	99 27       	eor	r25, r25
    2470:	99 1f       	adc	r25, r25
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	66 e0       	ldi	r22, 0x06	; 6
    2476:	49 2f       	mov	r20, r25
    2478:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    247c:	fe 01       	movw	r30, r28
    247e:	ed 5b       	subi	r30, 0xBD	; 189
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a0 e8       	ldi	r26, 0x80	; 128
    2488:	bf e3       	ldi	r27, 0x3F	; 63
    248a:	80 83       	st	Z, r24
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	a2 83       	std	Z+2, r26	; 0x02
    2490:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	8e 01       	movw	r16, r28
    2494:	01 5c       	subi	r16, 0xC1	; 193
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	fe 01       	movw	r30, r28
    249a:	ed 5b       	subi	r30, 0xBD	; 189
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	60 81       	ld	r22, Z
    24a0:	71 81       	ldd	r23, Z+1	; 0x01
    24a2:	82 81       	ldd	r24, Z+2	; 0x02
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4a ef       	ldi	r20, 0xFA	; 250
    24ac:	54 e4       	ldi	r21, 0x44	; 68
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	f8 01       	movw	r30, r16
    24b8:	80 83       	st	Z, r24
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	a2 83       	std	Z+2, r26	; 0x02
    24be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24c0:	fe 01       	movw	r30, r28
    24c2:	ff 96       	adiw	r30, 0x3f	; 63
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	2c f4       	brge	.+10     	; 0x24e6 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9e af       	std	Y+62, r25	; 0x3e
    24e2:	8d af       	std	Y+61, r24	; 0x3d
    24e4:	46 c0       	rjmp	.+140    	; 0x2572 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    24e6:	fe 01       	movw	r30, r28
    24e8:	ff 96       	adiw	r30, 0x3f	; 63
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	64 f5       	brge	.+88     	; 0x255a <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	fe 01       	movw	r30, r28
    2504:	ed 5b       	subi	r30, 0xBD	; 189
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9e af       	std	Y+62, r25	; 0x3e
    252e:	8d af       	std	Y+61, r24	; 0x3d
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <LCD_displayCharacter+0x478>
    2532:	88 ec       	ldi	r24, 0xC8	; 200
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9c af       	std	Y+60, r25	; 0x3c
    2538:	8b af       	std	Y+59, r24	; 0x3b
    253a:	8b ad       	ldd	r24, Y+59	; 0x3b
    253c:	9c ad       	ldd	r25, Y+60	; 0x3c
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_displayCharacter+0x466>
    2542:	9c af       	std	Y+60, r25	; 0x3c
    2544:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8d ad       	ldd	r24, Y+61	; 0x3d
    2548:	9e ad       	ldd	r25, Y+62	; 0x3e
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	9e af       	std	Y+62, r25	; 0x3e
    254e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8d ad       	ldd	r24, Y+61	; 0x3d
    2552:	9e ad       	ldd	r25, Y+62	; 0x3e
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <LCD_displayCharacter+0x45a>
    2558:	16 c0       	rjmp	.+44     	; 0x2586 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	fe 01       	movw	r30, r28
    255c:	ff 96       	adiw	r30, 0x3f	; 63
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9e af       	std	Y+62, r25	; 0x3e
    2570:	8d af       	std	Y+61, r24	; 0x3d
    2572:	8d ad       	ldd	r24, Y+61	; 0x3d
    2574:	9e ad       	ldd	r25, Y+62	; 0x3e
    2576:	9a af       	std	Y+58, r25	; 0x3a
    2578:	89 af       	std	Y+57, r24	; 0x39
    257a:	89 ad       	ldd	r24, Y+57	; 0x39
    257c:	9a ad       	ldd	r25, Y+58	; 0x3a
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <LCD_displayCharacter+0x4a6>
    2582:	9a af       	std	Y+58, r25	; 0x3a
    2584:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	62 e0       	ldi	r22, 0x02	; 2
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a0 e8       	ldi	r26, 0x80	; 128
    2596:	bf e3       	ldi	r27, 0x3F	; 63
    2598:	8d ab       	std	Y+53, r24	; 0x35
    259a:	9e ab       	std	Y+54, r25	; 0x36
    259c:	af ab       	std	Y+55, r26	; 0x37
    259e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25a0:	6d a9       	ldd	r22, Y+53	; 0x35
    25a2:	7e a9       	ldd	r23, Y+54	; 0x36
    25a4:	8f a9       	ldd	r24, Y+55	; 0x37
    25a6:	98 ad       	ldd	r25, Y+56	; 0x38
    25a8:	20 e0       	ldi	r18, 0x00	; 0
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	4a ef       	ldi	r20, 0xFA	; 250
    25ae:	54 e4       	ldi	r21, 0x44	; 68
    25b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	89 ab       	std	Y+49, r24	; 0x31
    25ba:	9a ab       	std	Y+50, r25	; 0x32
    25bc:	ab ab       	std	Y+51, r26	; 0x33
    25be:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25c0:	69 a9       	ldd	r22, Y+49	; 0x31
    25c2:	7a a9       	ldd	r23, Y+50	; 0x32
    25c4:	8b a9       	ldd	r24, Y+51	; 0x33
    25c6:	9c a9       	ldd	r25, Y+52	; 0x34
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e8       	ldi	r20, 0x80	; 128
    25ce:	5f e3       	ldi	r21, 0x3F	; 63
    25d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25d4:	88 23       	and	r24, r24
    25d6:	2c f4       	brge	.+10     	; 0x25e2 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	90 e0       	ldi	r25, 0x00	; 0
    25dc:	98 ab       	std	Y+48, r25	; 0x30
    25de:	8f a7       	std	Y+47, r24	; 0x2f
    25e0:	3f c0       	rjmp	.+126    	; 0x2660 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    25e2:	69 a9       	ldd	r22, Y+49	; 0x31
    25e4:	7a a9       	ldd	r23, Y+50	; 0x32
    25e6:	8b a9       	ldd	r24, Y+51	; 0x33
    25e8:	9c a9       	ldd	r25, Y+52	; 0x34
    25ea:	20 e0       	ldi	r18, 0x00	; 0
    25ec:	3f ef       	ldi	r19, 0xFF	; 255
    25ee:	4f e7       	ldi	r20, 0x7F	; 127
    25f0:	57 e4       	ldi	r21, 0x47	; 71
    25f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25f6:	18 16       	cp	r1, r24
    25f8:	4c f5       	brge	.+82     	; 0x264c <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25fa:	6d a9       	ldd	r22, Y+53	; 0x35
    25fc:	7e a9       	ldd	r23, Y+54	; 0x36
    25fe:	8f a9       	ldd	r24, Y+55	; 0x37
    2600:	98 ad       	ldd	r25, Y+56	; 0x38
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e2       	ldi	r20, 0x20	; 32
    2608:	51 e4       	ldi	r21, 0x41	; 65
    260a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	98 ab       	std	Y+48, r25	; 0x30
    2620:	8f a7       	std	Y+47, r24	; 0x2f
    2622:	0f c0       	rjmp	.+30     	; 0x2642 <LCD_displayCharacter+0x56a>
    2624:	88 ec       	ldi	r24, 0xC8	; 200
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	9e a7       	std	Y+46, r25	; 0x2e
    262a:	8d a7       	std	Y+45, r24	; 0x2d
    262c:	8d a5       	ldd	r24, Y+45	; 0x2d
    262e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <LCD_displayCharacter+0x558>
    2634:	9e a7       	std	Y+46, r25	; 0x2e
    2636:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2638:	8f a5       	ldd	r24, Y+47	; 0x2f
    263a:	98 a9       	ldd	r25, Y+48	; 0x30
    263c:	01 97       	sbiw	r24, 0x01	; 1
    263e:	98 ab       	std	Y+48, r25	; 0x30
    2640:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2642:	8f a5       	ldd	r24, Y+47	; 0x2f
    2644:	98 a9       	ldd	r25, Y+48	; 0x30
    2646:	00 97       	sbiw	r24, 0x00	; 0
    2648:	69 f7       	brne	.-38     	; 0x2624 <LCD_displayCharacter+0x54c>
    264a:	14 c0       	rjmp	.+40     	; 0x2674 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264c:	69 a9       	ldd	r22, Y+49	; 0x31
    264e:	7a a9       	ldd	r23, Y+50	; 0x32
    2650:	8b a9       	ldd	r24, Y+51	; 0x33
    2652:	9c a9       	ldd	r25, Y+52	; 0x34
    2654:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	98 ab       	std	Y+48, r25	; 0x30
    265e:	8f a7       	std	Y+47, r24	; 0x2f
    2660:	8f a5       	ldd	r24, Y+47	; 0x2f
    2662:	98 a9       	ldd	r25, Y+48	; 0x30
    2664:	9c a7       	std	Y+44, r25	; 0x2c
    2666:	8b a7       	std	Y+43, r24	; 0x2b
    2668:	8b a5       	ldd	r24, Y+43	; 0x2b
    266a:	9c a5       	ldd	r25, Y+44	; 0x2c
    266c:	01 97       	sbiw	r24, 0x01	; 1
    266e:	f1 f7       	brne	.-4      	; 0x266c <LCD_displayCharacter+0x594>
    2670:	9c a7       	std	Y+44, r25	; 0x2c
    2672:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2674:	80 e0       	ldi	r24, 0x00	; 0
    2676:	62 e0       	ldi	r22, 0x02	; 2
    2678:	41 e0       	ldi	r20, 0x01	; 1
    267a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	90 e0       	ldi	r25, 0x00	; 0
    2682:	a0 e8       	ldi	r26, 0x80	; 128
    2684:	bf e3       	ldi	r27, 0x3F	; 63
    2686:	8f a3       	std	Y+39, r24	; 0x27
    2688:	98 a7       	std	Y+40, r25	; 0x28
    268a:	a9 a7       	std	Y+41, r26	; 0x29
    268c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    268e:	6f a1       	ldd	r22, Y+39	; 0x27
    2690:	78 a5       	ldd	r23, Y+40	; 0x28
    2692:	89 a5       	ldd	r24, Y+41	; 0x29
    2694:	9a a5       	ldd	r25, Y+42	; 0x2a
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4a ef       	ldi	r20, 0xFA	; 250
    269c:	54 e4       	ldi	r21, 0x44	; 68
    269e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26a2:	dc 01       	movw	r26, r24
    26a4:	cb 01       	movw	r24, r22
    26a6:	8b a3       	std	Y+35, r24	; 0x23
    26a8:	9c a3       	std	Y+36, r25	; 0x24
    26aa:	ad a3       	std	Y+37, r26	; 0x25
    26ac:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26ae:	6b a1       	ldd	r22, Y+35	; 0x23
    26b0:	7c a1       	ldd	r23, Y+36	; 0x24
    26b2:	8d a1       	ldd	r24, Y+37	; 0x25
    26b4:	9e a1       	ldd	r25, Y+38	; 0x26
    26b6:	20 e0       	ldi	r18, 0x00	; 0
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	40 e8       	ldi	r20, 0x80	; 128
    26bc:	5f e3       	ldi	r21, 0x3F	; 63
    26be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26c2:	88 23       	and	r24, r24
    26c4:	2c f4       	brge	.+10     	; 0x26d0 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	9a a3       	std	Y+34, r25	; 0x22
    26cc:	89 a3       	std	Y+33, r24	; 0x21
    26ce:	3f c0       	rjmp	.+126    	; 0x274e <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    26d0:	6b a1       	ldd	r22, Y+35	; 0x23
    26d2:	7c a1       	ldd	r23, Y+36	; 0x24
    26d4:	8d a1       	ldd	r24, Y+37	; 0x25
    26d6:	9e a1       	ldd	r25, Y+38	; 0x26
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	3f ef       	ldi	r19, 0xFF	; 255
    26dc:	4f e7       	ldi	r20, 0x7F	; 127
    26de:	57 e4       	ldi	r21, 0x47	; 71
    26e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26e4:	18 16       	cp	r1, r24
    26e6:	4c f5       	brge	.+82     	; 0x273a <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e8:	6f a1       	ldd	r22, Y+39	; 0x27
    26ea:	78 a5       	ldd	r23, Y+40	; 0x28
    26ec:	89 a5       	ldd	r24, Y+41	; 0x29
    26ee:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	51 e4       	ldi	r21, 0x41	; 65
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	bc 01       	movw	r22, r24
    2702:	cd 01       	movw	r24, r26
    2704:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2708:	dc 01       	movw	r26, r24
    270a:	cb 01       	movw	r24, r22
    270c:	9a a3       	std	Y+34, r25	; 0x22
    270e:	89 a3       	std	Y+33, r24	; 0x21
    2710:	0f c0       	rjmp	.+30     	; 0x2730 <LCD_displayCharacter+0x658>
    2712:	88 ec       	ldi	r24, 0xC8	; 200
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	98 a3       	std	Y+32, r25	; 0x20
    2718:	8f 8f       	std	Y+31, r24	; 0x1f
    271a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    271c:	98 a1       	ldd	r25, Y+32	; 0x20
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <LCD_displayCharacter+0x646>
    2722:	98 a3       	std	Y+32, r25	; 0x20
    2724:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2726:	89 a1       	ldd	r24, Y+33	; 0x21
    2728:	9a a1       	ldd	r25, Y+34	; 0x22
    272a:	01 97       	sbiw	r24, 0x01	; 1
    272c:	9a a3       	std	Y+34, r25	; 0x22
    272e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2730:	89 a1       	ldd	r24, Y+33	; 0x21
    2732:	9a a1       	ldd	r25, Y+34	; 0x22
    2734:	00 97       	sbiw	r24, 0x00	; 0
    2736:	69 f7       	brne	.-38     	; 0x2712 <LCD_displayCharacter+0x63a>
    2738:	14 c0       	rjmp	.+40     	; 0x2762 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    273a:	6b a1       	ldd	r22, Y+35	; 0x23
    273c:	7c a1       	ldd	r23, Y+36	; 0x24
    273e:	8d a1       	ldd	r24, Y+37	; 0x25
    2740:	9e a1       	ldd	r25, Y+38	; 0x26
    2742:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2746:	dc 01       	movw	r26, r24
    2748:	cb 01       	movw	r24, r22
    274a:	9a a3       	std	Y+34, r25	; 0x22
    274c:	89 a3       	std	Y+33, r24	; 0x21
    274e:	89 a1       	ldd	r24, Y+33	; 0x21
    2750:	9a a1       	ldd	r25, Y+34	; 0x22
    2752:	9e 8f       	std	Y+30, r25	; 0x1e
    2754:	8d 8f       	std	Y+29, r24	; 0x1d
    2756:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2758:	9e 8d       	ldd	r25, Y+30	; 0x1e
    275a:	01 97       	sbiw	r24, 0x01	; 1
    275c:	f1 f7       	brne	.-4      	; 0x275a <LCD_displayCharacter+0x682>
    275e:	9e 8f       	std	Y+30, r25	; 0x1e
    2760:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2762:	fe 01       	movw	r30, r28
    2764:	ed 59       	subi	r30, 0x9D	; 157
    2766:	ff 4f       	sbci	r31, 0xFF	; 255
    2768:	80 81       	ld	r24, Z
    276a:	98 2f       	mov	r25, r24
    276c:	91 70       	andi	r25, 0x01	; 1
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	63 e0       	ldi	r22, 0x03	; 3
    2772:	49 2f       	mov	r20, r25
    2774:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2778:	fe 01       	movw	r30, r28
    277a:	ed 59       	subi	r30, 0x9D	; 157
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	80 81       	ld	r24, Z
    2780:	88 2f       	mov	r24, r24
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	82 70       	andi	r24, 0x02	; 2
    2786:	90 70       	andi	r25, 0x00	; 0
    2788:	95 95       	asr	r25
    278a:	87 95       	ror	r24
    278c:	98 2f       	mov	r25, r24
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	64 e0       	ldi	r22, 0x04	; 4
    2792:	49 2f       	mov	r20, r25
    2794:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2798:	fe 01       	movw	r30, r28
    279a:	ed 59       	subi	r30, 0x9D	; 157
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	80 81       	ld	r24, Z
    27a0:	88 2f       	mov	r24, r24
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	84 70       	andi	r24, 0x04	; 4
    27a6:	90 70       	andi	r25, 0x00	; 0
    27a8:	95 95       	asr	r25
    27aa:	87 95       	ror	r24
    27ac:	95 95       	asr	r25
    27ae:	87 95       	ror	r24
    27b0:	98 2f       	mov	r25, r24
    27b2:	80 e0       	ldi	r24, 0x00	; 0
    27b4:	65 e0       	ldi	r22, 0x05	; 5
    27b6:	49 2f       	mov	r20, r25
    27b8:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    27bc:	fe 01       	movw	r30, r28
    27be:	ed 59       	subi	r30, 0x9D	; 157
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	88 2f       	mov	r24, r24
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	88 70       	andi	r24, 0x08	; 8
    27ca:	90 70       	andi	r25, 0x00	; 0
    27cc:	95 95       	asr	r25
    27ce:	87 95       	ror	r24
    27d0:	95 95       	asr	r25
    27d2:	87 95       	ror	r24
    27d4:	95 95       	asr	r25
    27d6:	87 95       	ror	r24
    27d8:	98 2f       	mov	r25, r24
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	66 e0       	ldi	r22, 0x06	; 6
    27de:	49 2f       	mov	r20, r25
    27e0:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    27e4:	80 e0       	ldi	r24, 0x00	; 0
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	a0 e8       	ldi	r26, 0x80	; 128
    27ea:	bf e3       	ldi	r27, 0x3F	; 63
    27ec:	89 8f       	std	Y+25, r24	; 0x19
    27ee:	9a 8f       	std	Y+26, r25	; 0x1a
    27f0:	ab 8f       	std	Y+27, r26	; 0x1b
    27f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f4:	69 8d       	ldd	r22, Y+25	; 0x19
    27f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	4a ef       	ldi	r20, 0xFA	; 250
    2802:	54 e4       	ldi	r21, 0x44	; 68
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	8d 8b       	std	Y+21, r24	; 0x15
    280e:	9e 8b       	std	Y+22, r25	; 0x16
    2810:	af 8b       	std	Y+23, r26	; 0x17
    2812:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2814:	6d 89       	ldd	r22, Y+21	; 0x15
    2816:	7e 89       	ldd	r23, Y+22	; 0x16
    2818:	8f 89       	ldd	r24, Y+23	; 0x17
    281a:	98 8d       	ldd	r25, Y+24	; 0x18
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e8       	ldi	r20, 0x80	; 128
    2822:	5f e3       	ldi	r21, 0x3F	; 63
    2824:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2828:	88 23       	and	r24, r24
    282a:	2c f4       	brge	.+10     	; 0x2836 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	9c 8b       	std	Y+20, r25	; 0x14
    2832:	8b 8b       	std	Y+19, r24	; 0x13
    2834:	3f c0       	rjmp	.+126    	; 0x28b4 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2836:	6d 89       	ldd	r22, Y+21	; 0x15
    2838:	7e 89       	ldd	r23, Y+22	; 0x16
    283a:	8f 89       	ldd	r24, Y+23	; 0x17
    283c:	98 8d       	ldd	r25, Y+24	; 0x18
    283e:	20 e0       	ldi	r18, 0x00	; 0
    2840:	3f ef       	ldi	r19, 0xFF	; 255
    2842:	4f e7       	ldi	r20, 0x7F	; 127
    2844:	57 e4       	ldi	r21, 0x47	; 71
    2846:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    284a:	18 16       	cp	r1, r24
    284c:	4c f5       	brge	.+82     	; 0x28a0 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284e:	69 8d       	ldd	r22, Y+25	; 0x19
    2850:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2852:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2854:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2856:	20 e0       	ldi	r18, 0x00	; 0
    2858:	30 e0       	ldi	r19, 0x00	; 0
    285a:	40 e2       	ldi	r20, 0x20	; 32
    285c:	51 e4       	ldi	r21, 0x41	; 65
    285e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2862:	dc 01       	movw	r26, r24
    2864:	cb 01       	movw	r24, r22
    2866:	bc 01       	movw	r22, r24
    2868:	cd 01       	movw	r24, r26
    286a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286e:	dc 01       	movw	r26, r24
    2870:	cb 01       	movw	r24, r22
    2872:	9c 8b       	std	Y+20, r25	; 0x14
    2874:	8b 8b       	std	Y+19, r24	; 0x13
    2876:	0f c0       	rjmp	.+30     	; 0x2896 <LCD_displayCharacter+0x7be>
    2878:	88 ec       	ldi	r24, 0xC8	; 200
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	9a 8b       	std	Y+18, r25	; 0x12
    287e:	89 8b       	std	Y+17, r24	; 0x11
    2880:	89 89       	ldd	r24, Y+17	; 0x11
    2882:	9a 89       	ldd	r25, Y+18	; 0x12
    2884:	01 97       	sbiw	r24, 0x01	; 1
    2886:	f1 f7       	brne	.-4      	; 0x2884 <LCD_displayCharacter+0x7ac>
    2888:	9a 8b       	std	Y+18, r25	; 0x12
    288a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288c:	8b 89       	ldd	r24, Y+19	; 0x13
    288e:	9c 89       	ldd	r25, Y+20	; 0x14
    2890:	01 97       	sbiw	r24, 0x01	; 1
    2892:	9c 8b       	std	Y+20, r25	; 0x14
    2894:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2896:	8b 89       	ldd	r24, Y+19	; 0x13
    2898:	9c 89       	ldd	r25, Y+20	; 0x14
    289a:	00 97       	sbiw	r24, 0x00	; 0
    289c:	69 f7       	brne	.-38     	; 0x2878 <LCD_displayCharacter+0x7a0>
    289e:	14 c0       	rjmp	.+40     	; 0x28c8 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a0:	6d 89       	ldd	r22, Y+21	; 0x15
    28a2:	7e 89       	ldd	r23, Y+22	; 0x16
    28a4:	8f 89       	ldd	r24, Y+23	; 0x17
    28a6:	98 8d       	ldd	r25, Y+24	; 0x18
    28a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ac:	dc 01       	movw	r26, r24
    28ae:	cb 01       	movw	r24, r22
    28b0:	9c 8b       	std	Y+20, r25	; 0x14
    28b2:	8b 8b       	std	Y+19, r24	; 0x13
    28b4:	8b 89       	ldd	r24, Y+19	; 0x13
    28b6:	9c 89       	ldd	r25, Y+20	; 0x14
    28b8:	98 8b       	std	Y+16, r25	; 0x10
    28ba:	8f 87       	std	Y+15, r24	; 0x0f
    28bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    28be:	98 89       	ldd	r25, Y+16	; 0x10
    28c0:	01 97       	sbiw	r24, 0x01	; 1
    28c2:	f1 f7       	brne	.-4      	; 0x28c0 <LCD_displayCharacter+0x7e8>
    28c4:	98 8b       	std	Y+16, r25	; 0x10
    28c6:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	62 e0       	ldi	r22, 0x02	; 2
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <GPIO_writePin>
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	a0 e8       	ldi	r26, 0x80	; 128
    28d8:	bf e3       	ldi	r27, 0x3F	; 63
    28da:	8b 87       	std	Y+11, r24	; 0x0b
    28dc:	9c 87       	std	Y+12, r25	; 0x0c
    28de:	ad 87       	std	Y+13, r26	; 0x0d
    28e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	4a ef       	ldi	r20, 0xFA	; 250
    28f0:	54 e4       	ldi	r21, 0x44	; 68
    28f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	8f 83       	std	Y+7, r24	; 0x07
    28fc:	98 87       	std	Y+8, r25	; 0x08
    28fe:	a9 87       	std	Y+9, r26	; 0x09
    2900:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2902:	6f 81       	ldd	r22, Y+7	; 0x07
    2904:	78 85       	ldd	r23, Y+8	; 0x08
    2906:	89 85       	ldd	r24, Y+9	; 0x09
    2908:	9a 85       	ldd	r25, Y+10	; 0x0a
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e8       	ldi	r20, 0x80	; 128
    2910:	5f e3       	ldi	r21, 0x3F	; 63
    2912:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2916:	88 23       	and	r24, r24
    2918:	2c f4       	brge	.+10     	; 0x2924 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    291a:	81 e0       	ldi	r24, 0x01	; 1
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	9e 83       	std	Y+6, r25	; 0x06
    2920:	8d 83       	std	Y+5, r24	; 0x05
    2922:	3f c0       	rjmp	.+126    	; 0x29a2 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2924:	6f 81       	ldd	r22, Y+7	; 0x07
    2926:	78 85       	ldd	r23, Y+8	; 0x08
    2928:	89 85       	ldd	r24, Y+9	; 0x09
    292a:	9a 85       	ldd	r25, Y+10	; 0x0a
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	3f ef       	ldi	r19, 0xFF	; 255
    2930:	4f e7       	ldi	r20, 0x7F	; 127
    2932:	57 e4       	ldi	r21, 0x47	; 71
    2934:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2938:	18 16       	cp	r1, r24
    293a:	4c f5       	brge	.+82     	; 0x298e <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    293c:	6b 85       	ldd	r22, Y+11	; 0x0b
    293e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2940:	8d 85       	ldd	r24, Y+13	; 0x0d
    2942:	9e 85       	ldd	r25, Y+14	; 0x0e
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e2       	ldi	r20, 0x20	; 32
    294a:	51 e4       	ldi	r21, 0x41	; 65
    294c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2950:	dc 01       	movw	r26, r24
    2952:	cb 01       	movw	r24, r22
    2954:	bc 01       	movw	r22, r24
    2956:	cd 01       	movw	r24, r26
    2958:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	9e 83       	std	Y+6, r25	; 0x06
    2962:	8d 83       	std	Y+5, r24	; 0x05
    2964:	0f c0       	rjmp	.+30     	; 0x2984 <LCD_displayCharacter+0x8ac>
    2966:	88 ec       	ldi	r24, 0xC8	; 200
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	9c 83       	std	Y+4, r25	; 0x04
    296c:	8b 83       	std	Y+3, r24	; 0x03
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	01 97       	sbiw	r24, 0x01	; 1
    2974:	f1 f7       	brne	.-4      	; 0x2972 <LCD_displayCharacter+0x89a>
    2976:	9c 83       	std	Y+4, r25	; 0x04
    2978:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    297a:	8d 81       	ldd	r24, Y+5	; 0x05
    297c:	9e 81       	ldd	r25, Y+6	; 0x06
    297e:	01 97       	sbiw	r24, 0x01	; 1
    2980:	9e 83       	std	Y+6, r25	; 0x06
    2982:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2984:	8d 81       	ldd	r24, Y+5	; 0x05
    2986:	9e 81       	ldd	r25, Y+6	; 0x06
    2988:	00 97       	sbiw	r24, 0x00	; 0
    298a:	69 f7       	brne	.-38     	; 0x2966 <LCD_displayCharacter+0x88e>
    298c:	14 c0       	rjmp	.+40     	; 0x29b6 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    298e:	6f 81       	ldd	r22, Y+7	; 0x07
    2990:	78 85       	ldd	r23, Y+8	; 0x08
    2992:	89 85       	ldd	r24, Y+9	; 0x09
    2994:	9a 85       	ldd	r25, Y+10	; 0x0a
    2996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	9e 83       	std	Y+6, r25	; 0x06
    29a0:	8d 83       	std	Y+5, r24	; 0x05
    29a2:	8d 81       	ldd	r24, Y+5	; 0x05
    29a4:	9e 81       	ldd	r25, Y+6	; 0x06
    29a6:	9a 83       	std	Y+2, r25	; 0x02
    29a8:	89 83       	std	Y+1, r24	; 0x01
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	9a 81       	ldd	r25, Y+2	; 0x02
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <LCD_displayCharacter+0x8d6>
    29b2:	9a 83       	std	Y+2, r25	; 0x02
    29b4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#endif
}
    29b6:	cd 59       	subi	r28, 0x9D	; 157
    29b8:	df 4f       	sbci	r29, 0xFF	; 255
    29ba:	0f b6       	in	r0, 0x3f	; 63
    29bc:	f8 94       	cli
    29be:	de bf       	out	0x3e, r29	; 62
    29c0:	0f be       	out	0x3f, r0	; 63
    29c2:	cd bf       	out	0x3d, r28	; 61
    29c4:	cf 91       	pop	r28
    29c6:	df 91       	pop	r29
    29c8:	1f 91       	pop	r17
    29ca:	0f 91       	pop	r16
    29cc:	08 95       	ret

000029ce <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	00 d0       	rcall	.+0      	; 0x29d4 <LCD_displayString+0x6>
    29d4:	0f 92       	push	r0
    29d6:	cd b7       	in	r28, 0x3d	; 61
    29d8:	de b7       	in	r29, 0x3e	; 62
    29da:	9b 83       	std	Y+3, r25	; 0x03
    29dc:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    29de:	19 82       	std	Y+1, r1	; 0x01
    29e0:	0e c0       	rjmp	.+28     	; 0x29fe <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	28 2f       	mov	r18, r24
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	9b 81       	ldd	r25, Y+3	; 0x03
    29ec:	fc 01       	movw	r30, r24
    29ee:	e2 0f       	add	r30, r18
    29f0:	f3 1f       	adc	r31, r19
    29f2:	80 81       	ld	r24, Z
    29f4:	0e 94 6c 10 	call	0x20d8	; 0x20d8 <LCD_displayCharacter>
		i++;
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	8f 5f       	subi	r24, 0xFF	; 255
    29fc:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	28 2f       	mov	r18, r24
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	9b 81       	ldd	r25, Y+3	; 0x03
    2a08:	fc 01       	movw	r30, r24
    2a0a:	e2 0f       	add	r30, r18
    2a0c:	f3 1f       	adc	r31, r19
    2a0e:	80 81       	ld	r24, Z
    2a10:	88 23       	and	r24, r24
    2a12:	39 f7       	brne	.-50     	; 0x29e2 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}

}
    2a14:	0f 90       	pop	r0
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <LCD_moveCursor+0x6>
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <LCD_moveCursor+0x8>
    2a28:	0f 92       	push	r0
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	8a 83       	std	Y+2, r24	; 0x02
    2a30:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a32:	8a 81       	ldd	r24, Y+2	; 0x02
    2a34:	28 2f       	mov	r18, r24
    2a36:	30 e0       	ldi	r19, 0x00	; 0
    2a38:	3d 83       	std	Y+5, r19	; 0x05
    2a3a:	2c 83       	std	Y+4, r18	; 0x04
    2a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a40:	81 30       	cpi	r24, 0x01	; 1
    2a42:	91 05       	cpc	r25, r1
    2a44:	c1 f0       	breq	.+48     	; 0x2a76 <LCD_moveCursor+0x56>
    2a46:	2c 81       	ldd	r18, Y+4	; 0x04
    2a48:	3d 81       	ldd	r19, Y+5	; 0x05
    2a4a:	22 30       	cpi	r18, 0x02	; 2
    2a4c:	31 05       	cpc	r19, r1
    2a4e:	2c f4       	brge	.+10     	; 0x2a5a <LCD_moveCursor+0x3a>
    2a50:	8c 81       	ldd	r24, Y+4	; 0x04
    2a52:	9d 81       	ldd	r25, Y+5	; 0x05
    2a54:	00 97       	sbiw	r24, 0x00	; 0
    2a56:	61 f0       	breq	.+24     	; 0x2a70 <LCD_moveCursor+0x50>
    2a58:	19 c0       	rjmp	.+50     	; 0x2a8c <LCD_moveCursor+0x6c>
    2a5a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a5c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a5e:	22 30       	cpi	r18, 0x02	; 2
    2a60:	31 05       	cpc	r19, r1
    2a62:	69 f0       	breq	.+26     	; 0x2a7e <LCD_moveCursor+0x5e>
    2a64:	8c 81       	ldd	r24, Y+4	; 0x04
    2a66:	9d 81       	ldd	r25, Y+5	; 0x05
    2a68:	83 30       	cpi	r24, 0x03	; 3
    2a6a:	91 05       	cpc	r25, r1
    2a6c:	61 f0       	breq	.+24     	; 0x2a86 <LCD_moveCursor+0x66>
    2a6e:	0e c0       	rjmp	.+28     	; 0x2a8c <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2a70:	8b 81       	ldd	r24, Y+3	; 0x03
    2a72:	89 83       	std	Y+1, r24	; 0x01
    2a74:	0b c0       	rjmp	.+22     	; 0x2a8c <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2a76:	8b 81       	ldd	r24, Y+3	; 0x03
    2a78:	80 5c       	subi	r24, 0xC0	; 192
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	07 c0       	rjmp	.+14     	; 0x2a8c <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a80:	80 5f       	subi	r24, 0xF0	; 240
    2a82:	89 83       	std	Y+1, r24	; 0x01
    2a84:	03 c0       	rjmp	.+6      	; 0x2a8c <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2a86:	8b 81       	ldd	r24, Y+3	; 0x03
    2a88:	80 5b       	subi	r24, 0xB0	; 176
    2a8a:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	80 68       	ori	r24, 0x80	; 128
    2a90:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>
}
    2a94:	0f 90       	pop	r0
    2a96:	0f 90       	pop	r0
    2a98:	0f 90       	pop	r0
    2a9a:	0f 90       	pop	r0
    2a9c:	0f 90       	pop	r0
    2a9e:	cf 91       	pop	r28
    2aa0:	df 91       	pop	r29
    2aa2:	08 95       	ret

00002aa4 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2aa4:	df 93       	push	r29
    2aa6:	cf 93       	push	r28
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <LCD_displayStringRowColumn+0x6>
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <LCD_displayStringRowColumn+0x8>
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62
    2ab0:	89 83       	std	Y+1, r24	; 0x01
    2ab2:	6a 83       	std	Y+2, r22	; 0x02
    2ab4:	5c 83       	std	Y+4, r21	; 0x04
    2ab6:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2ab8:	89 81       	ldd	r24, Y+1	; 0x01
    2aba:	6a 81       	ldd	r22, Y+2	; 0x02
    2abc:	0e 94 10 15 	call	0x2a20	; 0x2a20 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ac4:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_displayString>
}
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(uint32 data)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	64 97       	sbiw	r28, 0x14	; 20
    2ae0:	0f b6       	in	r0, 0x3f	; 63
    2ae2:	f8 94       	cli
    2ae4:	de bf       	out	0x3e, r29	; 62
    2ae6:	0f be       	out	0x3f, r0	; 63
    2ae8:	cd bf       	out	0x3d, r28	; 61
    2aea:	69 8b       	std	Y+17, r22	; 0x11
    2aec:	7a 8b       	std	Y+18, r23	; 0x12
    2aee:	8b 8b       	std	Y+19, r24	; 0x13
    2af0:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ascii result */
   ltoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2af2:	89 89       	ldd	r24, Y+17	; 0x11
    2af4:	9a 89       	ldd	r25, Y+18	; 0x12
    2af6:	ab 89       	ldd	r26, Y+19	; 0x13
    2af8:	bc 89       	ldd	r27, Y+20	; 0x14
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	9e 01       	movw	r18, r28
    2b00:	2f 5f       	subi	r18, 0xFF	; 255
    2b02:	3f 4f       	sbci	r19, 0xFF	; 255
    2b04:	a9 01       	movw	r20, r18
    2b06:	2a e0       	ldi	r18, 0x0A	; 10
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <ltoa>
   LCD_displayString(buff); /* Display the string */
    2b0e:	ce 01       	movw	r24, r28
    2b10:	01 96       	adiw	r24, 0x01	; 1
    2b12:	0e 94 e7 14 	call	0x29ce	; 0x29ce <LCD_displayString>
}
    2b16:	64 96       	adiw	r28, 0x14	; 20
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	de bf       	out	0x3e, r29	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	cd bf       	out	0x3d, r28	; 61
    2b22:	cf 91       	pop	r28
    2b24:	df 91       	pop	r29
    2b26:	08 95       	ret

00002b28 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2b28:	df 93       	push	r29
    2b2a:	cf 93       	push	r28
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2b30:	81 e0       	ldi	r24, 0x01	; 1
    2b32:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <LCD_sendCommand>
}
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <main>:
/*******************************************************************************
 *                            Application Layer                                *
 *******************************************************************************/


int main(void){
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	a1 97       	sbiw	r28, 0x21	; 33
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61

	/* Enable Global interrupt */
	SREG |= (1<<7);
    2b50:	af e5       	ldi	r26, 0x5F	; 95
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	ef e5       	ldi	r30, 0x5F	; 95
    2b56:	f0 e0       	ldi	r31, 0x00	; 0
    2b58:	80 81       	ld	r24, Z
    2b5a:	80 68       	ori	r24, 0x80	; 128
    2b5c:	8c 93       	st	X, r24

	/* Initialize the UART Driver */
	UART_ConfigType myconfig ={Eight,Disabled,One,9600};
    2b5e:	9e 01       	movw	r18, r28
    2b60:	2f 5f       	subi	r18, 0xFF	; 255
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	3c 8b       	std	Y+20, r19	; 0x14
    2b66:	2b 8b       	std	Y+19, r18	; 0x13
    2b68:	83 e7       	ldi	r24, 0x73	; 115
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	9e 8b       	std	Y+22, r25	; 0x16
    2b6e:	8d 8b       	std	Y+21, r24	; 0x15
    2b70:	95 e0       	ldi	r25, 0x05	; 5
    2b72:	9f 8b       	std	Y+23, r25	; 0x17
    2b74:	ed 89       	ldd	r30, Y+21	; 0x15
    2b76:	fe 89       	ldd	r31, Y+22	; 0x16
    2b78:	00 80       	ld	r0, Z
    2b7a:	2d 89       	ldd	r18, Y+21	; 0x15
    2b7c:	3e 89       	ldd	r19, Y+22	; 0x16
    2b7e:	2f 5f       	subi	r18, 0xFF	; 255
    2b80:	3f 4f       	sbci	r19, 0xFF	; 255
    2b82:	3e 8b       	std	Y+22, r19	; 0x16
    2b84:	2d 8b       	std	Y+21, r18	; 0x15
    2b86:	eb 89       	ldd	r30, Y+19	; 0x13
    2b88:	fc 89       	ldd	r31, Y+20	; 0x14
    2b8a:	00 82       	st	Z, r0
    2b8c:	2b 89       	ldd	r18, Y+19	; 0x13
    2b8e:	3c 89       	ldd	r19, Y+20	; 0x14
    2b90:	2f 5f       	subi	r18, 0xFF	; 255
    2b92:	3f 4f       	sbci	r19, 0xFF	; 255
    2b94:	3c 8b       	std	Y+20, r19	; 0x14
    2b96:	2b 8b       	std	Y+19, r18	; 0x13
    2b98:	3f 89       	ldd	r19, Y+23	; 0x17
    2b9a:	31 50       	subi	r19, 0x01	; 1
    2b9c:	3f 8b       	std	Y+23, r19	; 0x17
    2b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    2ba0:	88 23       	and	r24, r24
    2ba2:	41 f7       	brne	.-48     	; 0x2b74 <main+0x38>
	UART_init(&myconfig);
    2ba4:	ce 01       	movw	r24, r28
    2ba6:	01 96       	adiw	r24, 0x01	; 1
    2ba8:	0e 94 d9 1a 	call	0x35b2	; 0x35b2 <UART_init>

	/* Initialize the TIMER1 Driver */
	Timer1_ConfigType timerconfig = {0,31250,F_CPU_256,COMPARE};
    2bac:	fe 01       	movw	r30, r28
    2bae:	36 96       	adiw	r30, 0x06	; 6
    2bb0:	f9 8f       	std	Y+25, r31	; 0x19
    2bb2:	e8 8f       	std	Y+24, r30	; 0x18
    2bb4:	2d e6       	ldi	r18, 0x6D	; 109
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	3b 8f       	std	Y+27, r19	; 0x1b
    2bba:	2a 8f       	std	Y+26, r18	; 0x1a
    2bbc:	36 e0       	ldi	r19, 0x06	; 6
    2bbe:	3c 8f       	std	Y+28, r19	; 0x1c
    2bc0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2bc2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2bc4:	00 80       	ld	r0, Z
    2bc6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2bc8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2bca:	2f 5f       	subi	r18, 0xFF	; 255
    2bcc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bce:	3b 8f       	std	Y+27, r19	; 0x1b
    2bd0:	2a 8f       	std	Y+26, r18	; 0x1a
    2bd2:	e8 8d       	ldd	r30, Y+24	; 0x18
    2bd4:	f9 8d       	ldd	r31, Y+25	; 0x19
    2bd6:	00 82       	st	Z, r0
    2bd8:	28 8d       	ldd	r18, Y+24	; 0x18
    2bda:	39 8d       	ldd	r19, Y+25	; 0x19
    2bdc:	2f 5f       	subi	r18, 0xFF	; 255
    2bde:	3f 4f       	sbci	r19, 0xFF	; 255
    2be0:	39 8f       	std	Y+25, r19	; 0x19
    2be2:	28 8f       	std	Y+24, r18	; 0x18
    2be4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    2be6:	31 50       	subi	r19, 0x01	; 1
    2be8:	3c 8f       	std	Y+28, r19	; 0x1c
    2bea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2bec:	88 23       	and	r24, r24
    2bee:	41 f7       	brne	.-48     	; 0x2bc0 <main+0x84>
	Timer1_init(&timerconfig);
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	06 96       	adiw	r24, 0x06	; 6
    2bf4:	0e 94 c2 19 	call	0x3384	; 0x3384 <Timer1_init>
	Timer1_setCallBack(Timer);
    2bf8:	88 e4       	ldi	r24, 0x48	; 72
    2bfa:	96 e1       	ldi	r25, 0x16	; 22
    2bfc:	0e 94 27 1a 	call	0x344e	; 0x344e <Timer1_setCallBack>

	/* Initialize the TWI/I2C Driver */
	TWI_ConfigType twiconfig= {Slave_1,Fast_mode};
    2c00:	fe 01       	movw	r30, r28
    2c02:	3c 96       	adiw	r30, 0x0c	; 12
    2c04:	fe 8f       	std	Y+30, r31	; 0x1e
    2c06:	ed 8f       	std	Y+29, r30	; 0x1d
    2c08:	28 e6       	ldi	r18, 0x68	; 104
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	38 a3       	std	Y+32, r19	; 0x20
    2c0e:	2f 8f       	std	Y+31, r18	; 0x1f
    2c10:	35 e0       	ldi	r19, 0x05	; 5
    2c12:	39 a3       	std	Y+33, r19	; 0x21
    2c14:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2c16:	f8 a1       	ldd	r31, Y+32	; 0x20
    2c18:	00 80       	ld	r0, Z
    2c1a:	2f 8d       	ldd	r18, Y+31	; 0x1f
    2c1c:	38 a1       	ldd	r19, Y+32	; 0x20
    2c1e:	2f 5f       	subi	r18, 0xFF	; 255
    2c20:	3f 4f       	sbci	r19, 0xFF	; 255
    2c22:	38 a3       	std	Y+32, r19	; 0x20
    2c24:	2f 8f       	std	Y+31, r18	; 0x1f
    2c26:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2c28:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2c2a:	00 82       	st	Z, r0
    2c2c:	2d 8d       	ldd	r18, Y+29	; 0x1d
    2c2e:	3e 8d       	ldd	r19, Y+30	; 0x1e
    2c30:	2f 5f       	subi	r18, 0xFF	; 255
    2c32:	3f 4f       	sbci	r19, 0xFF	; 255
    2c34:	3e 8f       	std	Y+30, r19	; 0x1e
    2c36:	2d 8f       	std	Y+29, r18	; 0x1d
    2c38:	39 a1       	ldd	r19, Y+33	; 0x21
    2c3a:	31 50       	subi	r19, 0x01	; 1
    2c3c:	39 a3       	std	Y+33, r19	; 0x21
    2c3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c40:	88 23       	and	r24, r24
    2c42:	41 f7       	brne	.-48     	; 0x2c14 <main+0xd8>
	TWI_init(&twiconfig);
    2c44:	ce 01       	movw	r24, r28
    2c46:	0c 96       	adiw	r24, 0x0c	; 12
    2c48:	0e 94 39 1a 	call	0x3472	; 0x3472 <TWI_init>

	/* Initialize the DC-MOTOR Driver */
	DcMotor_init();
    2c4c:	0e 94 a3 05 	call	0xb46	; 0xb46 <DcMotor_init>

	/* Initialize the BUZZER Driver */
	Buzzer_init();
    2c50:	0e 94 08 06 	call	0xc10	; 0xc10 <Buzzer_init>


	while(1){

		switch(UART_recieveByte()){ /* Receive byte from HMI_ECU */
    2c54:	0e 94 81 1b 	call	0x3702	; 0x3702 <UART_recieveByte>
    2c58:	e8 2f       	mov	r30, r24
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	fa 8b       	std	Y+18, r31	; 0x12
    2c5e:	e9 8b       	std	Y+17, r30	; 0x11
    2c60:	29 89       	ldd	r18, Y+17	; 0x11
    2c62:	3a 89       	ldd	r19, Y+18	; 0x12
    2c64:	22 30       	cpi	r18, 0x02	; 2
    2c66:	31 05       	cpc	r19, r1
    2c68:	69 f0       	breq	.+26     	; 0x2c84 <main+0x148>
    2c6a:	89 89       	ldd	r24, Y+17	; 0x11
    2c6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c6e:	84 30       	cpi	r24, 0x04	; 4
    2c70:	91 05       	cpc	r25, r1
    2c72:	59 f0       	breq	.+22     	; 0x2c8a <main+0x14e>
    2c74:	e9 89       	ldd	r30, Y+17	; 0x11
    2c76:	fa 89       	ldd	r31, Y+18	; 0x12
    2c78:	e1 30       	cpi	r30, 0x01	; 1
    2c7a:	f1 05       	cpc	r31, r1
    2c7c:	59 f7       	brne	.-42     	; 0x2c54 <main+0x118>

		case PASS_READY: /* Received byte from HMI_ECU == PASS_READY */
			Get_pass();
    2c7e:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <Get_pass>
    2c82:	e8 cf       	rjmp	.-48     	; 0x2c54 <main+0x118>
			break;
		case PASS_CHECK:	/* Received byte from HMI_ECU == PASS_CHECK */
			Check_pass();
    2c84:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <Check_pass>
    2c88:	e5 cf       	rjmp	.-54     	; 0x2c54 <main+0x118>
			break;
		case OPEN_DOOR:	/* Received byte from HMI_ECU == OPEM_DOOR */
			Open_Door();
    2c8a:	0e 94 6d 18 	call	0x30da	; 0x30da <Open_Door>
    2c8e:	e2 cf       	rjmp	.-60     	; 0x2c54 <main+0x118>

00002c90 <Timer>:

/*******************************************************************************
 *                             Functions Definitions                           *
 *******************************************************************************/

void Timer(void){
    2c90:	df 93       	push	r29
    2c92:	cf 93       	push	r28
    2c94:	cd b7       	in	r28, 0x3d	; 61
    2c96:	de b7       	in	r29, 0x3e	; 62
	g_count++;	/* Increment the counter each second */
    2c98:	80 91 86 00 	lds	r24, 0x0086
    2c9c:	8f 5f       	subi	r24, 0xFF	; 255
    2c9e:	80 93 86 00 	sts	0x0086, r24

}
    2ca2:	cf 91       	pop	r28
    2ca4:	df 91       	pop	r29
    2ca6:	08 95       	ret

00002ca8 <Get_pass>:


void Get_pass(void){
    2ca8:	0f 93       	push	r16
    2caa:	1f 93       	push	r17
    2cac:	df 93       	push	r29
    2cae:	cf 93       	push	r28
    2cb0:	00 d0       	rcall	.+0      	; 0x2cb2 <Get_pass+0xa>
    2cb2:	00 d0       	rcall	.+0      	; 0x2cb4 <Get_pass+0xc>
    2cb4:	00 d0       	rcall	.+0      	; 0x2cb6 <Get_pass+0xe>
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62

	uint8 pass[MAX_DIGITS]={0};	/* Create array of 5 Digits to store received keys*/
    2cba:	85 e0       	ldi	r24, 0x05	; 5
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	32 96       	adiw	r30, 0x02	; 2
    2cc0:	df 01       	movw	r26, r30
    2cc2:	98 2f       	mov	r25, r24
    2cc4:	1d 92       	st	X+, r1
    2cc6:	9a 95       	dec	r25
    2cc8:	e9 f7       	brne	.-6      	; 0x2cc4 <Get_pass+0x1c>
	uint8 i=0;	/* Counter for each pressed key */
    2cca:	19 82       	std	Y+1, r1	; 0x01
	g_pass=0;	/* Reset g_pass each function call */
    2ccc:	10 92 7a 00 	sts	0x007A, r1
    2cd0:	10 92 7b 00 	sts	0x007B, r1
    2cd4:	10 92 7c 00 	sts	0x007C, r1
    2cd8:	10 92 7d 00 	sts	0x007D, r1
    2cdc:	3a c0       	rjmp	.+116    	; 0x2d52 <Get_pass+0xaa>

	while(i<MAX_DIGITS){
		pass[i] = UART_recieveByte();
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	08 2f       	mov	r16, r24
    2ce2:	10 e0       	ldi	r17, 0x00	; 0
    2ce4:	0e 94 81 1b 	call	0x3702	; 0x3702 <UART_recieveByte>
    2ce8:	28 2f       	mov	r18, r24
    2cea:	ce 01       	movw	r24, r28
    2cec:	02 96       	adiw	r24, 0x02	; 2
    2cee:	fc 01       	movw	r30, r24
    2cf0:	e0 0f       	add	r30, r16
    2cf2:	f1 1f       	adc	r31, r17
    2cf4:	20 83       	st	Z, r18
		g_pass = g_pass*10 + pass[i];	/* Store keys in combined form to create the password*/
    2cf6:	80 91 7a 00 	lds	r24, 0x007A
    2cfa:	90 91 7b 00 	lds	r25, 0x007B
    2cfe:	a0 91 7c 00 	lds	r26, 0x007C
    2d02:	b0 91 7d 00 	lds	r27, 0x007D
    2d06:	2a e0       	ldi	r18, 0x0A	; 10
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	40 e0       	ldi	r20, 0x00	; 0
    2d0c:	50 e0       	ldi	r21, 0x00	; 0
    2d0e:	bc 01       	movw	r22, r24
    2d10:	cd 01       	movw	r24, r26
    2d12:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__mulsi3>
    2d16:	ab 01       	movw	r20, r22
    2d18:	bc 01       	movw	r22, r24
    2d1a:	89 81       	ldd	r24, Y+1	; 0x01
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	ce 01       	movw	r24, r28
    2d22:	02 96       	adiw	r24, 0x02	; 2
    2d24:	fc 01       	movw	r30, r24
    2d26:	e2 0f       	add	r30, r18
    2d28:	f3 1f       	adc	r31, r19
    2d2a:	80 81       	ld	r24, Z
    2d2c:	88 2f       	mov	r24, r24
    2d2e:	90 e0       	ldi	r25, 0x00	; 0
    2d30:	a0 e0       	ldi	r26, 0x00	; 0
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	84 0f       	add	r24, r20
    2d36:	95 1f       	adc	r25, r21
    2d38:	a6 1f       	adc	r26, r22
    2d3a:	b7 1f       	adc	r27, r23
    2d3c:	80 93 7a 00 	sts	0x007A, r24
    2d40:	90 93 7b 00 	sts	0x007B, r25
    2d44:	a0 93 7c 00 	sts	0x007C, r26
    2d48:	b0 93 7d 00 	sts	0x007D, r27
		i++;
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	8f 5f       	subi	r24, 0xFF	; 255
    2d50:	89 83       	std	Y+1, r24	; 0x01

	uint8 pass[MAX_DIGITS]={0};	/* Create array of 5 Digits to store received keys*/
	uint8 i=0;	/* Counter for each pressed key */
	g_pass=0;	/* Reset g_pass each function call */

	while(i<MAX_DIGITS){
    2d52:	89 81       	ldd	r24, Y+1	; 0x01
    2d54:	85 30       	cpi	r24, 0x05	; 5
    2d56:	18 f2       	brcs	.-122    	; 0x2cde <Get_pass+0x36>
		pass[i] = UART_recieveByte();
		g_pass = g_pass*10 + pass[i];	/* Store keys in combined form to create the password*/
		i++;
	}
	while(UART_recieveByte()!='#');	/* Wait for the Enter key from HMI_ECU */
    2d58:	0e 94 81 1b 	call	0x3702	; 0x3702 <UART_recieveByte>
    2d5c:	83 32       	cpi	r24, 0x23	; 35
    2d5e:	e1 f7       	brne	.-8      	; 0x2d58 <Get_pass+0xb0>


}
    2d60:	26 96       	adiw	r28, 0x06	; 6
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	1f 91       	pop	r17
    2d72:	0f 91       	pop	r16
    2d74:	08 95       	ret

00002d76 <Check_pass>:

void Check_pass(void){
    2d76:	0f 93       	push	r16
    2d78:	1f 93       	push	r17
    2d7a:	df 93       	push	r29
    2d7c:	cf 93       	push	r28
    2d7e:	cd b7       	in	r28, 0x3d	; 61
    2d80:	de b7       	in	r29, 0x3e	; 62
    2d82:	a2 97       	sbiw	r28, 0x22	; 34
    2d84:	0f b6       	in	r0, 0x3f	; 63
    2d86:	f8 94       	cli
    2d88:	de bf       	out	0x3e, r29	; 62
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	cd bf       	out	0x3d, r28	; 61

	uint8 pass[MAX_DIGITS]={0}; /* Create array of 5 Digits to store received keys*/
    2d8e:	85 e0       	ldi	r24, 0x05	; 5
    2d90:	fe 01       	movw	r30, r28
    2d92:	7e 96       	adiw	r30, 0x1e	; 30
    2d94:	df 01       	movw	r26, r30
    2d96:	98 2f       	mov	r25, r24
    2d98:	1d 92       	st	X+, r1
    2d9a:	9a 95       	dec	r25
    2d9c:	e9 f7       	brne	.-6      	; 0x2d98 <Check_pass+0x22>
	uint8 i=0;	/* Counter for each pressed key */
    2d9e:	1d 8e       	std	Y+29, r1	; 0x1d
	g_checkpass=0;	/* Reset g_checkpass each function call */
    2da0:	10 92 7e 00 	sts	0x007E, r1
    2da4:	10 92 7f 00 	sts	0x007F, r1
    2da8:	10 92 80 00 	sts	0x0080, r1
    2dac:	10 92 81 00 	sts	0x0081, r1
    2db0:	3a c0       	rjmp	.+116    	; 0x2e26 <Check_pass+0xb0>
	static uint8 sec_count;	/* Security counter */

	while(i<MAX_DIGITS){
		pass[i] = UART_recieveByte();
    2db2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2db4:	08 2f       	mov	r16, r24
    2db6:	10 e0       	ldi	r17, 0x00	; 0
    2db8:	0e 94 81 1b 	call	0x3702	; 0x3702 <UART_recieveByte>
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	ce 01       	movw	r24, r28
    2dc0:	4e 96       	adiw	r24, 0x1e	; 30
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	e0 0f       	add	r30, r16
    2dc6:	f1 1f       	adc	r31, r17
    2dc8:	20 83       	st	Z, r18
		g_checkpass = g_checkpass*10 + pass[i];	/* Store keys in combined form to create the password*/
    2dca:	80 91 7e 00 	lds	r24, 0x007E
    2dce:	90 91 7f 00 	lds	r25, 0x007F
    2dd2:	a0 91 80 00 	lds	r26, 0x0080
    2dd6:	b0 91 81 00 	lds	r27, 0x0081
    2dda:	2a e0       	ldi	r18, 0x0A	; 10
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e0       	ldi	r20, 0x00	; 0
    2de0:	50 e0       	ldi	r21, 0x00	; 0
    2de2:	bc 01       	movw	r22, r24
    2de4:	cd 01       	movw	r24, r26
    2de6:	0e 94 fc 1b 	call	0x37f8	; 0x37f8 <__mulsi3>
    2dea:	ab 01       	movw	r20, r22
    2dec:	bc 01       	movw	r22, r24
    2dee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2df0:	28 2f       	mov	r18, r24
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	ce 01       	movw	r24, r28
    2df6:	4e 96       	adiw	r24, 0x1e	; 30
    2df8:	fc 01       	movw	r30, r24
    2dfa:	e2 0f       	add	r30, r18
    2dfc:	f3 1f       	adc	r31, r19
    2dfe:	80 81       	ld	r24, Z
    2e00:	88 2f       	mov	r24, r24
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	a0 e0       	ldi	r26, 0x00	; 0
    2e06:	b0 e0       	ldi	r27, 0x00	; 0
    2e08:	84 0f       	add	r24, r20
    2e0a:	95 1f       	adc	r25, r21
    2e0c:	a6 1f       	adc	r26, r22
    2e0e:	b7 1f       	adc	r27, r23
    2e10:	80 93 7e 00 	sts	0x007E, r24
    2e14:	90 93 7f 00 	sts	0x007F, r25
    2e18:	a0 93 80 00 	sts	0x0080, r26
    2e1c:	b0 93 81 00 	sts	0x0081, r27
		i++;
    2e20:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e22:	8f 5f       	subi	r24, 0xFF	; 255
    2e24:	8d 8f       	std	Y+29, r24	; 0x1d
	uint8 pass[MAX_DIGITS]={0}; /* Create array of 5 Digits to store received keys*/
	uint8 i=0;	/* Counter for each pressed key */
	g_checkpass=0;	/* Reset g_checkpass each function call */
	static uint8 sec_count;	/* Security counter */

	while(i<MAX_DIGITS){
    2e26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e28:	85 30       	cpi	r24, 0x05	; 5
    2e2a:	18 f2       	brcs	.-122    	; 0x2db2 <Check_pass+0x3c>
		pass[i] = UART_recieveByte();
		g_checkpass = g_checkpass*10 + pass[i];	/* Store keys in combined form to create the password*/
		i++;
	}
	while(UART_recieveByte()!='#');	/* Wait for the Enter key from HMI_ECU */
    2e2c:	0e 94 81 1b 	call	0x3702	; 0x3702 <UART_recieveByte>
    2e30:	83 32       	cpi	r24, 0x23	; 35
    2e32:	e1 f7       	brne	.-8      	; 0x2e2c <Check_pass+0xb6>

	if(g_checkpass == g_eeprompass ){ /* Check if the two passwords are matching */
    2e34:	20 91 7e 00 	lds	r18, 0x007E
    2e38:	30 91 7f 00 	lds	r19, 0x007F
    2e3c:	40 91 80 00 	lds	r20, 0x0080
    2e40:	50 91 81 00 	lds	r21, 0x0081
    2e44:	80 91 82 00 	lds	r24, 0x0082
    2e48:	90 91 83 00 	lds	r25, 0x0083
    2e4c:	a0 91 84 00 	lds	r26, 0x0084
    2e50:	b0 91 85 00 	lds	r27, 0x0085
    2e54:	28 17       	cp	r18, r24
    2e56:	39 07       	cpc	r19, r25
    2e58:	4a 07       	cpc	r20, r26
    2e5a:	5b 07       	cpc	r21, r27
    2e5c:	31 f4       	brne	.+12     	; 0x2e6a <Check_pass+0xf4>
		sec_count=0; /* Reset the security counter */
    2e5e:	10 92 78 00 	sts	0x0078, r1
		UART_sendByte(PASS_MATCH); /* Send the byte to Change_pass function in HMI_ECU */
    2e62:	83 e0       	ldi	r24, 0x03	; 3
    2e64:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <UART_sendByte>
    2e68:	2d c1       	rjmp	.+602    	; 0x30c4 <Check_pass+0x34e>
	}
	else if(g_pass == g_checkpass){ /* Check if the two passwords are matching */
    2e6a:	20 91 7a 00 	lds	r18, 0x007A
    2e6e:	30 91 7b 00 	lds	r19, 0x007B
    2e72:	40 91 7c 00 	lds	r20, 0x007C
    2e76:	50 91 7d 00 	lds	r21, 0x007D
    2e7a:	80 91 7e 00 	lds	r24, 0x007E
    2e7e:	90 91 7f 00 	lds	r25, 0x007F
    2e82:	a0 91 80 00 	lds	r26, 0x0080
    2e86:	b0 91 81 00 	lds	r27, 0x0081
    2e8a:	28 17       	cp	r18, r24
    2e8c:	39 07       	cpc	r19, r25
    2e8e:	4a 07       	cpc	r20, r26
    2e90:	5b 07       	cpc	r21, r27
    2e92:	09 f0       	breq	.+2      	; 0x2e96 <Check_pass+0x120>
    2e94:	fc c0       	rjmp	.+504    	; 0x308e <Check_pass+0x318>
		sec_count=0; /* Reset the security counter */
    2e96:	10 92 78 00 	sts	0x0078, r1
		EEPROM_writeByte(0x01,&g_pass,4); /* Write the password in eeporm memomry */
    2e9a:	2a e7       	ldi	r18, 0x7A	; 122
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	90 e0       	ldi	r25, 0x00	; 0
    2ea2:	b9 01       	movw	r22, r18
    2ea4:	44 e0       	ldi	r20, 0x04	; 4
    2ea6:	50 e0       	ldi	r21, 0x00	; 0
    2ea8:	0e 94 31 06 	call	0xc62	; 0xc62 <EEPROM_writeByte>
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	a0 e2       	ldi	r26, 0x20	; 32
    2eb2:	b1 e4       	ldi	r27, 0x41	; 65
    2eb4:	89 8f       	std	Y+25, r24	; 0x19
    2eb6:	9a 8f       	std	Y+26, r25	; 0x1a
    2eb8:	ab 8f       	std	Y+27, r26	; 0x1b
    2eba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ebc:	69 8d       	ldd	r22, Y+25	; 0x19
    2ebe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ec0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ec2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	30 e0       	ldi	r19, 0x00	; 0
    2ec8:	4a ef       	ldi	r20, 0xFA	; 250
    2eca:	54 e4       	ldi	r21, 0x44	; 68
    2ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	8d 8b       	std	Y+21, r24	; 0x15
    2ed6:	9e 8b       	std	Y+22, r25	; 0x16
    2ed8:	af 8b       	std	Y+23, r26	; 0x17
    2eda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2edc:	6d 89       	ldd	r22, Y+21	; 0x15
    2ede:	7e 89       	ldd	r23, Y+22	; 0x16
    2ee0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ee2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ee4:	20 e0       	ldi	r18, 0x00	; 0
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e8       	ldi	r20, 0x80	; 128
    2eea:	5f e3       	ldi	r21, 0x3F	; 63
    2eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ef0:	88 23       	and	r24, r24
    2ef2:	2c f4       	brge	.+10     	; 0x2efe <Check_pass+0x188>
		__ticks = 1;
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	9c 8b       	std	Y+20, r25	; 0x14
    2efa:	8b 8b       	std	Y+19, r24	; 0x13
    2efc:	3f c0       	rjmp	.+126    	; 0x2f7c <Check_pass+0x206>
	else if (__tmp > 65535)
    2efe:	6d 89       	ldd	r22, Y+21	; 0x15
    2f00:	7e 89       	ldd	r23, Y+22	; 0x16
    2f02:	8f 89       	ldd	r24, Y+23	; 0x17
    2f04:	98 8d       	ldd	r25, Y+24	; 0x18
    2f06:	20 e0       	ldi	r18, 0x00	; 0
    2f08:	3f ef       	ldi	r19, 0xFF	; 255
    2f0a:	4f e7       	ldi	r20, 0x7F	; 127
    2f0c:	57 e4       	ldi	r21, 0x47	; 71
    2f0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f12:	18 16       	cp	r1, r24
    2f14:	4c f5       	brge	.+82     	; 0x2f68 <Check_pass+0x1f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f16:	69 8d       	ldd	r22, Y+25	; 0x19
    2f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	40 e2       	ldi	r20, 0x20	; 32
    2f24:	51 e4       	ldi	r21, 0x41	; 65
    2f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2a:	dc 01       	movw	r26, r24
    2f2c:	cb 01       	movw	r24, r22
    2f2e:	bc 01       	movw	r22, r24
    2f30:	cd 01       	movw	r24, r26
    2f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f36:	dc 01       	movw	r26, r24
    2f38:	cb 01       	movw	r24, r22
    2f3a:	9c 8b       	std	Y+20, r25	; 0x14
    2f3c:	8b 8b       	std	Y+19, r24	; 0x13
    2f3e:	0f c0       	rjmp	.+30     	; 0x2f5e <Check_pass+0x1e8>
    2f40:	88 ec       	ldi	r24, 0xC8	; 200
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	9a 8b       	std	Y+18, r25	; 0x12
    2f46:	89 8b       	std	Y+17, r24	; 0x11
    2f48:	89 89       	ldd	r24, Y+17	; 0x11
    2f4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2f4c:	01 97       	sbiw	r24, 0x01	; 1
    2f4e:	f1 f7       	brne	.-4      	; 0x2f4c <Check_pass+0x1d6>
    2f50:	9a 8b       	std	Y+18, r25	; 0x12
    2f52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f54:	8b 89       	ldd	r24, Y+19	; 0x13
    2f56:	9c 89       	ldd	r25, Y+20	; 0x14
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	9c 8b       	std	Y+20, r25	; 0x14
    2f5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    2f60:	9c 89       	ldd	r25, Y+20	; 0x14
    2f62:	00 97       	sbiw	r24, 0x00	; 0
    2f64:	69 f7       	brne	.-38     	; 0x2f40 <Check_pass+0x1ca>
    2f66:	14 c0       	rjmp	.+40     	; 0x2f90 <Check_pass+0x21a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f68:	6d 89       	ldd	r22, Y+21	; 0x15
    2f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    2f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    2f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    2f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	9c 8b       	std	Y+20, r25	; 0x14
    2f7a:	8b 8b       	std	Y+19, r24	; 0x13
    2f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2f80:	98 8b       	std	Y+16, r25	; 0x10
    2f82:	8f 87       	std	Y+15, r24	; 0x0f
    2f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f86:	98 89       	ldd	r25, Y+16	; 0x10
    2f88:	01 97       	sbiw	r24, 0x01	; 1
    2f8a:	f1 f7       	brne	.-4      	; 0x2f88 <Check_pass+0x212>
    2f8c:	98 8b       	std	Y+16, r25	; 0x10
    2f8e:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		EEPROM_readByte(0x01,&g_eeprompass,4);	/* Read the stored password from eeprom memory */
    2f90:	22 e8       	ldi	r18, 0x82	; 130
    2f92:	30 e0       	ldi	r19, 0x00	; 0
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	b9 01       	movw	r22, r18
    2f9a:	44 e0       	ldi	r20, 0x04	; 4
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	0e 94 04 07 	call	0xe08	; 0xe08 <EEPROM_readByte>
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	a0 e2       	ldi	r26, 0x20	; 32
    2fa8:	b1 e4       	ldi	r27, 0x41	; 65
    2faa:	8b 87       	std	Y+11, r24	; 0x0b
    2fac:	9c 87       	std	Y+12, r25	; 0x0c
    2fae:	ad 87       	std	Y+13, r26	; 0x0d
    2fb0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	4a ef       	ldi	r20, 0xFA	; 250
    2fc0:	54 e4       	ldi	r21, 0x44	; 68
    2fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc6:	dc 01       	movw	r26, r24
    2fc8:	cb 01       	movw	r24, r22
    2fca:	8f 83       	std	Y+7, r24	; 0x07
    2fcc:	98 87       	std	Y+8, r25	; 0x08
    2fce:	a9 87       	std	Y+9, r26	; 0x09
    2fd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2fd4:	78 85       	ldd	r23, Y+8	; 0x08
    2fd6:	89 85       	ldd	r24, Y+9	; 0x09
    2fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fda:	20 e0       	ldi	r18, 0x00	; 0
    2fdc:	30 e0       	ldi	r19, 0x00	; 0
    2fde:	40 e8       	ldi	r20, 0x80	; 128
    2fe0:	5f e3       	ldi	r21, 0x3F	; 63
    2fe2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fe6:	88 23       	and	r24, r24
    2fe8:	2c f4       	brge	.+10     	; 0x2ff4 <Check_pass+0x27e>
		__ticks = 1;
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	9e 83       	std	Y+6, r25	; 0x06
    2ff0:	8d 83       	std	Y+5, r24	; 0x05
    2ff2:	3f c0       	rjmp	.+126    	; 0x3072 <Check_pass+0x2fc>
	else if (__tmp > 65535)
    2ff4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ff6:	78 85       	ldd	r23, Y+8	; 0x08
    2ff8:	89 85       	ldd	r24, Y+9	; 0x09
    2ffa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	3f ef       	ldi	r19, 0xFF	; 255
    3000:	4f e7       	ldi	r20, 0x7F	; 127
    3002:	57 e4       	ldi	r21, 0x47	; 71
    3004:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3008:	18 16       	cp	r1, r24
    300a:	4c f5       	brge	.+82     	; 0x305e <Check_pass+0x2e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    300c:	6b 85       	ldd	r22, Y+11	; 0x0b
    300e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3010:	8d 85       	ldd	r24, Y+13	; 0x0d
    3012:	9e 85       	ldd	r25, Y+14	; 0x0e
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	40 e2       	ldi	r20, 0x20	; 32
    301a:	51 e4       	ldi	r21, 0x41	; 65
    301c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	bc 01       	movw	r22, r24
    3026:	cd 01       	movw	r24, r26
    3028:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    302c:	dc 01       	movw	r26, r24
    302e:	cb 01       	movw	r24, r22
    3030:	9e 83       	std	Y+6, r25	; 0x06
    3032:	8d 83       	std	Y+5, r24	; 0x05
    3034:	0f c0       	rjmp	.+30     	; 0x3054 <Check_pass+0x2de>
    3036:	88 ec       	ldi	r24, 0xC8	; 200
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	9c 83       	std	Y+4, r25	; 0x04
    303c:	8b 83       	std	Y+3, r24	; 0x03
    303e:	8b 81       	ldd	r24, Y+3	; 0x03
    3040:	9c 81       	ldd	r25, Y+4	; 0x04
    3042:	01 97       	sbiw	r24, 0x01	; 1
    3044:	f1 f7       	brne	.-4      	; 0x3042 <Check_pass+0x2cc>
    3046:	9c 83       	std	Y+4, r25	; 0x04
    3048:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    304a:	8d 81       	ldd	r24, Y+5	; 0x05
    304c:	9e 81       	ldd	r25, Y+6	; 0x06
    304e:	01 97       	sbiw	r24, 0x01	; 1
    3050:	9e 83       	std	Y+6, r25	; 0x06
    3052:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3054:	8d 81       	ldd	r24, Y+5	; 0x05
    3056:	9e 81       	ldd	r25, Y+6	; 0x06
    3058:	00 97       	sbiw	r24, 0x00	; 0
    305a:	69 f7       	brne	.-38     	; 0x3036 <Check_pass+0x2c0>
    305c:	14 c0       	rjmp	.+40     	; 0x3086 <Check_pass+0x310>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305e:	6f 81       	ldd	r22, Y+7	; 0x07
    3060:	78 85       	ldd	r23, Y+8	; 0x08
    3062:	89 85       	ldd	r24, Y+9	; 0x09
    3064:	9a 85       	ldd	r25, Y+10	; 0x0a
    3066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306a:	dc 01       	movw	r26, r24
    306c:	cb 01       	movw	r24, r22
    306e:	9e 83       	std	Y+6, r25	; 0x06
    3070:	8d 83       	std	Y+5, r24	; 0x05
    3072:	8d 81       	ldd	r24, Y+5	; 0x05
    3074:	9e 81       	ldd	r25, Y+6	; 0x06
    3076:	9a 83       	std	Y+2, r25	; 0x02
    3078:	89 83       	std	Y+1, r24	; 0x01
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	9a 81       	ldd	r25, Y+2	; 0x02
    307e:	01 97       	sbiw	r24, 0x01	; 1
    3080:	f1 f7       	brne	.-4      	; 0x307e <Check_pass+0x308>
    3082:	9a 83       	std	Y+2, r25	; 0x02
    3084:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		UART_sendByte(PASS_MATCH);/* Send the byte to Check_pass function in HMI_ECU */
    3086:	83 e0       	ldi	r24, 0x03	; 3
    3088:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <UART_sendByte>
    308c:	1b c0       	rjmp	.+54     	; 0x30c4 <Check_pass+0x34e>

	}

	else{
		sec_count++;	/* Increment the security counter if no matching passwords */
    308e:	80 91 78 00 	lds	r24, 0x0078
    3092:	8f 5f       	subi	r24, 0xFF	; 255
    3094:	80 93 78 00 	sts	0x0078, r24
		if(sec_count == 3){	/* User exceeded number of tries */
    3098:	80 91 78 00 	lds	r24, 0x0078
    309c:	83 30       	cpi	r24, 0x03	; 3
    309e:	79 f4       	brne	.+30     	; 0x30be <Check_pass+0x348>
			sec_count=0;	/* Reset the security counter */
    30a0:	10 92 78 00 	sts	0x0078, r1
			g_count=0;	/* Reset the timer, To count Activation time of the buzzer*/
    30a4:	10 92 86 00 	sts	0x0086, r1
			UART_sendByte(SYSTEM_LOCKED); 	/* Send the byte to Check_pass function in HMI_ECU */
    30a8:	8e e0       	ldi	r24, 0x0E	; 14
    30aa:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <UART_sendByte>
			Buzzer_on(); /*	Activate the buzzer */
    30ae:	0e 94 19 06 	call	0xc32	; 0xc32 <Buzzer_on>
			while(g_count<=60);	/* Activation time: 60 seconds */
    30b2:	80 91 86 00 	lds	r24, 0x0086
    30b6:	8d 33       	cpi	r24, 0x3D	; 61
    30b8:	e0 f3       	brcs	.-8      	; 0x30b2 <Check_pass+0x33c>
			Buzzer_off();	/*Deactivate the buzzer */
    30ba:	0e 94 25 06 	call	0xc4a	; 0xc4a <Buzzer_off>
		}
		UART_sendByte(NO_MATCH);	/* Send the byte to Check_pass function in HMI_ECU */
    30be:	8c e0       	ldi	r24, 0x0C	; 12
    30c0:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <UART_sendByte>
	}

}
    30c4:	a2 96       	adiw	r28, 0x22	; 34
    30c6:	0f b6       	in	r0, 0x3f	; 63
    30c8:	f8 94       	cli
    30ca:	de bf       	out	0x3e, r29	; 62
    30cc:	0f be       	out	0x3f, r0	; 63
    30ce:	cd bf       	out	0x3d, r28	; 61
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	08 95       	ret

000030da <Open_Door>:

void Open_Door(void){
    30da:	0f 93       	push	r16
    30dc:	1f 93       	push	r17
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	28 97       	sbiw	r28, 0x08	; 8
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61

	uint8 pass[MAX_DIGITS]={0};	/* Create array of 5 Digits to store received keys*/
    30f2:	85 e0       	ldi	r24, 0x05	; 5
    30f4:	fe 01       	movw	r30, r28
    30f6:	34 96       	adiw	r30, 0x04	; 4
    30f8:	df 01       	movw	r26, r30
    30fa:	98 2f       	mov	r25, r24
    30fc:	1d 92       	st	X+, r1
    30fe:	9a 95       	dec	r25
    3100:	e9 f7       	brne	.-6      	; 0x30fc <Open_Door+0x22>
	uint8 i=0;	/* Counter for each pressed key */
    3102:	1b 82       	std	Y+3, r1	; 0x03
	uint16 pass_check=0;	/* Reset pass_check each function call */
    3104:	1a 82       	std	Y+2, r1	; 0x02
    3106:	19 82       	std	Y+1, r1	; 0x01
    3108:	2b c0       	rjmp	.+86     	; 0x3160 <Open_Door+0x86>
	static uint8 sec_count;	/* Security counter */

	while(i<MAX_DIGITS){
		pass[i] = UART_recieveByte();
    310a:	8b 81       	ldd	r24, Y+3	; 0x03
    310c:	08 2f       	mov	r16, r24
    310e:	10 e0       	ldi	r17, 0x00	; 0
    3110:	0e 94 81 1b 	call	0x3702	; 0x3702 <UART_recieveByte>
    3114:	28 2f       	mov	r18, r24
    3116:	ce 01       	movw	r24, r28
    3118:	04 96       	adiw	r24, 0x04	; 4
    311a:	fc 01       	movw	r30, r24
    311c:	e0 0f       	add	r30, r16
    311e:	f1 1f       	adc	r31, r17
    3120:	20 83       	st	Z, r18
		pass_check = pass_check*10 + pass[i];	/* Store keys in combined form to create the password*/
    3122:	89 81       	ldd	r24, Y+1	; 0x01
    3124:	9a 81       	ldd	r25, Y+2	; 0x02
    3126:	9c 01       	movw	r18, r24
    3128:	22 0f       	add	r18, r18
    312a:	33 1f       	adc	r19, r19
    312c:	c9 01       	movw	r24, r18
    312e:	88 0f       	add	r24, r24
    3130:	99 1f       	adc	r25, r25
    3132:	88 0f       	add	r24, r24
    3134:	99 1f       	adc	r25, r25
    3136:	a9 01       	movw	r20, r18
    3138:	48 0f       	add	r20, r24
    313a:	59 1f       	adc	r21, r25
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	28 2f       	mov	r18, r24
    3140:	30 e0       	ldi	r19, 0x00	; 0
    3142:	ce 01       	movw	r24, r28
    3144:	04 96       	adiw	r24, 0x04	; 4
    3146:	fc 01       	movw	r30, r24
    3148:	e2 0f       	add	r30, r18
    314a:	f3 1f       	adc	r31, r19
    314c:	80 81       	ld	r24, Z
    314e:	88 2f       	mov	r24, r24
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	84 0f       	add	r24, r20
    3154:	95 1f       	adc	r25, r21
    3156:	9a 83       	std	Y+2, r25	; 0x02
    3158:	89 83       	std	Y+1, r24	; 0x01
		i++;
    315a:	8b 81       	ldd	r24, Y+3	; 0x03
    315c:	8f 5f       	subi	r24, 0xFF	; 255
    315e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 pass[MAX_DIGITS]={0};	/* Create array of 5 Digits to store received keys*/
	uint8 i=0;	/* Counter for each pressed key */
	uint16 pass_check=0;	/* Reset pass_check each function call */
	static uint8 sec_count;	/* Security counter */

	while(i<MAX_DIGITS){
    3160:	8b 81       	ldd	r24, Y+3	; 0x03
    3162:	85 30       	cpi	r24, 0x05	; 5
    3164:	90 f2       	brcs	.-92     	; 0x310a <Open_Door+0x30>
		pass[i] = UART_recieveByte();
		pass_check = pass_check*10 + pass[i];	/* Store keys in combined form to create the password*/
		i++;
	}
	while(UART_recieveByte()!='#');	/* Wait for the Enter key from HMI_ECU */
    3166:	0e 94 81 1b 	call	0x3702	; 0x3702 <UART_recieveByte>
    316a:	83 32       	cpi	r24, 0x23	; 35
    316c:	e1 f7       	brne	.-8      	; 0x3166 <Open_Door+0x8c>

	if(pass_check == g_eeprompass){	/* Check if the two passwords are matching */
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	9a 81       	ldd	r25, Y+2	; 0x02
    3172:	9c 01       	movw	r18, r24
    3174:	40 e0       	ldi	r20, 0x00	; 0
    3176:	50 e0       	ldi	r21, 0x00	; 0
    3178:	80 91 82 00 	lds	r24, 0x0082
    317c:	90 91 83 00 	lds	r25, 0x0083
    3180:	a0 91 84 00 	lds	r26, 0x0084
    3184:	b0 91 85 00 	lds	r27, 0x0085
    3188:	28 17       	cp	r18, r24
    318a:	39 07       	cpc	r19, r25
    318c:	4a 07       	cpc	r20, r26
    318e:	5b 07       	cpc	r21, r27
    3190:	21 f5       	brne	.+72     	; 0x31da <Open_Door+0x100>

		g_count=0;	/* Reset the timer, To count Operation of DC-MOTOR */
    3192:	10 92 86 00 	sts	0x0086, r1
		sec_count=0;	/* Reset the security counter */
    3196:	10 92 79 00 	sts	0x0079, r1
		UART_sendByte(PASS_MATCH);
    319a:	83 e0       	ldi	r24, 0x03	; 3
    319c:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <UART_sendByte>

		DcMotor_Rotate(CW,100);	/* Rotate the DC-MOTOR ClockWise with Max speed */
    31a0:	80 e0       	ldi	r24, 0x00	; 0
    31a2:	64 e6       	ldi	r22, 0x64	; 100
    31a4:	0e 94 c3 05 	call	0xb86	; 0xb86 <DcMotor_Rotate>
		while(g_count <= UNLOCKING_TIME); /* Rotation time: 15sec */
    31a8:	80 91 86 00 	lds	r24, 0x0086
    31ac:	80 31       	cpi	r24, 0x10	; 16
    31ae:	e0 f3       	brcs	.-8      	; 0x31a8 <Open_Door+0xce>
		DcMotor_Rotate(STOP,0);	/* Stop the DC-MOTOR */
    31b0:	82 e0       	ldi	r24, 0x02	; 2
    31b2:	60 e0       	ldi	r22, 0x00	; 0
    31b4:	0e 94 c3 05 	call	0xb86	; 0xb86 <DcMotor_Rotate>
		while(g_count <= STOP_TIME);	/*Stop time: 3sec */
    31b8:	80 91 86 00 	lds	r24, 0x0086
    31bc:	83 31       	cpi	r24, 0x13	; 19
    31be:	e0 f3       	brcs	.-8      	; 0x31b8 <Open_Door+0xde>
		DcMotor_Rotate(A_CW,100);	/* Rotate the DC-MOTOR Anti-ClockWise with Max speed */
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	64 e6       	ldi	r22, 0x64	; 100
    31c4:	0e 94 c3 05 	call	0xb86	; 0xb86 <DcMotor_Rotate>
		while(g_count <= LOCKING_TIME);	/* Rotation time: 15sec */
    31c8:	80 91 86 00 	lds	r24, 0x0086
    31cc:	82 32       	cpi	r24, 0x22	; 34
    31ce:	e0 f3       	brcs	.-8      	; 0x31c8 <Open_Door+0xee>
		DcMotor_Rotate(STOP,0);	/* Stop the DC-MOTOR */
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	0e 94 c3 05 	call	0xb86	; 0xb86 <DcMotor_Rotate>
    31d8:	1b c0       	rjmp	.+54     	; 0x3210 <Open_Door+0x136>
		return ;	/* Exist the function */
	}
	else{
		sec_count++;	/* Increment the security counter if no matching passwords */
    31da:	80 91 79 00 	lds	r24, 0x0079
    31de:	8f 5f       	subi	r24, 0xFF	; 255
    31e0:	80 93 79 00 	sts	0x0079, r24
		if(sec_count == 3){	/* User exceeded number of tries */
    31e4:	80 91 79 00 	lds	r24, 0x0079
    31e8:	83 30       	cpi	r24, 0x03	; 3
    31ea:	79 f4       	brne	.+30     	; 0x320a <Open_Door+0x130>
			sec_count=0;	/* Reset the security counter */
    31ec:	10 92 79 00 	sts	0x0079, r1
			g_count=0;	/* Reset the timer, To count Activation time of the buzzer*/
    31f0:	10 92 86 00 	sts	0x0086, r1
			UART_sendByte(SYSTEM_LOCKED);	/* Send the byte to Check_pass function in HMI_ECU */
    31f4:	8e e0       	ldi	r24, 0x0E	; 14
    31f6:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <UART_sendByte>
			Buzzer_on();	/*	Activate the buzzer */
    31fa:	0e 94 19 06 	call	0xc32	; 0xc32 <Buzzer_on>
			while(g_count<=60);	/* Activation time: 60 seconds */
    31fe:	80 91 86 00 	lds	r24, 0x0086
    3202:	8d 33       	cpi	r24, 0x3D	; 61
    3204:	e0 f3       	brcs	.-8      	; 0x31fe <Open_Door+0x124>
			Buzzer_off();	/*Deactivate the buzzer */
    3206:	0e 94 25 06 	call	0xc4a	; 0xc4a <Buzzer_off>
		}
		UART_sendByte(NO_MATCH);	/* Send the byte to Check_pass function in HMI_ECU */
    320a:	8c e0       	ldi	r24, 0x0C	; 12
    320c:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <UART_sendByte>
	}

}
    3210:	28 96       	adiw	r28, 0x08	; 8
    3212:	0f b6       	in	r0, 0x3f	; 63
    3214:	f8 94       	cli
    3216:	de bf       	out	0x3e, r29	; 62
    3218:	0f be       	out	0x3f, r0	; 63
    321a:	cd bf       	out	0x3d, r28	; 61
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	1f 91       	pop	r17
    3222:	0f 91       	pop	r16
    3224:	08 95       	ret

00003226 <PWM_Timer0_Start>:
#include "common_macros.h"
#include <avr/io.h>



void PWM_Timer0_Start (uint8 duty_cycle){
    3226:	df 93       	push	r29
    3228:	cf 93       	push	r28
    322a:	00 d0       	rcall	.+0      	; 0x322c <PWM_Timer0_Start+0x6>
    322c:	0f 92       	push	r0
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	89 83       	std	Y+1, r24	; 0x01
	 * CS02:0: = 010 to choose TIMER0_CLOCK = F_CPU/64, so PWM Signal = 500Hz
	 * TCNTO = 0 start TIMER0
	 * OCR0 = Duty_cycle to set duty cycle according to the input value
	 */

	TCCR0 = (1 << WGM00) | (1 << WGM01) |(1 << COM01) |(1 << CS01)| (1 << CS00);
    3234:	e3 e5       	ldi	r30, 0x53	; 83
    3236:	f0 e0       	ldi	r31, 0x00	; 0
    3238:	8b e6       	ldi	r24, 0x6B	; 107
    323a:	80 83       	st	Z, r24
	TCNT0 = 0;
    323c:	e2 e5       	ldi	r30, 0x52	; 82
    323e:	f0 e0       	ldi	r31, 0x00	; 0
    3240:	10 82       	st	Z, r1

	switch(duty_cycle){
    3242:	89 81       	ldd	r24, Y+1	; 0x01
    3244:	28 2f       	mov	r18, r24
    3246:	30 e0       	ldi	r19, 0x00	; 0
    3248:	3b 83       	std	Y+3, r19	; 0x03
    324a:	2a 83       	std	Y+2, r18	; 0x02
    324c:	8a 81       	ldd	r24, Y+2	; 0x02
    324e:	9b 81       	ldd	r25, Y+3	; 0x03
    3250:	82 33       	cpi	r24, 0x32	; 50
    3252:	91 05       	cpc	r25, r1
    3254:	f9 f0       	breq	.+62     	; 0x3294 <PWM_Timer0_Start+0x6e>
    3256:	2a 81       	ldd	r18, Y+2	; 0x02
    3258:	3b 81       	ldd	r19, Y+3	; 0x03
    325a:	23 33       	cpi	r18, 0x33	; 51
    325c:	31 05       	cpc	r19, r1
    325e:	54 f4       	brge	.+20     	; 0x3274 <PWM_Timer0_Start+0x4e>
    3260:	8a 81       	ldd	r24, Y+2	; 0x02
    3262:	9b 81       	ldd	r25, Y+3	; 0x03
    3264:	00 97       	sbiw	r24, 0x00	; 0
    3266:	89 f0       	breq	.+34     	; 0x328a <PWM_Timer0_Start+0x64>
    3268:	2a 81       	ldd	r18, Y+2	; 0x02
    326a:	3b 81       	ldd	r19, Y+3	; 0x03
    326c:	29 31       	cpi	r18, 0x19	; 25
    326e:	31 05       	cpc	r19, r1
    3270:	71 f0       	breq	.+28     	; 0x328e <PWM_Timer0_Start+0x68>
    3272:	18 c0       	rjmp	.+48     	; 0x32a4 <PWM_Timer0_Start+0x7e>
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	9b 81       	ldd	r25, Y+3	; 0x03
    3278:	8b 34       	cpi	r24, 0x4B	; 75
    327a:	91 05       	cpc	r25, r1
    327c:	71 f0       	breq	.+28     	; 0x329a <PWM_Timer0_Start+0x74>
    327e:	2a 81       	ldd	r18, Y+2	; 0x02
    3280:	3b 81       	ldd	r19, Y+3	; 0x03
    3282:	24 36       	cpi	r18, 0x64	; 100
    3284:	31 05       	cpc	r19, r1
    3286:	61 f0       	breq	.+24     	; 0x32a0 <PWM_Timer0_Start+0x7a>
    3288:	0d c0       	rjmp	.+26     	; 0x32a4 <PWM_Timer0_Start+0x7e>

	case 0 :
		duty_cycle = 0;
    328a:	19 82       	std	Y+1, r1	; 0x01
    328c:	0b c0       	rjmp	.+22     	; 0x32a4 <PWM_Timer0_Start+0x7e>
		break;

	case 25:
		duty_cycle = 64;
    328e:	80 e4       	ldi	r24, 0x40	; 64
    3290:	89 83       	std	Y+1, r24	; 0x01
    3292:	08 c0       	rjmp	.+16     	; 0x32a4 <PWM_Timer0_Start+0x7e>
		break;

	case 50:
		duty_cycle = 128;
    3294:	80 e8       	ldi	r24, 0x80	; 128
    3296:	89 83       	std	Y+1, r24	; 0x01
    3298:	05 c0       	rjmp	.+10     	; 0x32a4 <PWM_Timer0_Start+0x7e>
		break;

	case 75:
		duty_cycle = 192;
    329a:	80 ec       	ldi	r24, 0xC0	; 192
    329c:	89 83       	std	Y+1, r24	; 0x01
    329e:	02 c0       	rjmp	.+4      	; 0x32a4 <PWM_Timer0_Start+0x7e>
		break;

	case 100:
		duty_cycle = 255;
    32a0:	8f ef       	ldi	r24, 0xFF	; 255
    32a2:	89 83       	std	Y+1, r24	; 0x01
		break;

	}

	OCR0 = duty_cycle;
    32a4:	ec e5       	ldi	r30, 0x5C	; 92
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	89 81       	ldd	r24, Y+1	; 0x01
    32aa:	80 83       	st	Z, r24



}
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	0f 90       	pop	r0
    32b2:	cf 91       	pop	r28
    32b4:	df 91       	pop	r29
    32b6:	08 95       	ret

000032b8 <__vector_9>:


/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER1_OVF_vect){
    32b8:	1f 92       	push	r1
    32ba:	0f 92       	push	r0
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	0f 92       	push	r0
    32c0:	11 24       	eor	r1, r1
    32c2:	2f 93       	push	r18
    32c4:	3f 93       	push	r19
    32c6:	4f 93       	push	r20
    32c8:	5f 93       	push	r21
    32ca:	6f 93       	push	r22
    32cc:	7f 93       	push	r23
    32ce:	8f 93       	push	r24
    32d0:	9f 93       	push	r25
    32d2:	af 93       	push	r26
    32d4:	bf 93       	push	r27
    32d6:	ef 93       	push	r30
    32d8:	ff 93       	push	r31
    32da:	df 93       	push	r29
    32dc:	cf 93       	push	r28
    32de:	cd b7       	in	r28, 0x3d	; 61
    32e0:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR){
    32e2:	80 91 87 00 	lds	r24, 0x0087
    32e6:	90 91 88 00 	lds	r25, 0x0088
    32ea:	00 97       	sbiw	r24, 0x00	; 0
    32ec:	29 f0       	breq	.+10     	; 0x32f8 <__vector_9+0x40>
		/* Call the Call Back function in the application after Overflow */
		(*g_callBackPtr)();
    32ee:	e0 91 87 00 	lds	r30, 0x0087
    32f2:	f0 91 88 00 	lds	r31, 0x0088
    32f6:	09 95       	icall
	}
}
    32f8:	cf 91       	pop	r28
    32fa:	df 91       	pop	r29
    32fc:	ff 91       	pop	r31
    32fe:	ef 91       	pop	r30
    3300:	bf 91       	pop	r27
    3302:	af 91       	pop	r26
    3304:	9f 91       	pop	r25
    3306:	8f 91       	pop	r24
    3308:	7f 91       	pop	r23
    330a:	6f 91       	pop	r22
    330c:	5f 91       	pop	r21
    330e:	4f 91       	pop	r20
    3310:	3f 91       	pop	r19
    3312:	2f 91       	pop	r18
    3314:	0f 90       	pop	r0
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	0f 90       	pop	r0
    331a:	1f 90       	pop	r1
    331c:	18 95       	reti

0000331e <__vector_7>:


ISR(TIMER1_COMPA_vect){
    331e:	1f 92       	push	r1
    3320:	0f 92       	push	r0
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	0f 92       	push	r0
    3326:	11 24       	eor	r1, r1
    3328:	2f 93       	push	r18
    332a:	3f 93       	push	r19
    332c:	4f 93       	push	r20
    332e:	5f 93       	push	r21
    3330:	6f 93       	push	r22
    3332:	7f 93       	push	r23
    3334:	8f 93       	push	r24
    3336:	9f 93       	push	r25
    3338:	af 93       	push	r26
    333a:	bf 93       	push	r27
    333c:	ef 93       	push	r30
    333e:	ff 93       	push	r31
    3340:	df 93       	push	r29
    3342:	cf 93       	push	r28
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62

	if(g_callBackPtr != NULL_PTR){
    3348:	80 91 87 00 	lds	r24, 0x0087
    334c:	90 91 88 00 	lds	r25, 0x0088
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	29 f0       	breq	.+10     	; 0x335e <__vector_7+0x40>
			/* Call the Call Back function in the application after Compare Match */
			(*g_callBackPtr)();
    3354:	e0 91 87 00 	lds	r30, 0x0087
    3358:	f0 91 88 00 	lds	r31, 0x0088
    335c:	09 95       	icall
		}
}
    335e:	cf 91       	pop	r28
    3360:	df 91       	pop	r29
    3362:	ff 91       	pop	r31
    3364:	ef 91       	pop	r30
    3366:	bf 91       	pop	r27
    3368:	af 91       	pop	r26
    336a:	9f 91       	pop	r25
    336c:	8f 91       	pop	r24
    336e:	7f 91       	pop	r23
    3370:	6f 91       	pop	r22
    3372:	5f 91       	pop	r21
    3374:	4f 91       	pop	r20
    3376:	3f 91       	pop	r19
    3378:	2f 91       	pop	r18
    337a:	0f 90       	pop	r0
    337c:	0f be       	out	0x3f, r0	; 63
    337e:	0f 90       	pop	r0
    3380:	1f 90       	pop	r1
    3382:	18 95       	reti

00003384 <Timer1_init>:
 * Function to initialize the Timer driver
 * Inputs: pointer to the configuration structure with type Timer1_ConfigType.
 * Return: None
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3384:	df 93       	push	r29
    3386:	cf 93       	push	r28
    3388:	00 d0       	rcall	.+0      	; 0x338a <Timer1_init+0x6>
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	9a 83       	std	Y+2, r25	; 0x02
    3390:	89 83       	std	Y+1, r24	; 0x01
	 * COM1B1:0 = 0 Disable Compare Output Mode for Compare unit B
	 * FOC1A = 1    Enable Force Output Compare for Compare unit A
	 * FOC1B = 1    Enable Force Output Compare for Compare unit B
	 * WGM11:10     Waveform Generation Mode
	 ***********************************************************************/
	TCCR1A = (1<<FOC1A) |(1<<FOC1B);
    3392:	ef e4       	ldi	r30, 0x4F	; 79
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	8c e0       	ldi	r24, 0x0C	; 12
    3398:	80 83       	st	Z, r24
	TCCR1A = (( Config_Ptr->mode & 0x02) << WGM10);
    339a:	af e4       	ldi	r26, 0x4F	; 79
    339c:	b0 e0       	ldi	r27, 0x00	; 0
    339e:	e9 81       	ldd	r30, Y+1	; 0x01
    33a0:	fa 81       	ldd	r31, Y+2	; 0x02
    33a2:	85 81       	ldd	r24, Z+5	; 0x05
    33a4:	82 70       	andi	r24, 0x02	; 2
    33a6:	8c 93       	st	X, r24
	 * ICES1 = 0 Disable Input Capture Edge Select
	 * Reserved Bit
	 * WGM13:2 : Waveform Generation Mode
	 * CS12:0  : Clock Select
	 ***********************************************************************/
	TCCR1B = ( (Config_Ptr->mode & 0x0C) <<WGM12) | (Config_Ptr->prescaler <<CS10);
    33a8:	ae e4       	ldi	r26, 0x4E	; 78
    33aa:	b0 e0       	ldi	r27, 0x00	; 0
    33ac:	e9 81       	ldd	r30, Y+1	; 0x01
    33ae:	fa 81       	ldd	r31, Y+2	; 0x02
    33b0:	85 81       	ldd	r24, Z+5	; 0x05
    33b2:	88 2f       	mov	r24, r24
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	8c 70       	andi	r24, 0x0C	; 12
    33b8:	90 70       	andi	r25, 0x00	; 0
    33ba:	88 0f       	add	r24, r24
    33bc:	99 1f       	adc	r25, r25
    33be:	88 0f       	add	r24, r24
    33c0:	99 1f       	adc	r25, r25
    33c2:	88 0f       	add	r24, r24
    33c4:	99 1f       	adc	r25, r25
    33c6:	98 2f       	mov	r25, r24
    33c8:	e9 81       	ldd	r30, Y+1	; 0x01
    33ca:	fa 81       	ldd	r31, Y+2	; 0x02
    33cc:	84 81       	ldd	r24, Z+4	; 0x04
    33ce:	89 2b       	or	r24, r25
    33d0:	8c 93       	st	X, r24

	/************************** TCNT1 Description **************************
	 * TCNT1 give direct access, both for read and for write operations,
	 * to the Timer/Counter unit 16-bit counter.
	 ***********************************************************************/
	TCNT1 = Config_Ptr->initial_value;
    33d2:	ac e4       	ldi	r26, 0x4C	; 76
    33d4:	b0 e0       	ldi	r27, 0x00	; 0
    33d6:	e9 81       	ldd	r30, Y+1	; 0x01
    33d8:	fa 81       	ldd	r31, Y+2	; 0x02
    33da:	80 81       	ld	r24, Z
    33dc:	91 81       	ldd	r25, Z+1	; 0x01
    33de:	11 96       	adiw	r26, 0x01	; 1
    33e0:	9c 93       	st	X, r25
    33e2:	8e 93       	st	-X, r24
	 * The Output Compare Registers contain a 16-bit value that is continuously
	 * compared with the counter value (TCNT1).
	 * A match can be used to generate an output compare interrupt,
	 * or to generate a waveform output on the OC1x pin.
	 ***********************************************************************/
	OCR1A = Config_Ptr->compare_value;
    33e4:	aa e4       	ldi	r26, 0x4A	; 74
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	e9 81       	ldd	r30, Y+1	; 0x01
    33ea:	fa 81       	ldd	r31, Y+2	; 0x02
    33ec:	82 81       	ldd	r24, Z+2	; 0x02
    33ee:	93 81       	ldd	r25, Z+3	; 0x03
    33f0:	11 96       	adiw	r26, 0x01	; 1
    33f2:	9c 93       	st	X, r25
    33f4:	8e 93       	st	-X, r24
	 * TICIE1 = 0 Disable Input Capture Interrupt Enable
	 * OCIE1A = 1 Enable Output Compare A Match Interrupt Enable
	 * OCIE1B = 0 Disable Output Compare B Match Interrupt Enable
	 * TOIE1  = 1 Enable  Overflow Interrupt Enable
	 ***********************************************************************/
	TIMSK |= (1<<OCIE1A) | (1<<TOIE1);
    33f6:	a9 e5       	ldi	r26, 0x59	; 89
    33f8:	b0 e0       	ldi	r27, 0x00	; 0
    33fa:	e9 e5       	ldi	r30, 0x59	; 89
    33fc:	f0 e0       	ldi	r31, 0x00	; 0
    33fe:	80 81       	ld	r24, Z
    3400:	84 61       	ori	r24, 0x14	; 20
    3402:	8c 93       	st	X, r24


}
    3404:	0f 90       	pop	r0
    3406:	0f 90       	pop	r0
    3408:	cf 91       	pop	r28
    340a:	df 91       	pop	r29
    340c:	08 95       	ret

0000340e <Timer1_deInit>:
 * Description :
 * Function to disable the Timer1.
 * Inputs: None
 * Return: None
 */
void Timer1_deInit(void){
    340e:	df 93       	push	r29
    3410:	cf 93       	push	r28
    3412:	cd b7       	in	r28, 0x3d	; 61
    3414:	de b7       	in	r29, 0x3e	; 62

	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    3416:	ef e4       	ldi	r30, 0x4F	; 79
    3418:	f0 e0       	ldi	r31, 0x00	; 0
    341a:	10 82       	st	Z, r1
	TCCR1B = 0;
    341c:	ee e4       	ldi	r30, 0x4E	; 78
    341e:	f0 e0       	ldi	r31, 0x00	; 0
    3420:	10 82       	st	Z, r1
	TCNT1  = 0;
    3422:	ec e4       	ldi	r30, 0x4C	; 76
    3424:	f0 e0       	ldi	r31, 0x00	; 0
    3426:	11 82       	std	Z+1, r1	; 0x01
    3428:	10 82       	st	Z, r1
	OCR1A  = 0;
    342a:	ea e4       	ldi	r30, 0x4A	; 74
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	11 82       	std	Z+1, r1	; 0x01
    3430:	10 82       	st	Z, r1

	/* Disable the Timer1 interrupt */
	TIMSK &= ~(1<<OCIE1A) & ~(1<<TOIE1);
    3432:	a9 e5       	ldi	r26, 0x59	; 89
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	e9 e5       	ldi	r30, 0x59	; 89
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	80 81       	ld	r24, Z
    343c:	8b 7e       	andi	r24, 0xEB	; 235
    343e:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    3440:	10 92 88 00 	sts	0x0088, r1
    3444:	10 92 87 00 	sts	0x0087, r1
}
    3448:	cf 91       	pop	r28
    344a:	df 91       	pop	r29
    344c:	08 95       	ret

0000344e <Timer1_setCallBack>:
 * Description :
 * Function to set the Call Back function address.
 * Inputs: pointer to Call Back function.
 * Return: None
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	00 d0       	rcall	.+0      	; 0x3454 <Timer1_setCallBack+0x6>
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	9a 83       	std	Y+2, r25	; 0x02
    345a:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	9a 81       	ldd	r25, Y+2	; 0x02
    3460:	90 93 88 00 	sts	0x0088, r25
    3464:	80 93 87 00 	sts	0x0087, r24
}
    3468:	0f 90       	pop	r0
    346a:	0f 90       	pop	r0
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	08 95       	ret

00003472 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    3472:	0f 93       	push	r16
    3474:	1f 93       	push	r17
    3476:	df 93       	push	r29
    3478:	cf 93       	push	r28
    347a:	00 d0       	rcall	.+0      	; 0x347c <TWI_init+0xa>
    347c:	cd b7       	in	r28, 0x3d	; 61
    347e:	de b7       	in	r29, 0x3e	; 62
    3480:	9a 83       	std	Y+2, r25	; 0x02
    3482:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = ( (F_CPU/Config_Ptr->bit_rate) - 16 ) / 2;
    3484:	00 e2       	ldi	r16, 0x20	; 32
    3486:	10 e0       	ldi	r17, 0x00	; 0
    3488:	e9 81       	ldd	r30, Y+1	; 0x01
    348a:	fa 81       	ldd	r31, Y+2	; 0x02
    348c:	21 81       	ldd	r18, Z+1	; 0x01
    348e:	32 81       	ldd	r19, Z+2	; 0x02
    3490:	43 81       	ldd	r20, Z+3	; 0x03
    3492:	54 81       	ldd	r21, Z+4	; 0x04
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	92 e1       	ldi	r25, 0x12	; 18
    3498:	aa e7       	ldi	r26, 0x7A	; 122
    349a:	b0 e0       	ldi	r27, 0x00	; 0
    349c:	bc 01       	movw	r22, r24
    349e:	cd 01       	movw	r24, r26
    34a0:	0e 94 1b 1c 	call	0x3836	; 0x3836 <__udivmodsi4>
    34a4:	da 01       	movw	r26, r20
    34a6:	c9 01       	movw	r24, r18
    34a8:	40 97       	sbiw	r24, 0x10	; 16
    34aa:	a1 09       	sbc	r26, r1
    34ac:	b1 09       	sbc	r27, r1
    34ae:	b6 95       	lsr	r27
    34b0:	a7 95       	ror	r26
    34b2:	97 95       	ror	r25
    34b4:	87 95       	ror	r24
    34b6:	f8 01       	movw	r30, r16
    34b8:	80 83       	st	Z, r24
	TWSR = 0x00;
    34ba:	e1 e2       	ldi	r30, 0x21	; 33
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address <<1); // my address = 0x01 :)
    34c0:	a2 e2       	ldi	r26, 0x22	; 34
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	e9 81       	ldd	r30, Y+1	; 0x01
    34c6:	fa 81       	ldd	r31, Y+2	; 0x02
    34c8:	80 81       	ld	r24, Z
    34ca:	88 0f       	add	r24, r24
    34cc:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    34ce:	e6 e5       	ldi	r30, 0x56	; 86
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	84 e0       	ldi	r24, 0x04	; 4
    34d4:	80 83       	st	Z, r24
}
    34d6:	0f 90       	pop	r0
    34d8:	0f 90       	pop	r0
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	1f 91       	pop	r17
    34e0:	0f 91       	pop	r16
    34e2:	08 95       	ret

000034e4 <TWI_start>:

void TWI_start(void)
{
    34e4:	df 93       	push	r29
    34e6:	cf 93       	push	r28
    34e8:	cd b7       	in	r28, 0x3d	; 61
    34ea:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    34ec:	e6 e5       	ldi	r30, 0x56	; 86
    34ee:	f0 e0       	ldi	r31, 0x00	; 0
    34f0:	84 ea       	ldi	r24, 0xA4	; 164
    34f2:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    34f4:	e6 e5       	ldi	r30, 0x56	; 86
    34f6:	f0 e0       	ldi	r31, 0x00	; 0
    34f8:	80 81       	ld	r24, Z
    34fa:	88 23       	and	r24, r24
    34fc:	dc f7       	brge	.-10     	; 0x34f4 <TWI_start+0x10>
}
    34fe:	cf 91       	pop	r28
    3500:	df 91       	pop	r29
    3502:	08 95       	ret

00003504 <TWI_stop>:

void TWI_stop(void)
{
    3504:	df 93       	push	r29
    3506:	cf 93       	push	r28
    3508:	cd b7       	in	r28, 0x3d	; 61
    350a:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    350c:	e6 e5       	ldi	r30, 0x56	; 86
    350e:	f0 e0       	ldi	r31, 0x00	; 0
    3510:	84 e9       	ldi	r24, 0x94	; 148
    3512:	80 83       	st	Z, r24
}
    3514:	cf 91       	pop	r28
    3516:	df 91       	pop	r29
    3518:	08 95       	ret

0000351a <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    351a:	df 93       	push	r29
    351c:	cf 93       	push	r28
    351e:	0f 92       	push	r0
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
    3524:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    3526:	e3 e2       	ldi	r30, 0x23	; 35
    3528:	f0 e0       	ldi	r31, 0x00	; 0
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    352e:	e6 e5       	ldi	r30, 0x56	; 86
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	84 e8       	ldi	r24, 0x84	; 132
    3534:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3536:	e6 e5       	ldi	r30, 0x56	; 86
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	80 81       	ld	r24, Z
    353c:	88 23       	and	r24, r24
    353e:	dc f7       	brge	.-10     	; 0x3536 <TWI_writeByte+0x1c>
}
    3540:	0f 90       	pop	r0
    3542:	cf 91       	pop	r28
    3544:	df 91       	pop	r29
    3546:	08 95       	ret

00003548 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3550:	e6 e5       	ldi	r30, 0x56	; 86
    3552:	f0 e0       	ldi	r31, 0x00	; 0
    3554:	84 ec       	ldi	r24, 0xC4	; 196
    3556:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3558:	e6 e5       	ldi	r30, 0x56	; 86
    355a:	f0 e0       	ldi	r31, 0x00	; 0
    355c:	80 81       	ld	r24, Z
    355e:	88 23       	and	r24, r24
    3560:	dc f7       	brge	.-10     	; 0x3558 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    3562:	e3 e2       	ldi	r30, 0x23	; 35
    3564:	f0 e0       	ldi	r31, 0x00	; 0
    3566:	80 81       	ld	r24, Z
}
    3568:	cf 91       	pop	r28
    356a:	df 91       	pop	r29
    356c:	08 95       	ret

0000356e <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    356e:	df 93       	push	r29
    3570:	cf 93       	push	r28
    3572:	cd b7       	in	r28, 0x3d	; 61
    3574:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    3576:	e6 e5       	ldi	r30, 0x56	; 86
    3578:	f0 e0       	ldi	r31, 0x00	; 0
    357a:	84 e8       	ldi	r24, 0x84	; 132
    357c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    357e:	e6 e5       	ldi	r30, 0x56	; 86
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	80 81       	ld	r24, Z
    3584:	88 23       	and	r24, r24
    3586:	dc f7       	brge	.-10     	; 0x357e <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    3588:	e3 e2       	ldi	r30, 0x23	; 35
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	80 81       	ld	r24, Z
}
    358e:	cf 91       	pop	r28
    3590:	df 91       	pop	r29
    3592:	08 95       	ret

00003594 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    3594:	df 93       	push	r29
    3596:	cf 93       	push	r28
    3598:	0f 92       	push	r0
    359a:	cd b7       	in	r28, 0x3d	; 61
    359c:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    359e:	e1 e2       	ldi	r30, 0x21	; 33
    35a0:	f0 e0       	ldi	r31, 0x00	; 0
    35a2:	80 81       	ld	r24, Z
    35a4:	88 7f       	andi	r24, 0xF8	; 248
    35a6:	89 83       	std	Y+1, r24	; 0x01
    return status;
    35a8:	89 81       	ldd	r24, Y+1	; 0x01
}
    35aa:	0f 90       	pop	r0
    35ac:	cf 91       	pop	r28
    35ae:	df 91       	pop	r29
    35b0:	08 95       	ret

000035b2 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType *Config_ptr)
{
    35b2:	0f 93       	push	r16
    35b4:	1f 93       	push	r17
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	00 d0       	rcall	.+0      	; 0x35bc <UART_init+0xa>
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	9a 83       	std	Y+2, r25	; 0x02
    35c2:	89 83       	std	Y+1, r24	; 0x01
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    35c4:	eb e2       	ldi	r30, 0x2B	; 43
    35c6:	f0 e0       	ldi	r31, 0x00	; 0
    35c8:	82 e0       	ldi	r24, 0x02	; 2
    35ca:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN) | ( ((Config_ptr->bit_data) >> 2) << UCSZ2);
    35cc:	aa e2       	ldi	r26, 0x2A	; 42
    35ce:	b0 e0       	ldi	r27, 0x00	; 0
    35d0:	e9 81       	ldd	r30, Y+1	; 0x01
    35d2:	fa 81       	ldd	r31, Y+2	; 0x02
    35d4:	80 81       	ld	r24, Z
    35d6:	86 95       	lsr	r24
    35d8:	86 95       	lsr	r24
    35da:	88 2f       	mov	r24, r24
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	88 0f       	add	r24, r24
    35e0:	99 1f       	adc	r25, r25
    35e2:	88 0f       	add	r24, r24
    35e4:	99 1f       	adc	r25, r25
    35e6:	88 61       	ori	r24, 0x18	; 24
    35e8:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (Config_ptr->parity << UPM0) | (Config_ptr->stop_bit<<USBS) | (Config_ptr->bit_data << UCSZ0);
    35ea:	a0 e4       	ldi	r26, 0x40	; 64
    35ec:	b0 e0       	ldi	r27, 0x00	; 0
    35ee:	e9 81       	ldd	r30, Y+1	; 0x01
    35f0:	fa 81       	ldd	r31, Y+2	; 0x02
    35f2:	81 81       	ldd	r24, Z+1	; 0x01
    35f4:	88 2f       	mov	r24, r24
    35f6:	90 e0       	ldi	r25, 0x00	; 0
    35f8:	82 95       	swap	r24
    35fa:	92 95       	swap	r25
    35fc:	90 7f       	andi	r25, 0xF0	; 240
    35fe:	98 27       	eor	r25, r24
    3600:	80 7f       	andi	r24, 0xF0	; 240
    3602:	98 27       	eor	r25, r24
    3604:	28 2f       	mov	r18, r24
    3606:	20 68       	ori	r18, 0x80	; 128
    3608:	e9 81       	ldd	r30, Y+1	; 0x01
    360a:	fa 81       	ldd	r31, Y+2	; 0x02
    360c:	82 81       	ldd	r24, Z+2	; 0x02
    360e:	88 2f       	mov	r24, r24
    3610:	90 e0       	ldi	r25, 0x00	; 0
    3612:	88 0f       	add	r24, r24
    3614:	99 1f       	adc	r25, r25
    3616:	88 0f       	add	r24, r24
    3618:	99 1f       	adc	r25, r25
    361a:	88 0f       	add	r24, r24
    361c:	99 1f       	adc	r25, r25
    361e:	28 2b       	or	r18, r24
    3620:	e9 81       	ldd	r30, Y+1	; 0x01
    3622:	fa 81       	ldd	r31, Y+2	; 0x02
    3624:	80 81       	ld	r24, Z
    3626:	88 2f       	mov	r24, r24
    3628:	90 e0       	ldi	r25, 0x00	; 0
    362a:	88 0f       	add	r24, r24
    362c:	99 1f       	adc	r25, r25
    362e:	82 2b       	or	r24, r18
    3630:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */


	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = (uint16)(((F_CPU / (Config_ptr->baud_rate * 8UL))) - 1) >> 8;
    3632:	00 e4       	ldi	r16, 0x40	; 64
    3634:	10 e0       	ldi	r17, 0x00	; 0
    3636:	e9 81       	ldd	r30, Y+1	; 0x01
    3638:	fa 81       	ldd	r31, Y+2	; 0x02
    363a:	83 81       	ldd	r24, Z+3	; 0x03
    363c:	94 81       	ldd	r25, Z+4	; 0x04
    363e:	cc 01       	movw	r24, r24
    3640:	a0 e0       	ldi	r26, 0x00	; 0
    3642:	b0 e0       	ldi	r27, 0x00	; 0
    3644:	88 0f       	add	r24, r24
    3646:	99 1f       	adc	r25, r25
    3648:	aa 1f       	adc	r26, r26
    364a:	bb 1f       	adc	r27, r27
    364c:	88 0f       	add	r24, r24
    364e:	99 1f       	adc	r25, r25
    3650:	aa 1f       	adc	r26, r26
    3652:	bb 1f       	adc	r27, r27
    3654:	88 0f       	add	r24, r24
    3656:	99 1f       	adc	r25, r25
    3658:	aa 1f       	adc	r26, r26
    365a:	bb 1f       	adc	r27, r27
    365c:	9c 01       	movw	r18, r24
    365e:	ad 01       	movw	r20, r26
    3660:	80 e0       	ldi	r24, 0x00	; 0
    3662:	92 e1       	ldi	r25, 0x12	; 18
    3664:	aa e7       	ldi	r26, 0x7A	; 122
    3666:	b0 e0       	ldi	r27, 0x00	; 0
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 1b 1c 	call	0x3836	; 0x3836 <__udivmodsi4>
    3670:	da 01       	movw	r26, r20
    3672:	c9 01       	movw	r24, r18
    3674:	01 97       	sbiw	r24, 0x01	; 1
    3676:	89 2f       	mov	r24, r25
    3678:	99 27       	eor	r25, r25
    367a:	f8 01       	movw	r30, r16
    367c:	80 83       	st	Z, r24
	UBRRL = (uint16)(((F_CPU / (Config_ptr->baud_rate * 8UL))) - 1);
    367e:	09 e2       	ldi	r16, 0x29	; 41
    3680:	10 e0       	ldi	r17, 0x00	; 0
    3682:	e9 81       	ldd	r30, Y+1	; 0x01
    3684:	fa 81       	ldd	r31, Y+2	; 0x02
    3686:	83 81       	ldd	r24, Z+3	; 0x03
    3688:	94 81       	ldd	r25, Z+4	; 0x04
    368a:	cc 01       	movw	r24, r24
    368c:	a0 e0       	ldi	r26, 0x00	; 0
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	88 0f       	add	r24, r24
    3692:	99 1f       	adc	r25, r25
    3694:	aa 1f       	adc	r26, r26
    3696:	bb 1f       	adc	r27, r27
    3698:	88 0f       	add	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	aa 1f       	adc	r26, r26
    369e:	bb 1f       	adc	r27, r27
    36a0:	88 0f       	add	r24, r24
    36a2:	99 1f       	adc	r25, r25
    36a4:	aa 1f       	adc	r26, r26
    36a6:	bb 1f       	adc	r27, r27
    36a8:	9c 01       	movw	r18, r24
    36aa:	ad 01       	movw	r20, r26
    36ac:	80 e0       	ldi	r24, 0x00	; 0
    36ae:	92 e1       	ldi	r25, 0x12	; 18
    36b0:	aa e7       	ldi	r26, 0x7A	; 122
    36b2:	b0 e0       	ldi	r27, 0x00	; 0
    36b4:	bc 01       	movw	r22, r24
    36b6:	cd 01       	movw	r24, r26
    36b8:	0e 94 1b 1c 	call	0x3836	; 0x3836 <__udivmodsi4>
    36bc:	da 01       	movw	r26, r20
    36be:	c9 01       	movw	r24, r18
    36c0:	81 50       	subi	r24, 0x01	; 1
    36c2:	f8 01       	movw	r30, r16
    36c4:	80 83       	st	Z, r24

}
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	cf 91       	pop	r28
    36cc:	df 91       	pop	r29
    36ce:	1f 91       	pop	r17
    36d0:	0f 91       	pop	r16
    36d2:	08 95       	ret

000036d4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    36d4:	df 93       	push	r29
    36d6:	cf 93       	push	r28
    36d8:	0f 92       	push	r0
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
    36de:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    36e0:	eb e2       	ldi	r30, 0x2B	; 43
    36e2:	f0 e0       	ldi	r31, 0x00	; 0
    36e4:	80 81       	ld	r24, Z
    36e6:	88 2f       	mov	r24, r24
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	80 72       	andi	r24, 0x20	; 32
    36ec:	90 70       	andi	r25, 0x00	; 0
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	b9 f3       	breq	.-18     	; 0x36e0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    36f2:	ec e2       	ldi	r30, 0x2C	; 44
    36f4:	f0 e0       	ldi	r31, 0x00	; 0
    36f6:	89 81       	ldd	r24, Y+1	; 0x01
    36f8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    36fa:	0f 90       	pop	r0
    36fc:	cf 91       	pop	r28
    36fe:	df 91       	pop	r29
    3700:	08 95       	ret

00003702 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3702:	df 93       	push	r29
    3704:	cf 93       	push	r28
    3706:	cd b7       	in	r28, 0x3d	; 61
    3708:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    370a:	eb e2       	ldi	r30, 0x2B	; 43
    370c:	f0 e0       	ldi	r31, 0x00	; 0
    370e:	80 81       	ld	r24, Z
    3710:	88 23       	and	r24, r24
    3712:	dc f7       	brge	.-10     	; 0x370a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    3714:	ec e2       	ldi	r30, 0x2C	; 44
    3716:	f0 e0       	ldi	r31, 0x00	; 0
    3718:	80 81       	ld	r24, Z
}
    371a:	cf 91       	pop	r28
    371c:	df 91       	pop	r29
    371e:	08 95       	ret

00003720 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3720:	df 93       	push	r29
    3722:	cf 93       	push	r28
    3724:	00 d0       	rcall	.+0      	; 0x3726 <UART_sendString+0x6>
    3726:	0f 92       	push	r0
    3728:	cd b7       	in	r28, 0x3d	; 61
    372a:	de b7       	in	r29, 0x3e	; 62
    372c:	9b 83       	std	Y+3, r25	; 0x03
    372e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3730:	19 82       	std	Y+1, r1	; 0x01
    3732:	0e c0       	rjmp	.+28     	; 0x3750 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	28 2f       	mov	r18, r24
    3738:	30 e0       	ldi	r19, 0x00	; 0
    373a:	8a 81       	ldd	r24, Y+2	; 0x02
    373c:	9b 81       	ldd	r25, Y+3	; 0x03
    373e:	fc 01       	movw	r30, r24
    3740:	e2 0f       	add	r30, r18
    3742:	f3 1f       	adc	r31, r19
    3744:	80 81       	ld	r24, Z
    3746:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <UART_sendByte>
		i++;
    374a:	89 81       	ldd	r24, Y+1	; 0x01
    374c:	8f 5f       	subi	r24, 0xFF	; 255
    374e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3750:	89 81       	ldd	r24, Y+1	; 0x01
    3752:	28 2f       	mov	r18, r24
    3754:	30 e0       	ldi	r19, 0x00	; 0
    3756:	8a 81       	ldd	r24, Y+2	; 0x02
    3758:	9b 81       	ldd	r25, Y+3	; 0x03
    375a:	fc 01       	movw	r30, r24
    375c:	e2 0f       	add	r30, r18
    375e:	f3 1f       	adc	r31, r19
    3760:	80 81       	ld	r24, Z
    3762:	88 23       	and	r24, r24
    3764:	39 f7       	brne	.-50     	; 0x3734 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3766:	0f 90       	pop	r0
    3768:	0f 90       	pop	r0
    376a:	0f 90       	pop	r0
    376c:	cf 91       	pop	r28
    376e:	df 91       	pop	r29
    3770:	08 95       	ret

00003772 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3772:	0f 93       	push	r16
    3774:	1f 93       	push	r17
    3776:	df 93       	push	r29
    3778:	cf 93       	push	r28
    377a:	00 d0       	rcall	.+0      	; 0x377c <UART_receiveString+0xa>
    377c:	0f 92       	push	r0
    377e:	cd b7       	in	r28, 0x3d	; 61
    3780:	de b7       	in	r29, 0x3e	; 62
    3782:	9b 83       	std	Y+3, r25	; 0x03
    3784:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3786:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	28 2f       	mov	r18, r24
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	8a 81       	ldd	r24, Y+2	; 0x02
    3790:	9b 81       	ldd	r25, Y+3	; 0x03
    3792:	8c 01       	movw	r16, r24
    3794:	02 0f       	add	r16, r18
    3796:	13 1f       	adc	r17, r19
    3798:	0e 94 81 1b 	call	0x3702	; 0x3702 <UART_recieveByte>
    379c:	f8 01       	movw	r30, r16
    379e:	80 83       	st	Z, r24
    37a0:	0f c0       	rjmp	.+30     	; 0x37c0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    37a2:	89 81       	ldd	r24, Y+1	; 0x01
    37a4:	8f 5f       	subi	r24, 0xFF	; 255
    37a6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    37a8:	89 81       	ldd	r24, Y+1	; 0x01
    37aa:	28 2f       	mov	r18, r24
    37ac:	30 e0       	ldi	r19, 0x00	; 0
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	8c 01       	movw	r16, r24
    37b4:	02 0f       	add	r16, r18
    37b6:	13 1f       	adc	r17, r19
    37b8:	0e 94 81 1b 	call	0x3702	; 0x3702 <UART_recieveByte>
    37bc:	f8 01       	movw	r30, r16
    37be:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    37c0:	89 81       	ldd	r24, Y+1	; 0x01
    37c2:	28 2f       	mov	r18, r24
    37c4:	30 e0       	ldi	r19, 0x00	; 0
    37c6:	8a 81       	ldd	r24, Y+2	; 0x02
    37c8:	9b 81       	ldd	r25, Y+3	; 0x03
    37ca:	fc 01       	movw	r30, r24
    37cc:	e2 0f       	add	r30, r18
    37ce:	f3 1f       	adc	r31, r19
    37d0:	80 81       	ld	r24, Z
    37d2:	83 32       	cpi	r24, 0x23	; 35
    37d4:	31 f7       	brne	.-52     	; 0x37a2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    37d6:	89 81       	ldd	r24, Y+1	; 0x01
    37d8:	28 2f       	mov	r18, r24
    37da:	30 e0       	ldi	r19, 0x00	; 0
    37dc:	8a 81       	ldd	r24, Y+2	; 0x02
    37de:	9b 81       	ldd	r25, Y+3	; 0x03
    37e0:	fc 01       	movw	r30, r24
    37e2:	e2 0f       	add	r30, r18
    37e4:	f3 1f       	adc	r31, r19
    37e6:	10 82       	st	Z, r1
}
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	0f 90       	pop	r0
    37ee:	cf 91       	pop	r28
    37f0:	df 91       	pop	r29
    37f2:	1f 91       	pop	r17
    37f4:	0f 91       	pop	r16
    37f6:	08 95       	ret

000037f8 <__mulsi3>:
    37f8:	62 9f       	mul	r22, r18
    37fa:	d0 01       	movw	r26, r0
    37fc:	73 9f       	mul	r23, r19
    37fe:	f0 01       	movw	r30, r0
    3800:	82 9f       	mul	r24, r18
    3802:	e0 0d       	add	r30, r0
    3804:	f1 1d       	adc	r31, r1
    3806:	64 9f       	mul	r22, r20
    3808:	e0 0d       	add	r30, r0
    380a:	f1 1d       	adc	r31, r1
    380c:	92 9f       	mul	r25, r18
    380e:	f0 0d       	add	r31, r0
    3810:	83 9f       	mul	r24, r19
    3812:	f0 0d       	add	r31, r0
    3814:	74 9f       	mul	r23, r20
    3816:	f0 0d       	add	r31, r0
    3818:	65 9f       	mul	r22, r21
    381a:	f0 0d       	add	r31, r0
    381c:	99 27       	eor	r25, r25
    381e:	72 9f       	mul	r23, r18
    3820:	b0 0d       	add	r27, r0
    3822:	e1 1d       	adc	r30, r1
    3824:	f9 1f       	adc	r31, r25
    3826:	63 9f       	mul	r22, r19
    3828:	b0 0d       	add	r27, r0
    382a:	e1 1d       	adc	r30, r1
    382c:	f9 1f       	adc	r31, r25
    382e:	bd 01       	movw	r22, r26
    3830:	cf 01       	movw	r24, r30
    3832:	11 24       	eor	r1, r1
    3834:	08 95       	ret

00003836 <__udivmodsi4>:
    3836:	a1 e2       	ldi	r26, 0x21	; 33
    3838:	1a 2e       	mov	r1, r26
    383a:	aa 1b       	sub	r26, r26
    383c:	bb 1b       	sub	r27, r27
    383e:	fd 01       	movw	r30, r26
    3840:	0d c0       	rjmp	.+26     	; 0x385c <__udivmodsi4_ep>

00003842 <__udivmodsi4_loop>:
    3842:	aa 1f       	adc	r26, r26
    3844:	bb 1f       	adc	r27, r27
    3846:	ee 1f       	adc	r30, r30
    3848:	ff 1f       	adc	r31, r31
    384a:	a2 17       	cp	r26, r18
    384c:	b3 07       	cpc	r27, r19
    384e:	e4 07       	cpc	r30, r20
    3850:	f5 07       	cpc	r31, r21
    3852:	20 f0       	brcs	.+8      	; 0x385c <__udivmodsi4_ep>
    3854:	a2 1b       	sub	r26, r18
    3856:	b3 0b       	sbc	r27, r19
    3858:	e4 0b       	sbc	r30, r20
    385a:	f5 0b       	sbc	r31, r21

0000385c <__udivmodsi4_ep>:
    385c:	66 1f       	adc	r22, r22
    385e:	77 1f       	adc	r23, r23
    3860:	88 1f       	adc	r24, r24
    3862:	99 1f       	adc	r25, r25
    3864:	1a 94       	dec	r1
    3866:	69 f7       	brne	.-38     	; 0x3842 <__udivmodsi4_loop>
    3868:	60 95       	com	r22
    386a:	70 95       	com	r23
    386c:	80 95       	com	r24
    386e:	90 95       	com	r25
    3870:	9b 01       	movw	r18, r22
    3872:	ac 01       	movw	r20, r24
    3874:	bd 01       	movw	r22, r26
    3876:	cf 01       	movw	r24, r30
    3878:	08 95       	ret

0000387a <__prologue_saves__>:
    387a:	2f 92       	push	r2
    387c:	3f 92       	push	r3
    387e:	4f 92       	push	r4
    3880:	5f 92       	push	r5
    3882:	6f 92       	push	r6
    3884:	7f 92       	push	r7
    3886:	8f 92       	push	r8
    3888:	9f 92       	push	r9
    388a:	af 92       	push	r10
    388c:	bf 92       	push	r11
    388e:	cf 92       	push	r12
    3890:	df 92       	push	r13
    3892:	ef 92       	push	r14
    3894:	ff 92       	push	r15
    3896:	0f 93       	push	r16
    3898:	1f 93       	push	r17
    389a:	cf 93       	push	r28
    389c:	df 93       	push	r29
    389e:	cd b7       	in	r28, 0x3d	; 61
    38a0:	de b7       	in	r29, 0x3e	; 62
    38a2:	ca 1b       	sub	r28, r26
    38a4:	db 0b       	sbc	r29, r27
    38a6:	0f b6       	in	r0, 0x3f	; 63
    38a8:	f8 94       	cli
    38aa:	de bf       	out	0x3e, r29	; 62
    38ac:	0f be       	out	0x3f, r0	; 63
    38ae:	cd bf       	out	0x3d, r28	; 61
    38b0:	09 94       	ijmp

000038b2 <__epilogue_restores__>:
    38b2:	2a 88       	ldd	r2, Y+18	; 0x12
    38b4:	39 88       	ldd	r3, Y+17	; 0x11
    38b6:	48 88       	ldd	r4, Y+16	; 0x10
    38b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    38ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    38bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    38be:	8c 84       	ldd	r8, Y+12	; 0x0c
    38c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    38c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    38c4:	b9 84       	ldd	r11, Y+9	; 0x09
    38c6:	c8 84       	ldd	r12, Y+8	; 0x08
    38c8:	df 80       	ldd	r13, Y+7	; 0x07
    38ca:	ee 80       	ldd	r14, Y+6	; 0x06
    38cc:	fd 80       	ldd	r15, Y+5	; 0x05
    38ce:	0c 81       	ldd	r16, Y+4	; 0x04
    38d0:	1b 81       	ldd	r17, Y+3	; 0x03
    38d2:	aa 81       	ldd	r26, Y+2	; 0x02
    38d4:	b9 81       	ldd	r27, Y+1	; 0x01
    38d6:	ce 0f       	add	r28, r30
    38d8:	d1 1d       	adc	r29, r1
    38da:	0f b6       	in	r0, 0x3f	; 63
    38dc:	f8 94       	cli
    38de:	de bf       	out	0x3e, r29	; 62
    38e0:	0f be       	out	0x3f, r0	; 63
    38e2:	cd bf       	out	0x3d, r28	; 61
    38e4:	ed 01       	movw	r28, r26
    38e6:	08 95       	ret

000038e8 <ltoa>:
    38e8:	fa 01       	movw	r30, r20
    38ea:	cf 93       	push	r28
    38ec:	ff 93       	push	r31
    38ee:	ef 93       	push	r30
    38f0:	22 30       	cpi	r18, 0x02	; 2
    38f2:	44 f1       	brlt	.+80     	; 0x3944 <ltoa+0x5c>
    38f4:	25 32       	cpi	r18, 0x25	; 37
    38f6:	34 f5       	brge	.+76     	; 0x3944 <ltoa+0x5c>
    38f8:	c2 2f       	mov	r28, r18
    38fa:	e8 94       	clt
    38fc:	ca 30       	cpi	r28, 0x0A	; 10
    38fe:	49 f4       	brne	.+18     	; 0x3912 <ltoa+0x2a>
    3900:	97 fb       	bst	r25, 7
    3902:	3e f4       	brtc	.+14     	; 0x3912 <ltoa+0x2a>
    3904:	90 95       	com	r25
    3906:	80 95       	com	r24
    3908:	70 95       	com	r23
    390a:	61 95       	neg	r22
    390c:	7f 4f       	sbci	r23, 0xFF	; 255
    390e:	8f 4f       	sbci	r24, 0xFF	; 255
    3910:	9f 4f       	sbci	r25, 0xFF	; 255
    3912:	2c 2f       	mov	r18, r28
    3914:	33 27       	eor	r19, r19
    3916:	44 27       	eor	r20, r20
    3918:	55 27       	eor	r21, r21
    391a:	ff 93       	push	r31
    391c:	ef 93       	push	r30
    391e:	0e 94 1b 1c 	call	0x3836	; 0x3836 <__udivmodsi4>
    3922:	ef 91       	pop	r30
    3924:	ff 91       	pop	r31
    3926:	60 5d       	subi	r22, 0xD0	; 208
    3928:	6a 33       	cpi	r22, 0x3A	; 58
    392a:	0c f0       	brlt	.+2      	; 0x392e <ltoa+0x46>
    392c:	69 5d       	subi	r22, 0xD9	; 217
    392e:	61 93       	st	Z+, r22
    3930:	b9 01       	movw	r22, r18
    3932:	ca 01       	movw	r24, r20
    3934:	60 50       	subi	r22, 0x00	; 0
    3936:	70 40       	sbci	r23, 0x00	; 0
    3938:	80 40       	sbci	r24, 0x00	; 0
    393a:	90 40       	sbci	r25, 0x00	; 0
    393c:	51 f7       	brne	.-44     	; 0x3912 <ltoa+0x2a>
    393e:	16 f4       	brtc	.+4      	; 0x3944 <ltoa+0x5c>
    3940:	cd e2       	ldi	r28, 0x2D	; 45
    3942:	c1 93       	st	Z+, r28
    3944:	10 82       	st	Z, r1
    3946:	8f 91       	pop	r24
    3948:	9f 91       	pop	r25
    394a:	cf 91       	pop	r28
    394c:	0c 94 a8 1c 	jmp	0x3950	; 0x3950 <strrev>

00003950 <strrev>:
    3950:	dc 01       	movw	r26, r24
    3952:	fc 01       	movw	r30, r24
    3954:	67 2f       	mov	r22, r23
    3956:	71 91       	ld	r23, Z+
    3958:	77 23       	and	r23, r23
    395a:	e1 f7       	brne	.-8      	; 0x3954 <strrev+0x4>
    395c:	32 97       	sbiw	r30, 0x02	; 2
    395e:	04 c0       	rjmp	.+8      	; 0x3968 <strrev+0x18>
    3960:	7c 91       	ld	r23, X
    3962:	6d 93       	st	X+, r22
    3964:	70 83       	st	Z, r23
    3966:	62 91       	ld	r22, -Z
    3968:	ae 17       	cp	r26, r30
    396a:	bf 07       	cpc	r27, r31
    396c:	c8 f3       	brcs	.-14     	; 0x3960 <strrev+0x10>
    396e:	08 95       	ret

00003970 <_exit>:
    3970:	f8 94       	cli

00003972 <__stop_program>:
    3972:	ff cf       	rjmp	.-2      	; 0x3972 <__stop_program>
